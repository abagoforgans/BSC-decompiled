contract main {




// =====================  Runtime code  =====================


#
#  - withdraw(uint256 arg1)
#  - sub_356471f6(?)
#  - sub_62d3f6c8(?)
#  - withdrawRewards(uint256 arg1)
#  - sub_cf484726(?)
#
const sub_22f73972(?) = 0x8fbe8d8e4723dea859610467c8eff84eaab6c6

const sub_31a8bfc3(?) = 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39

const sub_777f5440(?) = 0x64e15161b214f9c229611d1f613e527b3342c081

const maxLevel = 10

const sub_e1482605(?) = 0x46825d2c11a405bc7d78d521c766b52a355cc9df


address owner;
address cfoAddress;
mapping of uint8 stor2;
uint8 paused;
uint256 stor4;
uint256 sub_6e854978;
uint256 periodTime;
uint256 sub_708f8646;
mapping of uint256 sub_3e6311cf;
mapping of uint256 sub_03fcd1d5;
uint256 sub_9aeb501c;
mapping of struct sub_25d3150d;
mapping of struct sub_b90aa6d2;
mapping of uint256 sub_b9a1ffe7;
mapping of uint256 sub_7cc60a9e;
mapping of uint256 sub_6f605160;
uint256 sub_8ff382e9;
mapping of struct stor99;

function sub_03fcd1d5(?) {
    require calldata.size - 4 >= 32
    return sub_03fcd1d5[arg1]
}

function periodTime() {
    return periodTime
}

function cfo() {
    return cfoAddress
}

function isAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor2[arg1])
}

function sub_25d3150d(?) {
    require calldata.size - 4 >= 64
    return uint32(sub_25d3150d[arg1][arg2].field_0), 
           Mask(96, 0, sub_25d3150d[arg1][arg2].field_0),
           uint128(sub_25d3150d[arg1][arg2].field_128)
}

function sub_3e6311cf(?) {
    require calldata.size - 4 >= 32
    return sub_3e6311cf[arg1]
}

function paused() {
    return bool(paused)
}

function sub_6e854978(?) {
    return sub_6e854978
}

function sub_6f605160(?) {
    require calldata.size - 4 >= 32
    return sub_6f605160[arg1]
}

function sub_708f8646(?) {
    return sub_708f8646
}

function sub_7cc60a9e(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_7cc60a9e[arg1]
}

function owner() {
    return owner
}

function sub_8ff382e9(?) {
    return sub_8ff382e9
}

function sub_9aeb501c(?) {
    return sub_9aeb501c
}

function sub_b90aa6d2(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    return uint64(sub_b90aa6d2[arg1][arg2].field_0), 
           uint32(sub_b90aa6d2[arg1][arg2].field_0),
           uint32(sub_b90aa6d2[arg1][arg2].field_0),
           uint32(sub_b90aa6d2[arg1][arg2].field_0),
           uint32(sub_b90aa6d2[arg1][arg2].field_160),
           Mask(96, 0, sub_b90aa6d2[arg1][arg2].field_256)
}

function sub_b9a1ffe7(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    return sub_b9a1ffe7[arg1][arg2]
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function sub_a68a3100(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_8ff382e9 = arg1
}

function pause() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if paused:
        revert with 0, 'Pausable: paused'
    paused = 1
    emit Paused(msg.sender);
}

function unpause() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not paused:
        revert with 0, 'Pausable: not paused'
    paused = 0
    emit Unpaused(msg.sender);
}

function setPeriodTime(uint256 arg1) {
    require calldata.size - 4 >= 32
    if not stor2[msg.sender]:
        revert with 0, 'onlyAdmin: forbidden'
    if arg1 <= 0:
        revert with 0, '_periodTime can not be 0'
    periodTime = arg1
}

function sub_0afff104(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 <= 0:
        revert with 0, '_populationBase can not be 0'
    sub_6e854978 = arg1
}

function setCfo(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0, '_cfo can not be address 0'
    cfoAddress = arg1
}

function sub_b2f29601(?) {
    require calldata.size - 4 >= 32
    if not stor2[msg.sender]:
        revert with 0, 'onlyAdmin: forbidden'
    if arg1 > 10^18:
        revert with 0, '_rate too high'
    sub_708f8646 = arg1
    emit 0xfb5a44ff: msg.sender, sub_708f8646, arg1
}

function addAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0, 'admin can not be address 0'
    stor2[address(arg1)] = 1
}

function removeAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0, 'admin can not be address 0'
    stor2[address(arg1)] = 0
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    require arg4 <= test266151307()
    require calldata.size > arg4 + 35
    if arg4.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg4.length)) + 97 < 96 or ceil32(ceil32(arg4.length)) + 97 > test266151307():
        revert with 0, 65
    require arg4 + arg4.length + 36 <= calldata.size
    return 0x150b7a0200000000000000000000000000000000000000000000000000000000
}

function sub_45ee0761(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if cfoAddress != msg.sender:
        if owner != msg.sender:
            revert with 0, 'onlyCfo: forbidden'
    if not address(arg1):
        revert with 0, 'to can not be address 0'
    require ext_code.size(address(arg2))
    call address(arg2).safeTransferFrom(address arg1, address arg2, uint256 arg3) with:
         gas gas_remaining wei
        args address(this.address), address(arg1), arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit 0x38dfb0ec: msg.sender, address(arg1), address(arg2), arg3
}

function sub_5d45bb34(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if cfoAddress != msg.sender:
        if owner != msg.sender:
            revert with 0, 'onlyCfo: forbidden'
    if arg2 <= 0:
        revert with 0, 'amount can not be 0'
    if eth.balance(this.address) < arg2:
        revert with 0, 'insufficient balance'
    if not address(arg1):
        revert with 0, 'invalid to address'
    if ext_code.size(address(arg1)):
        revert with 0, 'invalid to address'
    call address(arg1) with:
       value arg2 wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit 0x380efc78: msg.sender, address(arg1), arg2
}

function sub_6130f5f8(?) {
    require calldata.size - 4 >= 128
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if cfoAddress != msg.sender:
        if owner != msg.sender:
            revert with 0, 'onlyCfo: forbidden'
    if not address(arg1):
        revert with 0, 'to can not be address 0'
    if arg4 <= 0:
        revert with 0, 'amount can not be 0'
    require ext_code.size(address(arg2))
    call address(arg2).safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
         gas gas_remaining wei
        args 0, 0, address(arg1), arg3, arg4, 160, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit 0xafb7dd84: msg.sender, address(arg1), address(arg2), arg3, arg4
}

function sub_3660894f(?) {
    if eth.balance(this.address):
        if cfoAddress != msg.sender:
            if owner != msg.sender:
                revert with 0, 'onlyCfo: forbidden'
        if eth.balance(this.address) <= 0:
            revert with 0, 'amount can not be 0'
        if eth.balance(this.address) < eth.balance(this.address):
            revert with 0, 'insufficient balance'
        if not msg.sender:
            revert with 0, 'invalid to address'
        if ext_code.size(msg.sender):
            revert with 0, 'invalid to address'
        call msg.sender with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit 0x380efc78: msg.sender, msg.sender, eth.balance(this.address)
}

function sub_38e5b52e(?) {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    require ('cd', 4).length <= test266151307()
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ('cd', 4).length:
        mem[128 len 32 * ('cd', 4).length] = call.data[calldata.size len 32 * ('cd', 4).length]
    idx = 0
    while idx < ('cd', 4).length:
        mem[0] = cd[((32 * idx) + cd[4] + 36)]
        mem[32] = 15
        if idx >= ('cd', 4).length:
            revert with 0, 50
        mem[(32 * idx) + 128] = sub_6f605160[cd[((32 * idx) + cd[4] + 36)]]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return Array(len=('cd', 4).length, data=mem[128 len 32 * ('cd', 4).length])
}

function sub_47003800(?) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xcc637afe with:
            gas gas_remaining wei
           args Array(len=arg1.length, data=arg1[all])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    return bool(ext_call.return_data[0])
}

function sub_28889838(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if eth.balance(this.address):
        if cfoAddress != msg.sender:
            if owner != msg.sender:
                revert with 0, 'onlyCfo: forbidden'
        if eth.balance(this.address) <= 0:
            revert with 0, 'amount can not be 0'
        if eth.balance(this.address) < eth.balance(this.address):
            revert with 0, 'insufficient balance'
        if not address(arg1):
            revert with 0, 'invalid to address'
        if ext_code.size(address(arg1)):
            revert with 0, 'invalid to address'
        call address(arg1) with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit 0x380efc78: msg.sender, address(arg1), eth.balance(this.address)
}

function sub_cad53f10(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    mem[100] = this.address
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        if cfoAddress != msg.sender:
            if owner != msg.sender:
                revert with 0, 'onlyCfo: forbidden'
        if not address(arg1):
            revert with 0, 'invalid token'
        if ext_call.return_data[0] <= 0:
            revert with 0, 'amount can not be 0'
        if not msg.sender:
            revert with 0, 'invalid to address'
        if ext_code.size(msg.sender):
            revert with 0, 'invalid to address'
        mem[ceil32(return_data.size) + 132] = msg.sender
        mem[ceil32(return_data.size) + 164] = ext_call.return_data[0]
        mem[ceil32(return_data.size) + 96] = 68
        mem[ceil32(return_data.size) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
        mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
        mem[ceil32(return_data.size) + 196] = 32
        mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 'Address: insufficient balance for call'
        if not ext_code.size(address(arg1)):
            revert with 0, 'Address: call to non-contract'
        mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), msg.sender, ext_call.return_data[0], 0
        mem[ceil32(return_data.size) + 328] = 0
        call address(arg1) with:
           funct Mask(32, 224, unknown_0xa9059cbb(?????), msg.sender, ext_call.return_data[0], 0) >> 224
             gas gas_remaining wei
            args (Mask(512, -288, unknown_0xa9059cbb(?????), msg.sender, ext_call.return_data[0], 0) << 288)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if ext_call.return_data[0]:
                require ext_call.return_data[0] >= 32
                require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
                if not uint32(this.address), mem[132 len 28]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
                if not mem[ceil32(return_data.size) + 292]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        emit 0x5ca456ba: msg.sender, address(arg1), msg.sender, ext_call.return_data[0]
}

function sub_a329b45d(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    mem[100] = this.address
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        if cfoAddress != msg.sender:
            if owner != msg.sender:
                revert with 0, 'onlyCfo: forbidden'
        if not address(arg1):
            revert with 0, 'invalid token'
        if ext_call.return_data[0] <= 0:
            revert with 0, 'amount can not be 0'
        if not address(arg2):
            revert with 0, 'invalid to address'
        if ext_code.size(address(arg2)):
            revert with 0, 'invalid to address'
        mem[ceil32(return_data.size) + 132] = address(arg2)
        mem[ceil32(return_data.size) + 164] = ext_call.return_data[0]
        mem[ceil32(return_data.size) + 96] = 68
        mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
        mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
        mem[ceil32(return_data.size) + 196] = 32
        mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 'Address: insufficient balance for call'
        if not ext_code.size(address(arg1)):
            revert with 0, 'Address: call to non-contract'
        mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ext_call.return_data[0], 0
        mem[ceil32(return_data.size) + 328] = 0
        call address(arg1) with:
           funct Mask(32, 224, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ext_call.return_data[0], 0) >> 224
             gas gas_remaining wei
            args (Mask(512, -288, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ext_call.return_data[0], 0) << 288)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if ext_call.return_data[0]:
                require ext_call.return_data[0] >= 32
                require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
                if not uint32(this.address), mem[132 len 28]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
                if not mem[ceil32(return_data.size) + 292]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        emit 0x5ca456ba: msg.sender, address(arg1), address(arg2), ext_call.return_data[0]
}

function sub_d38cc3e6(?) {
    require calldata.size - 4 >= 32
    if stor4 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor4 = 2
    if not arg1:
        revert with 0, 'territoryId can not be 0'
    mem[100] = arg1
    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.ownerOf(uint256 arg1) with:
            gas gas_remaining wei
           args arg1
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        revert with 0, 'owner of territory is not caller'
    mem[32] = 15
    if not sub_6f605160[arg1]:
        revert with 0, 'no rewards can claim'
    mem[ceil32(return_data.size) + 96] = 0xa19625e800000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = arg1
    mem[0] = arg1
    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 127
    _22 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 96]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 96]) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 96]) + 97
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + (32 * _22) + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len 32 * _22] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg1) >> 32 + 128 len 32 * _22]
    if 0 >= _22:
        revert with 0, 50
    if mem[(2 * ceil32(return_data.size)) + 128]:
        if mem[(2 * ceil32(return_data.size)) + 128] != 1:
            if mem[(2 * ceil32(return_data.size)) + 128] != 2:
                revert with 0, 18
            if sub_6f605160[arg1] / 10^18 <= 0:
                revert with 0, 'not enough water amount'
            require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
            call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, 0, 10, sub_6f605160[arg1] / 10^18, 160, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
            call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                 gas gas_remaining wei
                args msg.sender, 11, sub_6f605160[arg1] / 10^18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not sub_6f605160[arg1] / 10^18:
                if 0 > sub_6f605160[arg1]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if sub_6f605160[arg1] < 0:
                    revert with 0, 17
            else:
                if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                    revert with 0, 17
                if not sub_6f605160[arg1] / 10^18:
                    revert with 0, 18
                if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                    revert with 0, 'SafeMath: multiplication overflow'
                if 10^18 * sub_6f605160[arg1] / 10^18 > sub_6f605160[arg1]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if sub_6f605160[arg1] < 10^18 * sub_6f605160[arg1] / 10^18:
                    revert with 0, 17
                sub_6f605160[arg1] += -1 * 10^18 * sub_6f605160[arg1] / 10^18
            if not sub_6f605160[arg1] / 10^18:
                emit 0xa6c04211: msg.sender, arg1, 0, 10, 11, sub_6f605160[arg1] / 10^18
            else:
                if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                    revert with 0, 17
                if not sub_6f605160[arg1] / 10^18:
                    revert with 0, 18
                if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                    revert with 0, 'SafeMath: multiplication overflow'
                emit 0xa6c04211: msg.sender, arg1, 10^18 * sub_6f605160[arg1] / 10^18, 10, 11, sub_6f605160[arg1] / 10^18
        else:
            if sub_6f605160[arg1] / 10^18 <= 0:
                revert with 0, 'not enough water amount'
            require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
            if mem[(2 * ceil32(return_data.size)) + 128] != 2:
                call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, 8, sub_6f605160[arg1] / 10^18, 160, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                     gas gas_remaining wei
                    args msg.sender, 9, sub_6f605160[arg1] / 10^18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not sub_6f605160[arg1] / 10^18:
                    if 0 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 0:
                        revert with 0, 17
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 10^18 * sub_6f605160[arg1] / 10^18 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 10^18 * sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    sub_6f605160[arg1] += -1 * 10^18 * sub_6f605160[arg1] / 10^18
                if not sub_6f605160[arg1] / 10^18:
                    emit 0xa6c04211: msg.sender, arg1, 0, 8, 9, sub_6f605160[arg1] / 10^18
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    emit 0xa6c04211: msg.sender, arg1, 10^18 * sub_6f605160[arg1] / 10^18, 8, 9, sub_6f605160[arg1] / 10^18
            else:
                call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, 10, sub_6f605160[arg1] / 10^18, 160, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                     gas gas_remaining wei
                    args msg.sender, 11, sub_6f605160[arg1] / 10^18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not sub_6f605160[arg1] / 10^18:
                    if 0 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 0:
                        revert with 0, 17
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 10^18 * sub_6f605160[arg1] / 10^18 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 10^18 * sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    sub_6f605160[arg1] += -1 * 10^18 * sub_6f605160[arg1] / 10^18
                if not sub_6f605160[arg1] / 10^18:
                    emit 0xa6c04211: msg.sender, arg1, 0, 10, 11, sub_6f605160[arg1] / 10^18
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    emit 0xa6c04211: msg.sender, arg1, 10^18 * sub_6f605160[arg1] / 10^18, 10, 11, sub_6f605160[arg1] / 10^18
    else:
        if mem[(2 * ceil32(return_data.size)) + 128] != 1:
            if mem[(2 * ceil32(return_data.size)) + 128] != 2:
                if sub_6f605160[arg1] / 50 * 10^18 <= 0:
                    revert with 0, 'not enough water amount'
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, 6, sub_6f605160[arg1] / 50 * 10^18, 160, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                     gas gas_remaining wei
                    args msg.sender, 7, sub_6f605160[arg1] / 50 * 10^18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not sub_6f605160[arg1] / 50 * 10^18:
                    if 0 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 0:
                        revert with 0, 17
                else:
                    if sub_6f605160[arg1] / 50 * 10^18 and 50 * 10^18 > -1 / sub_6f605160[arg1] / 50 * 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 50 * 10^18:
                        revert with 0, 18
                    if 50 * 10^18 * sub_6f605160[arg1] / 50 * 10^18 / sub_6f605160[arg1] / 50 * 10^18 != 50 * 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 50 * 10^18 * sub_6f605160[arg1] / 50 * 10^18 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 50 * 10^18 * sub_6f605160[arg1] / 50 * 10^18:
                        revert with 0, 17
                    sub_6f605160[arg1] += -50 * 10^18 * sub_6f605160[arg1] / 50 * 10^18
                if not sub_6f605160[arg1] / 50 * 10^18:
                    emit 0xa6c04211: msg.sender, arg1, 0, 6, 7, sub_6f605160[arg1] / 50 * 10^18
                else:
                    if sub_6f605160[arg1] / 50 * 10^18 and 50 * 10^18 > -1 / sub_6f605160[arg1] / 50 * 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 50 * 10^18:
                        revert with 0, 18
                    if 50 * 10^18 * sub_6f605160[arg1] / 50 * 10^18 / sub_6f605160[arg1] / 50 * 10^18 != 50 * 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    emit 0xa6c04211: msg.sender, arg1, 50 * 10^18 * sub_6f605160[arg1] / 50 * 10^18, 6, 7, sub_6f605160[arg1] / 50 * 10^18
            else:
                if sub_6f605160[arg1] / 10^18 <= 0:
                    revert with 0, 'not enough water amount'
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, 10, sub_6f605160[arg1] / 10^18, 160, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                     gas gas_remaining wei
                    args msg.sender, 11, sub_6f605160[arg1] / 10^18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not sub_6f605160[arg1] / 10^18:
                    if 0 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 0:
                        revert with 0, 17
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 10^18 * sub_6f605160[arg1] / 10^18 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 10^18 * sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    sub_6f605160[arg1] += -1 * 10^18 * sub_6f605160[arg1] / 10^18
                if not sub_6f605160[arg1] / 10^18:
                    emit 0xa6c04211: msg.sender, arg1, 0, 10, 11, sub_6f605160[arg1] / 10^18
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    emit 0xa6c04211: msg.sender, arg1, 10^18 * sub_6f605160[arg1] / 10^18, 10, 11, sub_6f605160[arg1] / 10^18
        else:
            if sub_6f605160[arg1] / 10^18 <= 0:
                revert with 0, 'not enough water amount'
            require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
            if mem[(2 * ceil32(return_data.size)) + 128] != 2:
                call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, 8, sub_6f605160[arg1] / 10^18, 160, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                     gas gas_remaining wei
                    args msg.sender, 9, sub_6f605160[arg1] / 10^18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not sub_6f605160[arg1] / 10^18:
                    if 0 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 0:
                        revert with 0, 17
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 10^18 * sub_6f605160[arg1] / 10^18 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 10^18 * sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    sub_6f605160[arg1] += -1 * 10^18 * sub_6f605160[arg1] / 10^18
                if not sub_6f605160[arg1] / 10^18:
                    emit 0xa6c04211: msg.sender, arg1, 0, 8, 9, sub_6f605160[arg1] / 10^18
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    emit 0xa6c04211: msg.sender, arg1, 10^18 * sub_6f605160[arg1] / 10^18, 8, 9, sub_6f605160[arg1] / 10^18
            else:
                call 0x64e15161b214f9c229611d1f613e527b3342c081.safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, 10, sub_6f605160[arg1] / 10^18, 160, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(0x64e15161b214f9c229611d1f613e527b3342c081)
                call 0x64e15161b214f9c229611d1f613e527b3342c081.mint(address arg1, uint256 arg2, uint256 arg3) with:
                     gas gas_remaining wei
                    args msg.sender, 11, sub_6f605160[arg1] / 10^18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not sub_6f605160[arg1] / 10^18:
                    if 0 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 0:
                        revert with 0, 17
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 10^18 * sub_6f605160[arg1] / 10^18 > sub_6f605160[arg1]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if sub_6f605160[arg1] < 10^18 * sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    sub_6f605160[arg1] += -1 * 10^18 * sub_6f605160[arg1] / 10^18
                if not sub_6f605160[arg1] / 10^18:
                    emit 0xa6c04211: msg.sender, arg1, 0, 10, 11, sub_6f605160[arg1] / 10^18
                else:
                    if sub_6f605160[arg1] / 10^18 and 10^18 > -1 / sub_6f605160[arg1] / 10^18:
                        revert with 0, 17
                    if not sub_6f605160[arg1] / 10^18:
                        revert with 0, 18
                    if 10^18 * sub_6f605160[arg1] / 10^18 / sub_6f605160[arg1] / 10^18 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    emit 0xa6c04211: msg.sender, arg1, 10^18 * sub_6f605160[arg1] / 10^18, 10, 11, sub_6f605160[arg1] / 10^18
    stor4 = 1
}

function sub_921c498f(?) {
    require calldata.size - 4 >= 64
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg2.length)) + 97 < 96 or ceil32(ceil32(arg2.length)) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg2.length
    require arg2 + arg2.length + 36 <= calldata.size
    mem[128 len arg2.length] = arg2[all]
    mem[arg2.length + 128] = 0
    if arg1 <= 0:
        revert with 0, 'territoryId can not be 0'
    if arg2.length <= 0:
        revert with 0, '_name can not be empty'
    mem[ceil32(ceil32(arg2.length)) + 101] = arg1
    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.ownerOf(uint256 arg1) with:
            gas gas_remaining wei
           args arg1
    mem[ceil32(ceil32(arg2.length)) + 97] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        revert with 0, 'owner of territoryId is not caller'
    mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97] = 0x9021453700000000000000000000000000000000000000000000000000000000
    mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 101] = arg1
    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(ceil32(arg2.length)) + (2 * ceil32(return_data.size)) + 97
    require return_data.size >= 32
    _20 = mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32
    require mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 <= test266151307()
    require ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + return_data.size + 97 > ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 + 128
    _21 = mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 + 97]
    if mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 + 97] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 + 97])) + 1 < 0 or ceil32(ceil32(arg2.length)) + (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 + 97])) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(ceil32(arg2.length)) + (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, arg1) >> 32 + 97])) + 98
    mem[ceil32(ceil32(arg2.length)) + (2 * ceil32(return_data.size)) + 97] = _21
    require _20 + _21 + 32 <= return_data.size
    mem[ceil32(ceil32(arg2.length)) + (2 * ceil32(return_data.size)) + 129 len ceil32(_21)] = mem[ceil32(ceil32(arg2.length)) + ceil32(return_data.size) + _20 + 129 len ceil32(_21)]
    if ceil32(_21) <= _21:
        if _21:
            revert with 0, 'already started'
        mem[mem[64] + 36] = 64
        mem[mem[64] + 68] = arg2.length
        mem[mem[64] + 100 len ceil32(arg2.length)] = arg2[all], ext_call.return_data[arg2.length + -ceil32(ceil32(arg2.length)) + 31 len ceil32(arg2.length) - arg2.length]
        if ceil32(arg2.length) <= arg2.length:
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            call ????????????????????????????????????????.0x43d2cbcb with:
                 gas gas_remaining wei
                args arg1, Array(len=arg2.length, data=arg2[all])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = arg1
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                    gas gas_remaining wei
                   args arg1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _639 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _643 = mem[_639]
            require mem[_639] <= test266151307()
            require _639 + return_data.size > _639 + mem[_639] + 31
            _647 = mem[_639 + mem[_639]]
            if mem[_639 + mem[_639]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_639 + mem[_639]]) + 1 < 0 or _639 + ceil32(return_data.size) + ceil32(32 * mem[_639 + mem[_639]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _639 + ceil32(return_data.size) + ceil32(32 * mem[_639 + mem[_639]]) + 1
            mem[_639 + ceil32(return_data.size)] = _647
            require _643 + (32 * _647) + 32 <= return_data.size
            mem[_639 + ceil32(return_data.size) + 32 len 32 * _647] = mem[_639 + _643 + 32 len 32 * _647]
            if 1 >= _647:
                revert with 0, 50
            if 5 > !mem[_639 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_639 + ceil32(return_data.size) + 64] + 5 < 1:
                revert with 0, 17
            if mem[_639 + ceil32(return_data.size) + 64] == 10:
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_639 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_639 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_639 + ceil32(return_data.size) + 64] + 4)
                else:
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    uint8(sub_25d3150d[arg1][0].field_32) = 10
                    Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                uint8(sub_25d3150d[arg1][0].field_128) = 100
                Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
            else:
                if mem[_639 + ceil32(return_data.size) + 64] < 1:
                    revert with 0, 17
                if mem[_639 + ceil32(return_data.size) + 64] - 1 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_639 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_639 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    if (10 * mem[_639 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_639 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_639 + ceil32(return_data.size) + 64] + 4)
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_639 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_639 + ceil32(return_data.size) + 64] + 4)
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
                else:
                    if (10 * mem[_639 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_639 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_639 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
        else:
            mem[arg2.length + mem[64] + 100] = 0
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            call ????????????????????????????????????????.0x43d2cbcb with:
                 gas gas_remaining wei
                args arg1, Array(len=arg2.length, data=arg2[all])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = arg1
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                    gas gas_remaining wei
                   args arg1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _640 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _644 = mem[_640]
            require mem[_640] <= test266151307()
            require _640 + return_data.size > _640 + mem[_640] + 31
            _648 = mem[_640 + mem[_640]]
            if mem[_640 + mem[_640]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_640 + mem[_640]]) + 1 < 0 or _640 + ceil32(return_data.size) + ceil32(32 * mem[_640 + mem[_640]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _640 + ceil32(return_data.size) + ceil32(32 * mem[_640 + mem[_640]]) + 1
            mem[_640 + ceil32(return_data.size)] = _648
            require _644 + (32 * _648) + 32 <= return_data.size
            mem[_640 + ceil32(return_data.size) + 32 len 32 * _648] = mem[_640 + _644 + 32 len 32 * _648]
            if 1 >= _648:
                revert with 0, 50
            if 5 > !mem[_640 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_640 + ceil32(return_data.size) + 64] + 5 < 1:
                revert with 0, 17
            if mem[_640 + ceil32(return_data.size) + 64] == 10:
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_640 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_640 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_640 + ceil32(return_data.size) + 64] + 4)
                else:
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    uint8(sub_25d3150d[arg1][0].field_32) = 10
                    Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                uint8(sub_25d3150d[arg1][0].field_128) = 100
                Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
            else:
                if mem[_640 + ceil32(return_data.size) + 64] < 1:
                    revert with 0, 17
                if mem[_640 + ceil32(return_data.size) + 64] - 1 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_640 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_640 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    if (10 * mem[_640 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_640 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_640 + ceil32(return_data.size) + 64] + 4)
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_640 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_640 + ceil32(return_data.size) + 64] + 4)
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
                else:
                    if (10 * mem[_640 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_640 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_640 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
    else:
        mem[_21 + ceil32(ceil32(arg2.length)) + (2 * ceil32(return_data.size)) + 129] = 0
        if _21:
            revert with 0, 'already started'
        mem[mem[64] + 36] = 64
        mem[mem[64] + 68] = arg2.length
        mem[mem[64] + 100 len ceil32(arg2.length)] = arg2[all], ext_call.return_data[arg2.length + -ceil32(ceil32(arg2.length)) + 31 len ceil32(arg2.length) - arg2.length]
        if ceil32(arg2.length) <= arg2.length:
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            call ????????????????????????????????????????.0x43d2cbcb with:
                 gas gas_remaining wei
                args arg1, Array(len=arg2.length, data=arg2[all])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = arg1
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                    gas gas_remaining wei
                   args arg1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _641 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _645 = mem[_641]
            require mem[_641] <= test266151307()
            require _641 + return_data.size > _641 + mem[_641] + 31
            _649 = mem[_641 + mem[_641]]
            if mem[_641 + mem[_641]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_641 + mem[_641]]) + 1 < 0 or _641 + ceil32(return_data.size) + ceil32(32 * mem[_641 + mem[_641]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _641 + ceil32(return_data.size) + ceil32(32 * mem[_641 + mem[_641]]) + 1
            mem[_641 + ceil32(return_data.size)] = _649
            require _645 + (32 * _649) + 32 <= return_data.size
            mem[_641 + ceil32(return_data.size) + 32 len 32 * _649] = mem[_641 + _645 + 32 len 32 * _649]
            if 1 >= _649:
                revert with 0, 50
            if 5 > !mem[_641 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_641 + ceil32(return_data.size) + 64] + 5 < 1:
                revert with 0, 17
            if mem[_641 + ceil32(return_data.size) + 64] == 10:
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_641 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_641 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_641 + ceil32(return_data.size) + 64] + 4)
                else:
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    uint8(sub_25d3150d[arg1][0].field_32) = 10
                    Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                uint8(sub_25d3150d[arg1][0].field_128) = 100
                Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
            else:
                if mem[_641 + ceil32(return_data.size) + 64] < 1:
                    revert with 0, 17
                if mem[_641 + ceil32(return_data.size) + 64] - 1 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_641 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_641 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    if (10 * mem[_641 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_641 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_641 + ceil32(return_data.size) + 64] + 4)
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_641 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_641 + ceil32(return_data.size) + 64] + 4)
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
                else:
                    if (10 * mem[_641 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_641 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_641 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
        else:
            mem[arg2.length + mem[64] + 100] = 0
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            call ????????????????????????????????????????.0x43d2cbcb with:
                 gas gas_remaining wei
                args arg1, Array(len=arg2.length, data=arg2[all])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = arg1
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                    gas gas_remaining wei
                   args arg1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _642 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _646 = mem[_642]
            require mem[_642] <= test266151307()
            require _642 + return_data.size > _642 + mem[_642] + 31
            _650 = mem[_642 + mem[_642]]
            if mem[_642 + mem[_642]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_642 + mem[_642]]) + 1 < 0 or _642 + ceil32(return_data.size) + ceil32(32 * mem[_642 + mem[_642]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _642 + ceil32(return_data.size) + ceil32(32 * mem[_642 + mem[_642]]) + 1
            mem[_642 + ceil32(return_data.size)] = _650
            require _646 + (32 * _650) + 32 <= return_data.size
            mem[_642 + ceil32(return_data.size) + 32 len 32 * _650] = mem[_642 + _646 + 32 len 32 * _650]
            if 1 >= _650:
                revert with 0, 50
            if 5 > !mem[_642 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_642 + ceil32(return_data.size) + 64] + 5 < 1:
                revert with 0, 17
            if mem[_642 + ceil32(return_data.size) + 64] == 10:
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_642 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_642 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_642 + ceil32(return_data.size) + 64] + 4)
                else:
                    uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                    uint8(sub_25d3150d[arg1][0].field_32) = 10
                    Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                uint8(sub_25d3150d[arg1][0].field_128) = 100
                Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
            else:
                if mem[_642 + ceil32(return_data.size) + 64] < 1:
                    revert with 0, 17
                if mem[_642 + ceil32(return_data.size) + 64] - 1 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if block.timestamp > test266151307():
                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                if mem[_642 + ceil32(return_data.size) + 64] + 4 < 10:
                    if mem[_642 + ceil32(return_data.size) + 64] + 4 > test266151307():
                        revert with 0, 'SafeCast: value doesn't fit in 96 bits'
                    if (10 * mem[_642 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_642 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_642 + ceil32(return_data.size) + 64] + 4)
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_642 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        Mask(96, 0, sub_25d3150d[arg1][0].field_32) = Mask(96, 0, mem[_642 + ceil32(return_data.size) + 64] + 4)
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
                else:
                    if (10 * mem[_642 + ceil32(return_data.size) + 64]) - 10 < 100:
                        if (10 * mem[_642 + ceil32(return_data.size) + 64]) - 10 > test266151307():
                            revert with 0, 'SafeCast: value doesn't fit in 128 bits'
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint128(sub_25d3150d[arg1][0].field_128) = uint128((10 * mem[_642 + ceil32(return_data.size) + 64]) - 10)
                    else:
                        uint32(sub_25d3150d[arg1][0].field_0) = uint32(block.timestamp)
                        uint8(sub_25d3150d[arg1][0].field_32) = 10
                        Mask(88, 0, sub_25d3150d[arg1][0].field_40) = 0
                        uint8(sub_25d3150d[arg1][0].field_128) = 100
                        Mask(120, 0, sub_25d3150d[arg1][0].field_136) = 0
}

function earned(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    mem[32] = sha3(address(arg1), 12)
    mem[96] = uint64(sub_b90aa6d2[address(arg1)][arg2].field_0)
    mem[128] = uint32(sub_b90aa6d2[address(arg1)][arg2].field_64)
    mem[160] = uint32(sub_b90aa6d2[address(arg1)][arg2].field_96)
    mem[192] = uint32(sub_b90aa6d2[address(arg1)][arg2].field_128)
    mem[224] = uint32(sub_b90aa6d2[address(arg1)][arg2].field_160)
    mem[256] = Mask(96, 0, sub_b90aa6d2[address(arg1)][arg2].field_256)
    if not uint64(sub_b90aa6d2[address(arg1)][arg2].field_0):
        if sub_b9a1ffe7[address(arg1)][arg2] > -1:
            revert with 0, 17
        if sub_b9a1ffe7[address(arg1)][arg2] < sub_b9a1ffe7[address(arg1)][arg2]:
            revert with 0, 'SafeMath: addition overflow'
        return sub_b9a1ffe7[address(arg1)][arg2]
    mem[288] = 0xa19625e800000000000000000000000000000000000000000000000000000000
    mem[292] = uint32(sub_b90aa6d2[address(arg1)][arg2].field_64)
    mem[0] = arg2
    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
            gas gas_remaining wei
           args uint32(sub_b90aa6d2[address(arg1)][arg2].field_64)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[288 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 288
    require return_data.size >= 32
    _13 = mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0)
    require mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) <= test266151307()
    require return_data.size + 288 > mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 319
    _14 = mem[mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 288]
    if mem[mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 288] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 288]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 288]) + 289 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 288]) + 289
    mem[ceil32(return_data.size) + 288] = mem[mem[288 len 4], Mask(224, 0, sub_b90aa6d2[address(arg1)][arg2].field_0) + 288]
    require _13 + (32 * _14) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 320 len 32 * _14] = mem[_13 + 320 len 32 * _14]
    if 1 >= _14:
        revert with 0, 50
    _318 = mem[ceil32(return_data.size) + 352]
    if 0 == mem[ceil32(return_data.size) + 352]:
        if sub_b9a1ffe7[address(arg1)][arg2] > -1:
            revert with 0, 17
        if sub_b9a1ffe7[address(arg1)][arg2] < sub_b9a1ffe7[address(arg1)][arg2]:
            revert with 0, 'SafeMath: addition overflow'
        return sub_b9a1ffe7[address(arg1)][arg2]
    idx = mem[ceil32(return_data.size) + 352]
    while 0 < idx:
        if 0 > !bool(idx):
            revert with 0, 17
        if 0 > !(idx / 2):
            revert with 0, 17
        if idx / 2 > !0:
            revert with 0, 17
        mem[0] = idx / 2
        mem[32] = sha3(uint32(sub_b90aa6d2[address(arg1)][arg2].field_64) << 224, 11)
        if uint32(sub_b90aa6d2[address(arg1)][arg2].field_0) < uint32(sub_25d3150d[uint32(stor12[address(arg1)][arg2].field_64) << 224][Mask(255, 1, idx)].field_0):
            idx = idx / 2
            continue 
        if 1 > !(idx / 2):
            revert with 0, 17
        idx = idx
        continue 
    if not idx:
        if mem[ceil32(return_data.size) + 352] < 0:
            revert with 0, 17
        if mem[ceil32(return_data.size) + 352] > test266151307():
            revert with 0, 65
        _612 = mem[64]
        mem[mem[64]] = mem[ceil32(return_data.size) + 352]
        mem[64] = mem[64] + (32 * _318) + 32
        if not _318:
            idx = 0
            while idx < _318:
                _993 = sha3(mem[156 len 4], 11)
                mem[0] = idx
                mem[32] = sha3(mem[156 len 4], 11)
                _995 = mem[64]
                mem[64] = mem[64] + 96
                mem[_995] = uint32(sub_25d3150d[mem[156 len 4]][idx].field_0)
                mem[_995 + 32] = Mask(96, 0, stor[_993][idx].field_32)
                mem[_995 + 64] = uint128(stor[_993][idx].field_128)
                if idx < 0:
                    revert with 0, 17
                if idx >= mem[_612]:
                    revert with 0, 50
                mem[(32 * idx) + _612 + 32] = _995
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = uint32(sub_b90aa6d2[address(arg1)][arg2].field_128)
            s = 0
            while idx < block.timestamp:
                if idx > !periodTime:
                    revert with 0, 17
                if block.timestamp < idx + periodTime:
                    _1376 = mem[_612]
                    _1726 = mem[_612]
                    t = 0
                    while t < _1726:
                        if _1376 < 1:
                            revert with 0, 17
                        if t == _1376 - 1:
                            _1752 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1752] = 30
                            mem[_1752 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _1772 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1772 + 68] = mem[idx + _1752 + 32]
                                    _1726 = mem[_612]
                                    idx = idx + 32
                                    continue 
                                mem[_1772 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1772 + -mem[64] + 100
                        else:
                            if 1 > !t:
                                revert with 0, 17
                            if t + 1 >= mem[_612]:
                                revert with 0, 50
                            if mem[mem[(32 * t + 1) + _612 + 32] + 28 len 4] <= block.timestamp:
                                if t == -1:
                                    revert with 0, 17
                                _1726 = mem[_612]
                                t = t + 1
                                continue 
                            _1787 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1787] = 30
                            mem[_1787 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _1817 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1817 + 68] = mem[idx + _1787 + 32]
                                    _1726 = mem[_612]
                                    idx = idx + 32
                                    continue 
                                mem[_1817 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1817 + -mem[64] + 100
                        ('le', ('var', 0), 'timestamp')
                        if block.timestamp < idx:
                            revert with 0, 17
                        if not periodTime:
                            revert with 0, 18
                        if t >= mem[_612]:
                            revert with 0, 50
                        if 100 > -mem[mem[(32 * t) + _612 + 32] + 80 len 16] + test266151307():
                            revert with 0, 17
                        if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                            revert with 0, 17
                        if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                            revert with 0, 17
                        if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100):
                            revert with 0, 17
                        if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100) < s:
                            revert with 0, 'SafeMath: addition overflow'
                        _1726 = mem[_612]
                        idx = block.timestamp
                        s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100)
                        continue 
                    _1730 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1730] = 30
                    mem[_1730 + 32] = 'SafeMath: subtraction overflow'
                    if idx > block.timestamp:
                        _1734 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _1734 + 68] = mem[idx + _1730 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1734 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _1734 + -mem[64] + 100
                    if block.timestamp < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if 0 >= mem[_612]:
                        revert with 0, 50
                    if 100 > -mem[mem[_612 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                        revert with 0, 17
                    if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[_612 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = block.timestamp
                    s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _1382 = mem[_612]
                _1727 = mem[_612]
                t = 0
                while t < _1727:
                    if _1382 < 1:
                        revert with 0, 17
                    if t == _1382 - 1:
                        _1755 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1755] = 30
                        mem[_1755 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _1773 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1773 + 68] = mem[idx + _1755 + 32]
                                _1727 = mem[_612]
                                idx = idx + 32
                                continue 
                            mem[_1773 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1773 + -mem[64] + 100
                    else:
                        if 1 > !t:
                            revert with 0, 17
                        if t + 1 >= mem[_612]:
                            revert with 0, 50
                        if mem[mem[(32 * t + 1) + _612 + 32] + 28 len 4] <= idx + periodTime:
                            if t == -1:
                                revert with 0, 17
                            _1727 = mem[_612]
                            t = t + 1
                            continue 
                        _1789 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1789] = 30
                        mem[_1789 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _1819 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1819 + 68] = mem[idx + _1789 + 32]
                                _1727 = mem[_612]
                                idx = idx + 32
                                continue 
                            mem[_1819 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1819 + -mem[64] + 100
                    ('le', ('var', 0), ('add', ('var', 0), ('stor', ('name', 'periodTime', 6))))
                    if idx + periodTime < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if t >= mem[_612]:
                        revert with 0, 50
                    if 100 > -mem[mem[(32 * t) + _612 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                        revert with 0, 17
                    if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    _1727 = mem[_612]
                    idx = idx + periodTime
                    s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _1731 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1731] = 30
                mem[_1731 + 32] = 'SafeMath: subtraction overflow'
                if idx > idx + periodTime:
                    _1735 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[idx + _1735 + 68] = mem[idx + _1731 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1735 + 98] = 0
                    revert with memory
                      from mem[64]
                       len _1735 + -mem[64] + 100
                if idx + periodTime < idx:
                    revert with 0, 17
                if not periodTime:
                    revert with 0, 18
                if 0 >= mem[_612]:
                    revert with 0, 50
                if 100 > -mem[mem[_612 + 32] + 80 len 16] + test266151307():
                    revert with 0, 17
                if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                    revert with 0, 17
                if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[_612 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                    revert with 0, 17
                if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100):
                    revert with 0, 17
                if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100) < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + periodTime
                s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100)
                continue 
        else:
            mem[64] = _612 + (32 * _318) + 128
            mem[_612 + (32 * _318) + 32] = 0
            mem[_612 + (32 * _318) + 64] = 0
            mem[_612 + (32 * _318) + 96] = 0
            mem[_612 + 32] = _612 + (32 * _318) + 32
            s = _612 + 32
            idx = _318
            while idx - 1:
                mem[64] = mem[64] + 96
                mem[_612 + (32 * _318) + 32] = 0
                mem[_612 + (32 * _318) + 64] = 0
                mem[_612 + (32 * _318) + 96] = 0
                mem[s + 32] = _612 + (32 * _318) + 32
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < _318:
                _1365 = sha3(mem[156 len 4], 11)
                mem[0] = idx
                mem[32] = sha3(mem[156 len 4], 11)
                _1367 = mem[64]
                mem[64] = mem[64] + 96
                mem[_1367] = uint32(sub_25d3150d[mem[156 len 4]][idx].field_0)
                mem[_1367 + 32] = Mask(96, 0, stor[_1365][idx].field_32)
                mem[_1367 + 64] = uint128(stor[_1365][idx].field_128)
                if idx < 0:
                    revert with 0, 17
                if idx >= mem[_612]:
                    revert with 0, 50
                mem[(32 * idx) + _612 + 32] = _1367
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = uint32(sub_b90aa6d2[address(arg1)][arg2].field_128)
            s = 0
            while idx < block.timestamp:
                if idx > !periodTime:
                    revert with 0, 17
                if block.timestamp < idx + periodTime:
                    _1746 = mem[_612]
                    _2062 = mem[_612]
                    t = 0
                    while t < _2062:
                        if _1746 < 1:
                            revert with 0, 17
                        if t == _1746 - 1:
                            _2118 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2118] = 30
                            mem[_2118 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _2134 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2134 + 68] = mem[idx + _2118 + 32]
                                    _2062 = mem[_612]
                                    idx = idx + 32
                                    continue 
                                mem[_2134 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2134 + -mem[64] + 100
                        else:
                            if 1 > !t:
                                revert with 0, 17
                            if t + 1 >= mem[_612]:
                                revert with 0, 50
                            if mem[mem[(32 * t + 1) + _612 + 32] + 28 len 4] <= block.timestamp:
                                if t == -1:
                                    revert with 0, 17
                                _2062 = mem[_612]
                                t = t + 1
                                continue 
                            _2143 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2143] = 30
                            mem[_2143 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _2167 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2167 + 68] = mem[idx + _2143 + 32]
                                    _2062 = mem[_612]
                                    idx = idx + 32
                                    continue 
                                mem[_2167 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2167 + -mem[64] + 100
                        ('le', ('var', 0), 'timestamp')
                        if block.timestamp < idx:
                            revert with 0, 17
                        if not periodTime:
                            revert with 0, 18
                        if t >= mem[_612]:
                            revert with 0, 50
                        if 100 > -mem[mem[(32 * t) + _612 + 32] + 80 len 16] + test266151307():
                            revert with 0, 17
                        if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                            revert with 0, 17
                        if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                            revert with 0, 17
                        if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100):
                            revert with 0, 17
                        if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100) < s:
                            revert with 0, 'SafeMath: addition overflow'
                        _2062 = mem[_612]
                        idx = block.timestamp
                        s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100)
                        continue 
                    _2078 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2078] = 30
                    mem[_2078 + 32] = 'SafeMath: subtraction overflow'
                    if idx > block.timestamp:
                        _2082 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _2082 + 68] = mem[idx + _2078 + 32]
                            idx = idx + 32
                            continue 
                        mem[_2082 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _2082 + -mem[64] + 100
                    if block.timestamp < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if 0 >= mem[_612]:
                        revert with 0, 50
                    if 100 > -mem[mem[_612 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                        revert with 0, 17
                    if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[_612 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = block.timestamp
                    s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _1768 = mem[_612]
                _2063 = mem[_612]
                t = 0
                while t < _2063:
                    if _1768 < 1:
                        revert with 0, 17
                    if t == _1768 - 1:
                        _2121 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2121] = 30
                        mem[_2121 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _2135 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2135 + 68] = mem[idx + _2121 + 32]
                                _2063 = mem[_612]
                                idx = idx + 32
                                continue 
                            mem[_2135 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2135 + -mem[64] + 100
                    else:
                        if 1 > !t:
                            revert with 0, 17
                        if t + 1 >= mem[_612]:
                            revert with 0, 50
                        if mem[mem[(32 * t + 1) + _612 + 32] + 28 len 4] <= idx + periodTime:
                            if t == -1:
                                revert with 0, 17
                            _2063 = mem[_612]
                            t = t + 1
                            continue 
                        _2145 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2145] = 30
                        mem[_2145 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _2169 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2169 + 68] = mem[idx + _2145 + 32]
                                _2063 = mem[_612]
                                idx = idx + 32
                                continue 
                            mem[_2169 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2169 + -mem[64] + 100
                    ('le', ('var', 0), ('add', ('var', 0), ('stor', ('name', 'periodTime', 6))))
                    if idx + periodTime < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if t >= mem[_612]:
                        revert with 0, 50
                    if 100 > -mem[mem[(32 * t) + _612 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                        revert with 0, 17
                    if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    _2063 = mem[_612]
                    idx = idx + periodTime
                    s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _612 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _2079 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2079] = 30
                mem[_2079 + 32] = 'SafeMath: subtraction overflow'
                if idx > idx + periodTime:
                    _2083 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[idx + _2083 + 68] = mem[idx + _2079 + 32]
                        idx = idx + 32
                        continue 
                    mem[_2083 + 98] = 0
                    revert with memory
                      from mem[64]
                       len _2083 + -mem[64] + 100
                if idx + periodTime < idx:
                    revert with 0, 17
                if not periodTime:
                    revert with 0, 18
                if 0 >= mem[_612]:
                    revert with 0, 50
                if 100 > -mem[mem[_612 + 32] + 80 len 16] + test266151307():
                    revert with 0, 17
                if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                    revert with 0, 17
                if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[_612 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                    revert with 0, 17
                if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100):
                    revert with 0, 17
                if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100) < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + periodTime
                s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_612 + 32] + 80 len 16] + 100) / 100)
                continue 
    else:
        if idx < 1:
            revert with 0, 17
        if mem[ceil32(return_data.size) + 352] < idx - 1:
            revert with 0, 17
        if mem[ceil32(return_data.size) + 352] + -idx + 1 > test266151307():
            revert with 0, 65
        _618 = mem[64]
        mem[mem[64]] = mem[ceil32(return_data.size) + 352] + -idx + 1
        mem[64] = mem[64] + (32 * _318 + -idx + 1) + 32
        if not _318 + -idx + 1:
            s = idx - 1
            while s < _318:
                _997 = sha3(mem[156 len 4], 11)
                mem[0] = s
                mem[32] = sha3(mem[156 len 4], 11)
                _999 = mem[64]
                mem[64] = mem[64] + 96
                mem[_999] = uint32(sub_25d3150d[mem[156 len 4]][s].field_0)
                mem[_999 + 32] = Mask(96, 0, stor[_997][s].field_32)
                mem[_999 + 64] = uint128(stor[_997][s].field_128)
                if s < idx - 1:
                    revert with 0, 17
                if s + -idx + 1 >= mem[_618]:
                    revert with 0, 50
                mem[(32 * s + -idx + 1) + _618 + 32] = _999
                if s == -1:
                    revert with 0, 17
                s = s + 1
                continue 
            idx = uint32(sub_b90aa6d2[address(arg1)][arg2].field_128)
            s = 0
            while idx < block.timestamp:
                if idx > !periodTime:
                    revert with 0, 17
                if block.timestamp < idx + periodTime:
                    _1379 = mem[_618]
                    _1728 = mem[_618]
                    t = 0
                    while t < _1728:
                        if _1379 < 1:
                            revert with 0, 17
                        if t == _1379 - 1:
                            _1759 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1759] = 30
                            mem[_1759 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _1775 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1775 + 68] = mem[idx + _1759 + 32]
                                    _1728 = mem[_618]
                                    idx = idx + 32
                                    continue 
                                mem[_1775 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1775 + -mem[64] + 100
                        else:
                            if 1 > !t:
                                revert with 0, 17
                            if t + 1 >= mem[_618]:
                                revert with 0, 50
                            if mem[mem[(32 * t + 1) + _618 + 32] + 28 len 4] <= block.timestamp:
                                if t == -1:
                                    revert with 0, 17
                                _1728 = mem[_618]
                                t = t + 1
                                continue 
                            _1794 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1794] = 30
                            mem[_1794 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _1823 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1823 + 68] = mem[idx + _1794 + 32]
                                    _1728 = mem[_618]
                                    idx = idx + 32
                                    continue 
                                mem[_1823 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1823 + -mem[64] + 100
                        ('le', ('var', 0), 'timestamp')
                        if block.timestamp < idx:
                            revert with 0, 17
                        if not periodTime:
                            revert with 0, 18
                        if t >= mem[_618]:
                            revert with 0, 50
                        if 100 > -mem[mem[(32 * t) + _618 + 32] + 80 len 16] + test266151307():
                            revert with 0, 17
                        if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                            revert with 0, 17
                        if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                            revert with 0, 17
                        if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100):
                            revert with 0, 17
                        if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100) < s:
                            revert with 0, 'SafeMath: addition overflow'
                        _1728 = mem[_618]
                        idx = block.timestamp
                        s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100)
                        continue 
                    _1732 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1732] = 30
                    mem[_1732 + 32] = 'SafeMath: subtraction overflow'
                    if idx > block.timestamp:
                        _1736 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _1736 + 68] = mem[idx + _1732 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1736 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _1736 + -mem[64] + 100
                    if block.timestamp < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if 0 >= mem[_618]:
                        revert with 0, 50
                    if 100 > -mem[mem[_618 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                        revert with 0, 17
                    if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[_618 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = block.timestamp
                    s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _1386 = mem[_618]
                _1729 = mem[_618]
                t = 0
                while t < _1729:
                    if _1386 < 1:
                        revert with 0, 17
                    if t == _1386 - 1:
                        _1762 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1762] = 30
                        mem[_1762 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _1776 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1776 + 68] = mem[idx + _1762 + 32]
                                _1729 = mem[_618]
                                idx = idx + 32
                                continue 
                            mem[_1776 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1776 + -mem[64] + 100
                    else:
                        if 1 > !t:
                            revert with 0, 17
                        if t + 1 >= mem[_618]:
                            revert with 0, 50
                        if mem[mem[(32 * t + 1) + _618 + 32] + 28 len 4] <= idx + periodTime:
                            if t == -1:
                                revert with 0, 17
                            _1729 = mem[_618]
                            t = t + 1
                            continue 
                        _1796 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1796] = 30
                        mem[_1796 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _1825 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1825 + 68] = mem[idx + _1796 + 32]
                                _1729 = mem[_618]
                                idx = idx + 32
                                continue 
                            mem[_1825 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1825 + -mem[64] + 100
                    ('le', ('var', 0), ('add', ('var', 0), ('stor', ('name', 'periodTime', 6))))
                    if idx + periodTime < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if t >= mem[_618]:
                        revert with 0, 50
                    if 100 > -mem[mem[(32 * t) + _618 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                        revert with 0, 17
                    if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    _1729 = mem[_618]
                    idx = idx + periodTime
                    s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _1733 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1733] = 30
                mem[_1733 + 32] = 'SafeMath: subtraction overflow'
                if idx > idx + periodTime:
                    _1737 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[idx + _1737 + 68] = mem[idx + _1733 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1737 + 98] = 0
                    revert with memory
                      from mem[64]
                       len _1737 + -mem[64] + 100
                if idx + periodTime < idx:
                    revert with 0, 17
                if not periodTime:
                    revert with 0, 18
                if 0 >= mem[_618]:
                    revert with 0, 50
                if 100 > -mem[mem[_618 + 32] + 80 len 16] + test266151307():
                    revert with 0, 17
                if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                    revert with 0, 17
                if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[_618 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                    revert with 0, 17
                if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100):
                    revert with 0, 17
                if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100) < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + periodTime
                s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100)
                continue 
        else:
            mem[64] = _618 + (32 * _318 + -idx + 1) + 128
            mem[_618 + (32 * _318 + -idx + 1) + 32] = 0
            mem[_618 + (32 * _318 + -idx + 1) + 64] = 0
            mem[_618 + (32 * _318 + -idx + 1) + 96] = 0
            mem[_618 + 32] = _618 + (32 * _318 + -idx + 1) + 32
            t = _618 + 32
            s = _318 + -idx + 1
            while s - 1:
                mem[64] = mem[64] + 96
                mem[_618 + (32 * _318 + -idx + 1) + 32] = 0
                mem[_618 + (32 * _318 + -idx + 1) + 64] = 0
                mem[_618 + (32 * _318 + -idx + 1) + 96] = 0
                mem[t + 32] = _618 + (32 * _318 + -idx + 1) + 32
                t = t + 32
                s = s - 1
                continue 
            s = idx - 1
            while s < _318:
                _1369 = sha3(mem[156 len 4], 11)
                mem[0] = s
                mem[32] = sha3(mem[156 len 4], 11)
                _1371 = mem[64]
                mem[64] = mem[64] + 96
                mem[_1371] = uint32(sub_25d3150d[mem[156 len 4]][s].field_0)
                mem[_1371 + 32] = Mask(96, 0, stor[_1369][s].field_32)
                mem[_1371 + 64] = uint128(stor[_1369][s].field_128)
                if s < idx - 1:
                    revert with 0, 17
                if s + -idx + 1 >= mem[_618]:
                    revert with 0, 50
                mem[(32 * s + -idx + 1) + _618 + 32] = _1371
                if s == -1:
                    revert with 0, 17
                s = s + 1
                continue 
            idx = uint32(sub_b90aa6d2[address(arg1)][arg2].field_128)
            s = 0
            while idx < block.timestamp:
                if idx > !periodTime:
                    revert with 0, 17
                if block.timestamp < idx + periodTime:
                    _1751 = mem[_618]
                    _2064 = mem[_618]
                    t = 0
                    while t < _2064:
                        if _1751 < 1:
                            revert with 0, 17
                        if t == _1751 - 1:
                            _2124 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2124] = 30
                            mem[_2124 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _2136 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2136 + 68] = mem[idx + _2124 + 32]
                                    _2064 = mem[_618]
                                    idx = idx + 32
                                    continue 
                                mem[_2136 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2136 + -mem[64] + 100
                        else:
                            if 1 > !t:
                                revert with 0, 17
                            if t + 1 >= mem[_618]:
                                revert with 0, 50
                            if mem[mem[(32 * t + 1) + _618 + 32] + 28 len 4] <= block.timestamp:
                                if t == -1:
                                    revert with 0, 17
                                _2064 = mem[_618]
                                t = t + 1
                                continue 
                            _2147 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2147] = 30
                            mem[_2147 + 32] = 'SafeMath: subtraction overflow'
                            if idx > block.timestamp:
                                _2171 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2171 + 68] = mem[idx + _2147 + 32]
                                    _2064 = mem[_618]
                                    idx = idx + 32
                                    continue 
                                mem[_2171 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2171 + -mem[64] + 100
                        ('le', ('var', 0), 'timestamp')
                        if block.timestamp < idx:
                            revert with 0, 17
                        if not periodTime:
                            revert with 0, 18
                        if t >= mem[_618]:
                            revert with 0, 50
                        if 100 > -mem[mem[(32 * t) + _618 + 32] + 80 len 16] + test266151307():
                            revert with 0, 17
                        if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                            revert with 0, 17
                        if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                            revert with 0, 17
                        if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100):
                            revert with 0, 17
                        if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100) < s:
                            revert with 0, 'SafeMath: addition overflow'
                        _2064 = mem[_618]
                        idx = block.timestamp
                        s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100)
                        continue 
                    _2080 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2080] = 30
                    mem[_2080 + 32] = 'SafeMath: subtraction overflow'
                    if idx > block.timestamp:
                        _2084 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _2084 + 68] = mem[idx + _2080 + 32]
                            idx = idx + 32
                            continue 
                        mem[_2084 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _2084 + -mem[64] + 100
                    if block.timestamp < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if 0 >= mem[_618]:
                        revert with 0, 50
                    if 100 > -mem[mem[_618 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if block.timestamp - idx / periodTime and mem[276 len 12] > -1 / block.timestamp - idx / periodTime:
                        revert with 0, 17
                    if block.timestamp - idx / periodTime * mem[276 len 12] and uint128(mem[mem[_618 + 32] + 80 len 16] + 100) > -1 / block.timestamp - idx / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = block.timestamp
                    s = s + (block.timestamp - idx / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _1771 = mem[_618]
                _2065 = mem[_618]
                t = 0
                while t < _2065:
                    if _1771 < 1:
                        revert with 0, 17
                    if t == _1771 - 1:
                        _2127 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2127] = 30
                        mem[_2127 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _2137 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2137 + 68] = mem[idx + _2127 + 32]
                                _2065 = mem[_618]
                                idx = idx + 32
                                continue 
                            mem[_2137 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2137 + -mem[64] + 100
                    else:
                        if 1 > !t:
                            revert with 0, 17
                        if t + 1 >= mem[_618]:
                            revert with 0, 50
                        if mem[mem[(32 * t + 1) + _618 + 32] + 28 len 4] <= idx + periodTime:
                            if t == -1:
                                revert with 0, 17
                            _2065 = mem[_618]
                            t = t + 1
                            continue 
                        _2149 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2149] = 30
                        mem[_2149 + 32] = 'SafeMath: subtraction overflow'
                        if idx > idx + periodTime:
                            _2173 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2173 + 68] = mem[idx + _2149 + 32]
                                _2065 = mem[_618]
                                idx = idx + 32
                                continue 
                            mem[_2173 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2173 + -mem[64] + 100
                    ('le', ('var', 0), ('add', ('var', 0), ('stor', ('name', 'periodTime', 6))))
                    if idx + periodTime < idx:
                        revert with 0, 17
                    if not periodTime:
                        revert with 0, 18
                    if t >= mem[_618]:
                        revert with 0, 50
                    if 100 > -mem[mem[(32 * t) + _618 + 32] + 80 len 16] + test266151307():
                        revert with 0, 17
                    if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                        revert with 0, 17
                    if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                        revert with 0, 17
                    if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100):
                        revert with 0, 17
                    if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100) < s:
                        revert with 0, 'SafeMath: addition overflow'
                    _2065 = mem[_618]
                    idx = idx + periodTime
                    s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[(32 * t) + _618 + 32] + 80 len 16] + 100) / 100)
                    continue 
                _2081 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2081] = 30
                mem[_2081 + 32] = 'SafeMath: subtraction overflow'
                if idx > idx + periodTime:
                    _2085 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[idx + _2085 + 68] = mem[idx + _2081 + 32]
                        idx = idx + 32
                        continue 
                    mem[_2085 + 98] = 0
                    revert with memory
                      from mem[64]
                       len _2085 + -mem[64] + 100
                if idx + periodTime < idx:
                    revert with 0, 17
                if not periodTime:
                    revert with 0, 18
                if 0 >= mem[_618]:
                    revert with 0, 50
                if 100 > -mem[mem[_618 + 32] + 80 len 16] + test266151307():
                    revert with 0, 17
                if periodTime / periodTime and mem[276 len 12] > -1 / periodTime / periodTime:
                    revert with 0, 17
                if periodTime / periodTime * mem[276 len 12] and uint128(mem[mem[_618 + 32] + 80 len 16] + 100) > -1 / periodTime / periodTime * mem[276 len 12]:
                    revert with 0, 17
                if s > !(periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100):
                    revert with 0, 17
                if s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100) < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + periodTime
                s = s + (periodTime / periodTime * mem[276 len 12] * uint128(mem[mem[_618 + 32] + 80 len 16] + 100) / 100)
                continue 
    if s and sub_708f8646 > -1 / s:
        revert with 0, 17
    if sub_b9a1ffe7[address(arg1)][arg2] > !(s * sub_708f8646 / 10^18):
        revert with 0, 17
    if sub_b9a1ffe7[address(arg1)][arg2] + (s * sub_708f8646 / 10^18) < sub_b9a1ffe7[address(arg1)][arg2]:
        revert with 0, 'SafeMath: addition overflow'
    return (sub_b9a1ffe7[address(arg1)][arg2] + (s * sub_708f8646 / 10^18))
}

function sub_769020ff(?) {
    require ext_code.size(0x8fbe8d8e4723dea859610467c8eff84eaab6c6)
    staticcall 0x8fbe8d8e4723dea859610467c8eff84eaab6c6.0x18160ddd with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > test266151307():
        revert with 0, 65
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.return_data[0]:
        if ext_call.return_data[0] > test266151307():
            revert with 0, 65
        mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128] = ext_call.return_data[0]
        if not ext_call.return_data[0]:
            if ext_call.return_data[0] > test266151307():
                revert with 0, 65
            mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160] = ext_call.return_data[0]
            if not ext_call.return_data[0]:
                if ext_call.return_data[0] > test266151307():
                    revert with 0, 65
                mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
                mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < ext_call.return_data[0]:
                        mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = idx
                        _2103 = mem[0]
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                                gas gas_remaining wei
                               args idx
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _2182 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2182]
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        _2279 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _2279
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                                gas gas_remaining wei
                               args _2279
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _2390 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _2422 = mem[_2390]
                        require mem[_2390] <= test266151307()
                        require _2390 + return_data.size > _2390 + mem[_2390] + 31
                        _2454 = mem[_2390 + mem[_2390]]
                        if mem[_2390 + mem[_2390]] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[_2390 + mem[_2390]])) + 1 < 0 or _2390 + ceil32(return_data.size) + ceil32(ceil32(mem[_2390 + mem[_2390]])) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _2390 + ceil32(return_data.size) + ceil32(ceil32(mem[_2390 + mem[_2390]])) + 1
                        mem[_2390 + ceil32(return_data.size)] = _2454
                        require _2422 + _2454 + 32 <= return_data.size
                        s = 0
                        while s < _2454:
                            mem[s + _2390 + ceil32(return_data.size) + 32] = mem[s + _2390 + _2422 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_2454) <= _2454:
                            if idx >= mem[ceil32(return_data.size) + 96]:
                                revert with 0, 50
                            if not _2454:
                                mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                            else:
                                _4343 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = _4343
                                mem[0] = _2103
                                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                        gas gas_remaining wei
                                       args _4343
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _4534 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _4582 = mem[_4534]
                                require mem[_4534] <= test266151307()
                                require _4534 + return_data.size > _4534 + mem[_4534] + 31
                                _4630 = mem[_4534 + mem[_4534]]
                                if mem[_4534 + mem[_4534]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_4534 + mem[_4534]]) + 1 < 0 or _4534 + ceil32(return_data.size) + ceil32(32 * mem[_4534 + mem[_4534]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _4534 + ceil32(return_data.size) + ceil32(32 * mem[_4534 + mem[_4534]]) + 1
                                mem[_4534 + ceil32(return_data.size)] = _4630
                                require _4582 + (32 * _4630) + 32 <= return_data.size
                                t = _4534 + _4582 + 32
                                u = _4534 + ceil32(return_data.size) + 32
                                s = 0
                                while s < _4630:
                                    mem[u] = mem[t]
                                    t = t + 32
                                    u = u + 32
                                    s = s + 1
                                    continue 
                                if 0 >= _4630:
                                    revert with 0, 50
                                if 0 >= _4630:
                                    revert with 0, 50
                                if 0 >= _4630:
                                    revert with 0, 50
                                if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                    revert with 0, 50
                                if mem[_4534 + ceil32(return_data.size) + 32] != 0:
                                    if mem[_4534 + ceil32(return_data.size) + 32] != 1:
                                        if mem[_4534 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                    else:
                                        if mem[_4534 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4534 + ceil32(return_data.size) + 32] != 1:
                                        if mem[_4534 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                    else:
                                        if mem[_4534 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            mem[_2454 + _2390 + ceil32(return_data.size) + 32] = 0
                            if idx >= mem[ceil32(return_data.size) + 96]:
                                revert with 0, 50
                            if not _2454:
                                mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                            else:
                                _4344 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = _4344
                                mem[0] = _2103
                                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                        gas gas_remaining wei
                                       args _4344
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _4535 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _4583 = mem[_4535]
                                require mem[_4535] <= test266151307()
                                require _4535 + return_data.size > _4535 + mem[_4535] + 31
                                _4631 = mem[_4535 + mem[_4535]]
                                if mem[_4535 + mem[_4535]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_4535 + mem[_4535]]) + 1 < 0 or _4535 + ceil32(return_data.size) + ceil32(32 * mem[_4535 + mem[_4535]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _4535 + ceil32(return_data.size) + ceil32(32 * mem[_4535 + mem[_4535]]) + 1
                                mem[_4535 + ceil32(return_data.size)] = _4631
                                require _4583 + (32 * _4631) + 32 <= return_data.size
                                t = _4535 + _4583 + 32
                                u = _4535 + ceil32(return_data.size) + 32
                                s = 0
                                while s < _4631:
                                    mem[u] = mem[t]
                                    t = t + 32
                                    u = u + 32
                                    s = s + 1
                                    continue 
                                if 0 >= _4631:
                                    revert with 0, 50
                                if 0 >= _4631:
                                    revert with 0, 50
                                if 0 >= _4631:
                                    revert with 0, 50
                                if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                    revert with 0, 50
                                if mem[_4535 + ceil32(return_data.size) + 32] != 0:
                                    if mem[_4535 + ceil32(return_data.size) + 32] != 1:
                                        if mem[_4535 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                    else:
                                        if mem[_4535 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4535 + ceil32(return_data.size) + 32] != 1:
                                        if mem[_4535 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                    else:
                                        if mem[_4535 + ceil32(return_data.size) + 32] != 2:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                        else:
                                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                                revert with 0, 50
                                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _2198 = mem[ceil32(return_data.size) + 96]
                    mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
                    mem[mem[64] + 160 len 32 * _2198] = mem[ceil32(return_data.size) + 128 len 32 * _2198]
                    mem[mem[64] + 32] = (32 * _2198) + 160
                    _4214 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                    mem[mem[64] + (32 * _2198) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                    mem[mem[64] + (32 * _2198) + 192 len 32 * _4214] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4214]
                    mem[mem[64] + 64] = (32 * _2198) + (32 * _4214) + 192
                    _6038 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                    mem[mem[64] + (32 * _2198) + (32 * _4214) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                    mem[mem[64] + (32 * _2198) + (32 * _4214) + 224 len 32 * _6038] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6038]
                    mem[mem[64] + 96] = (32 * _2198) + (32 * _4214) + (32 * _6038) + 224
                    _7318 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                    mem[mem[64] + (32 * _2198) + (32 * _4214) + (32 * _6038) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                    mem[mem[64] + (32 * _2198) + (32 * _4214) + (32 * _6038) + 256 len 32 * _7318] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7318]
                    return 128, 
                           (32 * _2198) + 160,
                           (32 * _2198) + (32 * _4214) + 192,
                           (32 * _2198) + (32 * _4214) + (32 * _6038) + 224,
                           mem[mem[64] + 128 len (32 * _2198) + (32 * _4214) + (32 * _6038) + (32 * _7318) + 128]
                mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
                idx = 0
                while idx < ext_call.return_data[0]:
                    mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = idx
                    _2107 = mem[0]
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                            gas gas_remaining wei
                           args idx
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2183 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2183]
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    _2281 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _2281
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                            gas gas_remaining wei
                           args _2281
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2391 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _2423 = mem[_2391]
                    require mem[_2391] <= test266151307()
                    require _2391 + return_data.size > _2391 + mem[_2391] + 31
                    _2455 = mem[_2391 + mem[_2391]]
                    if mem[_2391 + mem[_2391]] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[_2391 + mem[_2391]])) + 1 < 0 or _2391 + ceil32(return_data.size) + ceil32(ceil32(mem[_2391 + mem[_2391]])) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _2391 + ceil32(return_data.size) + ceil32(ceil32(mem[_2391 + mem[_2391]])) + 1
                    mem[_2391 + ceil32(return_data.size)] = _2455
                    require _2423 + _2455 + 32 <= return_data.size
                    s = 0
                    while s < _2455:
                        mem[s + _2391 + ceil32(return_data.size) + 32] = mem[s + _2391 + _2423 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_2455) <= _2455:
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2455:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4346 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4346
                            mem[0] = _2107
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4346
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4536 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4584 = mem[_4536]
                            require mem[_4536] <= test266151307()
                            require _4536 + return_data.size > _4536 + mem[_4536] + 31
                            _4632 = mem[_4536 + mem[_4536]]
                            if mem[_4536 + mem[_4536]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4536 + mem[_4536]]) + 1 < 0 or _4536 + ceil32(return_data.size) + ceil32(32 * mem[_4536 + mem[_4536]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4536 + ceil32(return_data.size) + ceil32(32 * mem[_4536 + mem[_4536]]) + 1
                            mem[_4536 + ceil32(return_data.size)] = _4632
                            require _4584 + (32 * _4632) + 32 <= return_data.size
                            t = _4536 + _4584 + 32
                            u = _4536 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4632:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4632:
                                revert with 0, 50
                            if 0 >= _4632:
                                revert with 0, 50
                            if 0 >= _4632:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4536 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4536 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4536 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4536 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4536 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4536 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4536 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        mem[_2455 + _2391 + ceil32(return_data.size) + 32] = 0
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2455:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4347 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4347
                            mem[0] = _2107
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4347
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4537 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4585 = mem[_4537]
                            require mem[_4537] <= test266151307()
                            require _4537 + return_data.size > _4537 + mem[_4537] + 31
                            _4633 = mem[_4537 + mem[_4537]]
                            if mem[_4537 + mem[_4537]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4537 + mem[_4537]]) + 1 < 0 or _4537 + ceil32(return_data.size) + ceil32(32 * mem[_4537 + mem[_4537]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4537 + ceil32(return_data.size) + ceil32(32 * mem[_4537 + mem[_4537]]) + 1
                            mem[_4537 + ceil32(return_data.size)] = _4633
                            require _4585 + (32 * _4633) + 32 <= return_data.size
                            t = _4537 + _4585 + 32
                            u = _4537 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4633:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4633:
                                revert with 0, 50
                            if 0 >= _4633:
                                revert with 0, 50
                            if 0 >= _4633:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4537 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4537 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4537 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4537 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4537 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4537 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4537 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _2167 = mem[64]
                mem[mem[64]] = 128
                _2199 = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 160 len 32 * _2199] = mem[ceil32(return_data.size) + 128 len 32 * _2199]
                mem[mem[64] + 32] = (32 * _2199) + 160
                _4215 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2199) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2199) + 192 len 32 * _4215] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4215]
                mem[mem[64] + 64] = (32 * _2199) + (32 * _4215) + 192
                _6041 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[_2167 + (32 * _2199) + (32 * _4215) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[_2167 + (32 * _2199) + (32 * _4215) + 224 len 32 * _6041] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6041]
                mem[_2167 + 96] = (32 * _2199) + (32 * _4215) + (32 * _6041) + 224
                _7319 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[_2167 + (32 * _2199) + (32 * _4215) + (32 * _6041) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[_2167 + (32 * _2199) + (32 * _4215) + (32 * _6041) + 256 len 32 * _7319] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7319]
                return memory
                  from mem[64]
                   len _2167 + (32 * _2199) + (32 * _4215) + (32 * _6041) + (32 * _7319) + -mem[64] + 256
            mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
            if ext_call.return_data[0] > test266151307():
                revert with 0, 65
            mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
            mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
            if not ext_call.return_data[0]:
                idx = 0
                while idx < ext_call.return_data[0]:
                    mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = idx
                    _2111 = mem[0]
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                            gas gas_remaining wei
                           args idx
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2184 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2184]
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    _2283 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _2283
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                            gas gas_remaining wei
                           args _2283
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2392 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _2424 = mem[_2392]
                    require mem[_2392] <= test266151307()
                    require _2392 + return_data.size > _2392 + mem[_2392] + 31
                    _2456 = mem[_2392 + mem[_2392]]
                    if mem[_2392 + mem[_2392]] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[_2392 + mem[_2392]])) + 1 < 0 or _2392 + ceil32(return_data.size) + ceil32(ceil32(mem[_2392 + mem[_2392]])) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _2392 + ceil32(return_data.size) + ceil32(ceil32(mem[_2392 + mem[_2392]])) + 1
                    mem[_2392 + ceil32(return_data.size)] = _2456
                    require _2424 + _2456 + 32 <= return_data.size
                    s = 0
                    while s < _2456:
                        mem[s + _2392 + ceil32(return_data.size) + 32] = mem[s + _2392 + _2424 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_2456) <= _2456:
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2456:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4349 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4349
                            mem[0] = _2111
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4349
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4538 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4586 = mem[_4538]
                            require mem[_4538] <= test266151307()
                            require _4538 + return_data.size > _4538 + mem[_4538] + 31
                            _4634 = mem[_4538 + mem[_4538]]
                            if mem[_4538 + mem[_4538]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4538 + mem[_4538]]) + 1 < 0 or _4538 + ceil32(return_data.size) + ceil32(32 * mem[_4538 + mem[_4538]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4538 + ceil32(return_data.size) + ceil32(32 * mem[_4538 + mem[_4538]]) + 1
                            mem[_4538 + ceil32(return_data.size)] = _4634
                            require _4586 + (32 * _4634) + 32 <= return_data.size
                            t = _4538 + _4586 + 32
                            u = _4538 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4634:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4634:
                                revert with 0, 50
                            if 0 >= _4634:
                                revert with 0, 50
                            if 0 >= _4634:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4538 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4538 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4538 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4538 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4538 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4538 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4538 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        mem[_2456 + _2392 + ceil32(return_data.size) + 32] = 0
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2456:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4350 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4350
                            mem[0] = _2111
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4350
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4539 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4587 = mem[_4539]
                            require mem[_4539] <= test266151307()
                            require _4539 + return_data.size > _4539 + mem[_4539] + 31
                            _4635 = mem[_4539 + mem[_4539]]
                            if mem[_4539 + mem[_4539]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4539 + mem[_4539]]) + 1 < 0 or _4539 + ceil32(return_data.size) + ceil32(32 * mem[_4539 + mem[_4539]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4539 + ceil32(return_data.size) + ceil32(32 * mem[_4539 + mem[_4539]]) + 1
                            mem[_4539 + ceil32(return_data.size)] = _4635
                            require _4587 + (32 * _4635) + 32 <= return_data.size
                            t = _4539 + _4587 + 32
                            u = _4539 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4635:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4635:
                                revert with 0, 50
                            if 0 >= _4635:
                                revert with 0, 50
                            if 0 >= _4635:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4539 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4539 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4539 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4539 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4539 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4539 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4539 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 128
                _2200 = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 160 len 32 * _2200] = mem[ceil32(return_data.size) + 128 len 32 * _2200]
                mem[mem[64] + 32] = (32 * _2200) + 160
                _4216 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2200) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2200) + 192 len 32 * _4216] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4216]
                mem[mem[64] + 64] = (32 * _2200) + (32 * _4216) + 192
                _6044 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[mem[64] + (32 * _2200) + (32 * _4216) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[mem[64] + (32 * _2200) + (32 * _4216) + 224 len 32 * _6044] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6044]
                mem[mem[64] + 96] = (32 * _2200) + (32 * _4216) + (32 * _6044) + 224
                _7320 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[mem[64] + (32 * _2200) + (32 * _4216) + (32 * _6044) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[mem[64] + (32 * _2200) + (32 * _4216) + (32 * _6044) + 256 len 32 * _7320] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7320]
                return 128, 
                       (32 * _2200) + 160,
                       (32 * _2200) + (32 * _4216) + 192,
                       (32 * _2200) + (32 * _4216) + (32 * _6044) + 224,
                       mem[mem[64] + 128 len (32 * _2200) + (32 * _4216) + (32 * _6044) + (32 * _7320) + 128]
            mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
            idx = 0
            while idx < ext_call.return_data[0]:
                mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = idx
                _2115 = mem[0]
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                        gas gas_remaining wei
                       args idx
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2185 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2185]
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                _2285 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2285
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                        gas gas_remaining wei
                       args _2285
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2393 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2425 = mem[_2393]
                require mem[_2393] <= test266151307()
                require _2393 + return_data.size > _2393 + mem[_2393] + 31
                _2457 = mem[_2393 + mem[_2393]]
                if mem[_2393 + mem[_2393]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_2393 + mem[_2393]])) + 1 < 0 or _2393 + ceil32(return_data.size) + ceil32(ceil32(mem[_2393 + mem[_2393]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2393 + ceil32(return_data.size) + ceil32(ceil32(mem[_2393 + mem[_2393]])) + 1
                mem[_2393 + ceil32(return_data.size)] = _2457
                require _2425 + _2457 + 32 <= return_data.size
                s = 0
                while s < _2457:
                    mem[s + _2393 + ceil32(return_data.size) + 32] = mem[s + _2393 + _2425 + 32]
                    s = s + 32
                    continue 
                if ceil32(_2457) <= _2457:
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2457:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4352 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4352
                        mem[0] = _2115
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4352
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4540 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4588 = mem[_4540]
                        require mem[_4540] <= test266151307()
                        require _4540 + return_data.size > _4540 + mem[_4540] + 31
                        _4636 = mem[_4540 + mem[_4540]]
                        if mem[_4540 + mem[_4540]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4540 + mem[_4540]]) + 1 < 0 or _4540 + ceil32(return_data.size) + ceil32(32 * mem[_4540 + mem[_4540]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4540 + ceil32(return_data.size) + ceil32(32 * mem[_4540 + mem[_4540]]) + 1
                        mem[_4540 + ceil32(return_data.size)] = _4636
                        require _4588 + (32 * _4636) + 32 <= return_data.size
                        t = _4540 + _4588 + 32
                        u = _4540 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4636:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4636:
                            revert with 0, 50
                        if 0 >= _4636:
                            revert with 0, 50
                        if 0 >= _4636:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4540 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4540 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4540 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4540 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4540 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4540 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4540 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    mem[_2457 + _2393 + ceil32(return_data.size) + 32] = 0
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2457:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4353 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4353
                        mem[0] = _2115
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4353
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4541 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4589 = mem[_4541]
                        require mem[_4541] <= test266151307()
                        require _4541 + return_data.size > _4541 + mem[_4541] + 31
                        _4637 = mem[_4541 + mem[_4541]]
                        if mem[_4541 + mem[_4541]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4541 + mem[_4541]]) + 1 < 0 or _4541 + ceil32(return_data.size) + ceil32(32 * mem[_4541 + mem[_4541]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4541 + ceil32(return_data.size) + ceil32(32 * mem[_4541 + mem[_4541]]) + 1
                        mem[_4541 + ceil32(return_data.size)] = _4637
                        require _4589 + (32 * _4637) + 32 <= return_data.size
                        t = _4541 + _4589 + 32
                        u = _4541 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4637:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4637:
                            revert with 0, 50
                        if 0 >= _4637:
                            revert with 0, 50
                        if 0 >= _4637:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4541 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4541 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4541 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4541 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4541 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4541 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4541 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _2169 = mem[64]
            mem[mem[64]] = 128
            _2201 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 160 len 32 * _2201] = mem[ceil32(return_data.size) + 128 len 32 * _2201]
            mem[mem[64] + 32] = (32 * _2201) + 160
            _4217 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2201) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2201) + 192 len 32 * _4217] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4217]
            mem[mem[64] + 64] = (32 * _2201) + (32 * _4217) + 192
            _6047 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2169 + (32 * _2201) + (32 * _4217) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2169 + (32 * _2201) + (32 * _4217) + 224 len 32 * _6047] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6047]
            mem[_2169 + 96] = (32 * _2201) + (32 * _4217) + (32 * _6047) + 224
            _7321 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2169 + (32 * _2201) + (32 * _4217) + (32 * _6047) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2169 + (32 * _2201) + (32 * _4217) + (32 * _6047) + 256 len 32 * _7321] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7321]
            return memory
              from mem[64]
               len _2169 + (32 * _2201) + (32 * _4217) + (32 * _6047) + (32 * _7321) + -mem[64] + 256
        mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
        if ext_call.return_data[0] > test266151307():
            revert with 0, 65
        mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160] = ext_call.return_data[0]
        if not ext_call.return_data[0]:
            if ext_call.return_data[0] > test266151307():
                revert with 0, 65
            mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
            mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
            if not ext_call.return_data[0]:
                idx = 0
                while idx < ext_call.return_data[0]:
                    mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = idx
                    _2119 = mem[0]
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                            gas gas_remaining wei
                           args idx
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2186 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2186]
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    _2287 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _2287
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                            gas gas_remaining wei
                           args _2287
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2394 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _2426 = mem[_2394]
                    require mem[_2394] <= test266151307()
                    require _2394 + return_data.size > _2394 + mem[_2394] + 31
                    _2458 = mem[_2394 + mem[_2394]]
                    if mem[_2394 + mem[_2394]] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[_2394 + mem[_2394]])) + 1 < 0 or _2394 + ceil32(return_data.size) + ceil32(ceil32(mem[_2394 + mem[_2394]])) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _2394 + ceil32(return_data.size) + ceil32(ceil32(mem[_2394 + mem[_2394]])) + 1
                    mem[_2394 + ceil32(return_data.size)] = _2458
                    require _2426 + _2458 + 32 <= return_data.size
                    s = 0
                    while s < _2458:
                        mem[s + _2394 + ceil32(return_data.size) + 32] = mem[s + _2394 + _2426 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_2458) <= _2458:
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2458:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4355 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4355
                            mem[0] = _2119
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4355
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4542 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4590 = mem[_4542]
                            require mem[_4542] <= test266151307()
                            require _4542 + return_data.size > _4542 + mem[_4542] + 31
                            _4638 = mem[_4542 + mem[_4542]]
                            if mem[_4542 + mem[_4542]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4542 + mem[_4542]]) + 1 < 0 or _4542 + ceil32(return_data.size) + ceil32(32 * mem[_4542 + mem[_4542]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4542 + ceil32(return_data.size) + ceil32(32 * mem[_4542 + mem[_4542]]) + 1
                            mem[_4542 + ceil32(return_data.size)] = _4638
                            require _4590 + (32 * _4638) + 32 <= return_data.size
                            t = _4542 + _4590 + 32
                            u = _4542 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4638:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4638:
                                revert with 0, 50
                            if 0 >= _4638:
                                revert with 0, 50
                            if 0 >= _4638:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4542 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4542 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4542 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4542 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4542 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4542 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4542 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        mem[_2458 + _2394 + ceil32(return_data.size) + 32] = 0
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2458:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4356 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4356
                            mem[0] = _2119
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4356
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4543 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4591 = mem[_4543]
                            require mem[_4543] <= test266151307()
                            require _4543 + return_data.size > _4543 + mem[_4543] + 31
                            _4639 = mem[_4543 + mem[_4543]]
                            if mem[_4543 + mem[_4543]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4543 + mem[_4543]]) + 1 < 0 or _4543 + ceil32(return_data.size) + ceil32(32 * mem[_4543 + mem[_4543]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4543 + ceil32(return_data.size) + ceil32(32 * mem[_4543 + mem[_4543]]) + 1
                            mem[_4543 + ceil32(return_data.size)] = _4639
                            require _4591 + (32 * _4639) + 32 <= return_data.size
                            t = _4543 + _4591 + 32
                            u = _4543 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4639:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4639:
                                revert with 0, 50
                            if 0 >= _4639:
                                revert with 0, 50
                            if 0 >= _4639:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4543 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4543 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4543 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4543 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4543 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4543 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4543 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _2170 = mem[64]
                mem[mem[64]] = 128
                _2202 = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 160 len 32 * _2202] = mem[ceil32(return_data.size) + 128 len 32 * _2202]
                mem[mem[64] + 32] = (32 * _2202) + 160
                _4218 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2202) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2202) + 192 len 32 * _4218] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4218]
                mem[mem[64] + 64] = (32 * _2202) + (32 * _4218) + 192
                _6050 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[_2170 + (32 * _2202) + (32 * _4218) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[_2170 + (32 * _2202) + (32 * _4218) + 224 len 32 * _6050] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6050]
                mem[_2170 + 96] = (32 * _2202) + (32 * _4218) + (32 * _6050) + 224
                _7322 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[_2170 + (32 * _2202) + (32 * _4218) + (32 * _6050) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[_2170 + (32 * _2202) + (32 * _4218) + (32 * _6050) + 256 len 32 * _7322] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7322]
                return memory
                  from mem[64]
                   len _2170 + (32 * _2202) + (32 * _4218) + (32 * _6050) + (32 * _7322) + -mem[64] + 256
            mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
            idx = 0
            while idx < ext_call.return_data[0]:
                mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = idx
                _2123 = mem[0]
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                        gas gas_remaining wei
                       args idx
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2187 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2187]
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                _2289 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2289
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                        gas gas_remaining wei
                       args _2289
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2395 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2427 = mem[_2395]
                require mem[_2395] <= test266151307()
                require _2395 + return_data.size > _2395 + mem[_2395] + 31
                _2459 = mem[_2395 + mem[_2395]]
                if mem[_2395 + mem[_2395]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_2395 + mem[_2395]])) + 1 < 0 or _2395 + ceil32(return_data.size) + ceil32(ceil32(mem[_2395 + mem[_2395]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2395 + ceil32(return_data.size) + ceil32(ceil32(mem[_2395 + mem[_2395]])) + 1
                mem[_2395 + ceil32(return_data.size)] = _2459
                require _2427 + _2459 + 32 <= return_data.size
                s = 0
                while s < _2459:
                    mem[s + _2395 + ceil32(return_data.size) + 32] = mem[s + _2395 + _2427 + 32]
                    s = s + 32
                    continue 
                if ceil32(_2459) <= _2459:
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2459:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4358 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4358
                        mem[0] = _2123
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4358
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4544 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4592 = mem[_4544]
                        require mem[_4544] <= test266151307()
                        require _4544 + return_data.size > _4544 + mem[_4544] + 31
                        _4640 = mem[_4544 + mem[_4544]]
                        if mem[_4544 + mem[_4544]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4544 + mem[_4544]]) + 1 < 0 or _4544 + ceil32(return_data.size) + ceil32(32 * mem[_4544 + mem[_4544]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4544 + ceil32(return_data.size) + ceil32(32 * mem[_4544 + mem[_4544]]) + 1
                        mem[_4544 + ceil32(return_data.size)] = _4640
                        require _4592 + (32 * _4640) + 32 <= return_data.size
                        t = _4544 + _4592 + 32
                        u = _4544 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4640:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4640:
                            revert with 0, 50
                        if 0 >= _4640:
                            revert with 0, 50
                        if 0 >= _4640:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4544 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4544 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4544 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4544 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4544 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4544 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4544 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    mem[_2459 + _2395 + ceil32(return_data.size) + 32] = 0
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2459:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4359 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4359
                        mem[0] = _2123
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4359
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4545 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4593 = mem[_4545]
                        require mem[_4545] <= test266151307()
                        require _4545 + return_data.size > _4545 + mem[_4545] + 31
                        _4641 = mem[_4545 + mem[_4545]]
                        if mem[_4545 + mem[_4545]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4545 + mem[_4545]]) + 1 < 0 or _4545 + ceil32(return_data.size) + ceil32(32 * mem[_4545 + mem[_4545]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4545 + ceil32(return_data.size) + ceil32(32 * mem[_4545 + mem[_4545]]) + 1
                        mem[_4545 + ceil32(return_data.size)] = _4641
                        require _4593 + (32 * _4641) + 32 <= return_data.size
                        t = _4545 + _4593 + 32
                        u = _4545 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4641:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4641:
                            revert with 0, 50
                        if 0 >= _4641:
                            revert with 0, 50
                        if 0 >= _4641:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4545 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4545 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4545 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4545 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4545 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4545 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4545 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _2203 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 160 len 32 * _2203] = mem[ceil32(return_data.size) + 128 len 32 * _2203]
            mem[mem[64] + 32] = (32 * _2203) + 160
            _4219 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2203) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2203) + 192 len 32 * _4219] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4219]
            mem[mem[64] + 64] = (32 * _2203) + (32 * _4219) + 192
            _6053 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[mem[64] + (32 * _2203) + (32 * _4219) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[mem[64] + (32 * _2203) + (32 * _4219) + 224 len 32 * _6053] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6053]
            mem[mem[64] + 96] = (32 * _2203) + (32 * _4219) + (32 * _6053) + 224
            _7323 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[mem[64] + (32 * _2203) + (32 * _4219) + (32 * _6053) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[mem[64] + (32 * _2203) + (32 * _4219) + (32 * _6053) + 256 len 32 * _7323] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7323]
            return 128, 
                   (32 * _2203) + 160,
                   (32 * _2203) + (32 * _4219) + 192,
                   (32 * _2203) + (32 * _4219) + (32 * _6053) + 224,
                   mem[mem[64] + 128 len (32 * _2203) + (32 * _4219) + (32 * _6053) + (32 * _7323) + 128]
        mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
        if ext_call.return_data[0] > test266151307():
            revert with 0, 65
        mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
        mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
        if not ext_call.return_data[0]:
            idx = 0
            while idx < ext_call.return_data[0]:
                mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = idx
                _2127 = mem[0]
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                        gas gas_remaining wei
                       args idx
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2188 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2188]
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                _2291 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2291
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                        gas gas_remaining wei
                       args _2291
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2396 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2428 = mem[_2396]
                require mem[_2396] <= test266151307()
                require _2396 + return_data.size > _2396 + mem[_2396] + 31
                _2460 = mem[_2396 + mem[_2396]]
                if mem[_2396 + mem[_2396]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_2396 + mem[_2396]])) + 1 < 0 or _2396 + ceil32(return_data.size) + ceil32(ceil32(mem[_2396 + mem[_2396]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2396 + ceil32(return_data.size) + ceil32(ceil32(mem[_2396 + mem[_2396]])) + 1
                mem[_2396 + ceil32(return_data.size)] = _2460
                require _2428 + _2460 + 32 <= return_data.size
                s = 0
                while s < _2460:
                    mem[s + _2396 + ceil32(return_data.size) + 32] = mem[s + _2396 + _2428 + 32]
                    s = s + 32
                    continue 
                if ceil32(_2460) <= _2460:
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2460:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4361 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4361
                        mem[0] = _2127
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4361
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4546 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4594 = mem[_4546]
                        require mem[_4546] <= test266151307()
                        require _4546 + return_data.size > _4546 + mem[_4546] + 31
                        _4642 = mem[_4546 + mem[_4546]]
                        if mem[_4546 + mem[_4546]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4546 + mem[_4546]]) + 1 < 0 or _4546 + ceil32(return_data.size) + ceil32(32 * mem[_4546 + mem[_4546]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4546 + ceil32(return_data.size) + ceil32(32 * mem[_4546 + mem[_4546]]) + 1
                        mem[_4546 + ceil32(return_data.size)] = _4642
                        require _4594 + (32 * _4642) + 32 <= return_data.size
                        t = _4546 + _4594 + 32
                        u = _4546 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4642:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4642:
                            revert with 0, 50
                        if 0 >= _4642:
                            revert with 0, 50
                        if 0 >= _4642:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4546 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4546 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4546 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4546 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4546 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4546 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4546 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    mem[_2460 + _2396 + ceil32(return_data.size) + 32] = 0
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2460:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4362 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4362
                        mem[0] = _2127
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4362
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4547 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4595 = mem[_4547]
                        require mem[_4547] <= test266151307()
                        require _4547 + return_data.size > _4547 + mem[_4547] + 31
                        _4643 = mem[_4547 + mem[_4547]]
                        if mem[_4547 + mem[_4547]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4547 + mem[_4547]]) + 1 < 0 or _4547 + ceil32(return_data.size) + ceil32(32 * mem[_4547 + mem[_4547]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4547 + ceil32(return_data.size) + ceil32(32 * mem[_4547 + mem[_4547]]) + 1
                        mem[_4547 + ceil32(return_data.size)] = _4643
                        require _4595 + (32 * _4643) + 32 <= return_data.size
                        t = _4547 + _4595 + 32
                        u = _4547 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4643:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4643:
                            revert with 0, 50
                        if 0 >= _4643:
                            revert with 0, 50
                        if 0 >= _4643:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4547 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4547 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4547 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4547 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4547 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4547 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4547 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _2204 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 160 len 32 * _2204] = mem[ceil32(return_data.size) + 128 len 32 * _2204]
            mem[mem[64] + 32] = (32 * _2204) + 160
            _4220 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2204) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2204) + 192 len 32 * _4220] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4220]
            mem[mem[64] + 64] = (32 * _2204) + (32 * _4220) + 192
            _6056 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[mem[64] + (32 * _2204) + (32 * _4220) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[mem[64] + (32 * _2204) + (32 * _4220) + 224 len 32 * _6056] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6056]
            mem[mem[64] + 96] = (32 * _2204) + (32 * _4220) + (32 * _6056) + 224
            _7324 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[mem[64] + (32 * _2204) + (32 * _4220) + (32 * _6056) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[mem[64] + (32 * _2204) + (32 * _4220) + (32 * _6056) + 256 len 32 * _7324] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7324]
            return 128, 
                   (32 * _2204) + 160,
                   (32 * _2204) + (32 * _4220) + 192,
                   (32 * _2204) + (32 * _4220) + (32 * _6056) + 224,
                   mem[mem[64] + 128 len (32 * _2204) + (32 * _4220) + (32 * _6056) + (32 * _7324) + 128]
        mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
        idx = 0
        while idx < ext_call.return_data[0]:
            mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = idx
            _2131 = mem[0]
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                    gas gas_remaining wei
                   args idx
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2189 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2189]
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            _2293 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _2293
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                    gas gas_remaining wei
                   args _2293
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2397 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2429 = mem[_2397]
            require mem[_2397] <= test266151307()
            require _2397 + return_data.size > _2397 + mem[_2397] + 31
            _2461 = mem[_2397 + mem[_2397]]
            if mem[_2397 + mem[_2397]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_2397 + mem[_2397]])) + 1 < 0 or _2397 + ceil32(return_data.size) + ceil32(ceil32(mem[_2397 + mem[_2397]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2397 + ceil32(return_data.size) + ceil32(ceil32(mem[_2397 + mem[_2397]])) + 1
            mem[_2397 + ceil32(return_data.size)] = _2461
            require _2429 + _2461 + 32 <= return_data.size
            s = 0
            while s < _2461:
                mem[s + _2397 + ceil32(return_data.size) + 32] = mem[s + _2397 + _2429 + 32]
                s = s + 32
                continue 
            if ceil32(_2461) <= _2461:
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2461:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4364 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4364
                    mem[0] = _2131
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4364
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4548 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4596 = mem[_4548]
                    require mem[_4548] <= test266151307()
                    require _4548 + return_data.size > _4548 + mem[_4548] + 31
                    _4644 = mem[_4548 + mem[_4548]]
                    if mem[_4548 + mem[_4548]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4548 + mem[_4548]]) + 1 < 0 or _4548 + ceil32(return_data.size) + ceil32(32 * mem[_4548 + mem[_4548]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4548 + ceil32(return_data.size) + ceil32(32 * mem[_4548 + mem[_4548]]) + 1
                    mem[_4548 + ceil32(return_data.size)] = _4644
                    require _4596 + (32 * _4644) + 32 <= return_data.size
                    t = _4548 + _4596 + 32
                    u = _4548 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4644:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4644:
                        revert with 0, 50
                    if 0 >= _4644:
                        revert with 0, 50
                    if 0 >= _4644:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4548 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4548 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4548 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4548 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4548 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4548 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4548 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            else:
                mem[_2461 + _2397 + ceil32(return_data.size) + 32] = 0
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2461:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4365 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4365
                    mem[0] = _2131
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4365
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4549 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4597 = mem[_4549]
                    require mem[_4549] <= test266151307()
                    require _4549 + return_data.size > _4549 + mem[_4549] + 31
                    _4645 = mem[_4549 + mem[_4549]]
                    if mem[_4549 + mem[_4549]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4549 + mem[_4549]]) + 1 < 0 or _4549 + ceil32(return_data.size) + ceil32(32 * mem[_4549 + mem[_4549]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4549 + ceil32(return_data.size) + ceil32(32 * mem[_4549 + mem[_4549]]) + 1
                    mem[_4549 + ceil32(return_data.size)] = _4645
                    require _4597 + (32 * _4645) + 32 <= return_data.size
                    t = _4549 + _4597 + 32
                    u = _4549 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4645:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4645:
                        revert with 0, 50
                    if 0 >= _4645:
                        revert with 0, 50
                    if 0 >= _4645:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4549 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4549 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4549 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4549 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4549 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4549 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4549 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        mem[mem[64]] = 128
        _2205 = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 160 len 32 * _2205] = mem[ceil32(return_data.size) + 128 len 32 * _2205]
        mem[mem[64] + 32] = (32 * _2205) + 160
        _4221 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2205) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2205) + 192 len 32 * _4221] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4221]
        mem[mem[64] + 64] = (32 * _2205) + (32 * _4221) + 192
        _6059 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[mem[64] + (32 * _2205) + (32 * _4221) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[mem[64] + (32 * _2205) + (32 * _4221) + 224 len 32 * _6059] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6059]
        mem[mem[64] + 96] = (32 * _2205) + (32 * _4221) + (32 * _6059) + 224
        _7325 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[mem[64] + (32 * _2205) + (32 * _4221) + (32 * _6059) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[mem[64] + (32 * _2205) + (32 * _4221) + (32 * _6059) + 256 len 32 * _7325] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7325]
        return 128, 
               (32 * _2205) + 160,
               (32 * _2205) + (32 * _4221) + 192,
               (32 * _2205) + (32 * _4221) + (32 * _6059) + 224,
               mem[mem[64] + 128 len (32 * _2205) + (32 * _4221) + (32 * _6059) + (32 * _7325) + 128]
    mem[ceil32(return_data.size) + 128 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
    if ext_call.return_data[0] > test266151307():
        revert with 0, 65
    mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128] = ext_call.return_data[0]
    if not ext_call.return_data[0]:
        if ext_call.return_data[0] > test266151307():
            revert with 0, 65
        mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160] = ext_call.return_data[0]
        if not ext_call.return_data[0]:
            if ext_call.return_data[0] > test266151307():
                revert with 0, 65
            mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
            mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
            if not ext_call.return_data[0]:
                idx = 0
                while idx < ext_call.return_data[0]:
                    mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = idx
                    _2135 = mem[0]
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                            gas gas_remaining wei
                           args idx
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2190 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2190]
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    _2295 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _2295
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                            gas gas_remaining wei
                           args _2295
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2398 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _2430 = mem[_2398]
                    require mem[_2398] <= test266151307()
                    require _2398 + return_data.size > _2398 + mem[_2398] + 31
                    _2462 = mem[_2398 + mem[_2398]]
                    if mem[_2398 + mem[_2398]] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[_2398 + mem[_2398]])) + 1 < 0 or _2398 + ceil32(return_data.size) + ceil32(ceil32(mem[_2398 + mem[_2398]])) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _2398 + ceil32(return_data.size) + ceil32(ceil32(mem[_2398 + mem[_2398]])) + 1
                    mem[_2398 + ceil32(return_data.size)] = _2462
                    require _2430 + _2462 + 32 <= return_data.size
                    s = 0
                    while s < _2462:
                        mem[s + _2398 + ceil32(return_data.size) + 32] = mem[s + _2398 + _2430 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_2462) <= _2462:
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2462:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4367 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4367
                            mem[0] = _2135
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4367
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4550 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4598 = mem[_4550]
                            require mem[_4550] <= test266151307()
                            require _4550 + return_data.size > _4550 + mem[_4550] + 31
                            _4646 = mem[_4550 + mem[_4550]]
                            if mem[_4550 + mem[_4550]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4550 + mem[_4550]]) + 1 < 0 or _4550 + ceil32(return_data.size) + ceil32(32 * mem[_4550 + mem[_4550]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4550 + ceil32(return_data.size) + ceil32(32 * mem[_4550 + mem[_4550]]) + 1
                            mem[_4550 + ceil32(return_data.size)] = _4646
                            require _4598 + (32 * _4646) + 32 <= return_data.size
                            t = _4550 + _4598 + 32
                            u = _4550 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4646:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4646:
                                revert with 0, 50
                            if 0 >= _4646:
                                revert with 0, 50
                            if 0 >= _4646:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4550 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4550 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4550 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4550 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4550 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4550 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4550 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        mem[_2462 + _2398 + ceil32(return_data.size) + 32] = 0
                        if idx >= mem[ceil32(return_data.size) + 96]:
                            revert with 0, 50
                        if not _2462:
                            mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                        else:
                            _4368 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                            mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _4368
                            mem[0] = _2135
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                    gas gas_remaining wei
                                   args _4368
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4551 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4599 = mem[_4551]
                            require mem[_4551] <= test266151307()
                            require _4551 + return_data.size > _4551 + mem[_4551] + 31
                            _4647 = mem[_4551 + mem[_4551]]
                            if mem[_4551 + mem[_4551]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4551 + mem[_4551]]) + 1 < 0 or _4551 + ceil32(return_data.size) + ceil32(32 * mem[_4551 + mem[_4551]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4551 + ceil32(return_data.size) + ceil32(32 * mem[_4551 + mem[_4551]]) + 1
                            mem[_4551 + ceil32(return_data.size)] = _4647
                            require _4599 + (32 * _4647) + 32 <= return_data.size
                            t = _4551 + _4599 + 32
                            u = _4551 + ceil32(return_data.size) + 32
                            s = 0
                            while s < _4647:
                                mem[u] = mem[t]
                                t = t + 32
                                u = u + 32
                                s = s + 1
                                continue 
                            if 0 >= _4647:
                                revert with 0, 50
                            if 0 >= _4647:
                                revert with 0, 50
                            if 0 >= _4647:
                                revert with 0, 50
                            if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                                revert with 0, 50
                            if mem[_4551 + ceil32(return_data.size) + 32] != 0:
                                if mem[_4551 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4551 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4551 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4551 + ceil32(return_data.size) + 32] != 1:
                                    if mem[_4551 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                                else:
                                    if mem[_4551 + ceil32(return_data.size) + 32] != 2:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                    else:
                                        mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                        if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                            revert with 0, 50
                                        mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 128
                _2206 = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
                mem[mem[64] + 160 len 32 * _2206] = mem[ceil32(return_data.size) + 128 len 32 * _2206]
                mem[mem[64] + 32] = (32 * _2206) + 160
                _4222 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2206) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
                mem[mem[64] + (32 * _2206) + 192 len 32 * _4222] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4222]
                mem[mem[64] + 64] = (32 * _2206) + (32 * _4222) + 192
                _6062 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[mem[64] + (32 * _2206) + (32 * _4222) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
                mem[mem[64] + (32 * _2206) + (32 * _4222) + 224 len 32 * _6062] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6062]
                mem[mem[64] + 96] = (32 * _2206) + (32 * _4222) + (32 * _6062) + 224
                _7326 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[mem[64] + (32 * _2206) + (32 * _4222) + (32 * _6062) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
                mem[mem[64] + (32 * _2206) + (32 * _4222) + (32 * _6062) + 256 len 32 * _7326] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7326]
                return 128, 
                       (32 * _2206) + 160,
                       (32 * _2206) + (32 * _4222) + 192,
                       (32 * _2206) + (32 * _4222) + (32 * _6062) + 224,
                       mem[mem[64] + 128 len (32 * _2206) + (32 * _4222) + (32 * _6062) + (32 * _7326) + 128]
            mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
            idx = 0
            while idx < ext_call.return_data[0]:
                mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = idx
                _2139 = mem[0]
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                        gas gas_remaining wei
                       args idx
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2191 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2191]
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                _2297 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2297
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                        gas gas_remaining wei
                       args _2297
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2399 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2431 = mem[_2399]
                require mem[_2399] <= test266151307()
                require _2399 + return_data.size > _2399 + mem[_2399] + 31
                _2463 = mem[_2399 + mem[_2399]]
                if mem[_2399 + mem[_2399]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_2399 + mem[_2399]])) + 1 < 0 or _2399 + ceil32(return_data.size) + ceil32(ceil32(mem[_2399 + mem[_2399]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2399 + ceil32(return_data.size) + ceil32(ceil32(mem[_2399 + mem[_2399]])) + 1
                mem[_2399 + ceil32(return_data.size)] = _2463
                require _2431 + _2463 + 32 <= return_data.size
                s = 0
                while s < _2463:
                    mem[s + _2399 + ceil32(return_data.size) + 32] = mem[s + _2399 + _2431 + 32]
                    s = s + 32
                    continue 
                if ceil32(_2463) <= _2463:
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2463:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4370 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4370
                        mem[0] = _2139
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4370
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4552 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4600 = mem[_4552]
                        require mem[_4552] <= test266151307()
                        require _4552 + return_data.size > _4552 + mem[_4552] + 31
                        _4648 = mem[_4552 + mem[_4552]]
                        if mem[_4552 + mem[_4552]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4552 + mem[_4552]]) + 1 < 0 or _4552 + ceil32(return_data.size) + ceil32(32 * mem[_4552 + mem[_4552]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4552 + ceil32(return_data.size) + ceil32(32 * mem[_4552 + mem[_4552]]) + 1
                        mem[_4552 + ceil32(return_data.size)] = _4648
                        require _4600 + (32 * _4648) + 32 <= return_data.size
                        t = _4552 + _4600 + 32
                        u = _4552 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4648:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4648:
                            revert with 0, 50
                        if 0 >= _4648:
                            revert with 0, 50
                        if 0 >= _4648:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4552 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4552 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4552 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4552 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4552 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4552 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4552 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    mem[_2463 + _2399 + ceil32(return_data.size) + 32] = 0
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2463:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4371 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4371
                        mem[0] = _2139
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4371
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4553 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4601 = mem[_4553]
                        require mem[_4553] <= test266151307()
                        require _4553 + return_data.size > _4553 + mem[_4553] + 31
                        _4649 = mem[_4553 + mem[_4553]]
                        if mem[_4553 + mem[_4553]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4553 + mem[_4553]]) + 1 < 0 or _4553 + ceil32(return_data.size) + ceil32(32 * mem[_4553 + mem[_4553]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4553 + ceil32(return_data.size) + ceil32(32 * mem[_4553 + mem[_4553]]) + 1
                        mem[_4553 + ceil32(return_data.size)] = _4649
                        require _4601 + (32 * _4649) + 32 <= return_data.size
                        t = _4553 + _4601 + 32
                        u = _4553 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4649:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4649:
                            revert with 0, 50
                        if 0 >= _4649:
                            revert with 0, 50
                        if 0 >= _4649:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4553 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4553 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4553 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4553 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4553 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4553 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4553 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _2175 = mem[64]
            mem[mem[64]] = 128
            _2207 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 160 len 32 * _2207] = mem[ceil32(return_data.size) + 128 len 32 * _2207]
            mem[mem[64] + 32] = (32 * _2207) + 160
            _4223 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2207) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2207) + 192 len 32 * _4223] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4223]
            mem[mem[64] + 64] = (32 * _2207) + (32 * _4223) + 192
            _6065 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2175 + (32 * _2207) + (32 * _4223) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2175 + (32 * _2207) + (32 * _4223) + 224 len 32 * _6065] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6065]
            mem[_2175 + 96] = (32 * _2207) + (32 * _4223) + (32 * _6065) + 224
            _7327 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2175 + (32 * _2207) + (32 * _4223) + (32 * _6065) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2175 + (32 * _2207) + (32 * _4223) + (32 * _6065) + 256 len 32 * _7327] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7327]
            return memory
              from mem[64]
               len _2175 + (32 * _2207) + (32 * _4223) + (32 * _6065) + (32 * _7327) + -mem[64] + 256
        mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
        if ext_call.return_data[0] > test266151307():
            revert with 0, 65
        mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
        mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
        if not ext_call.return_data[0]:
            idx = 0
            while idx < ext_call.return_data[0]:
                mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = idx
                _2143 = mem[0]
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                        gas gas_remaining wei
                       args idx
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2192 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2192]
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                _2299 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2299
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                        gas gas_remaining wei
                       args _2299
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2400 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2432 = mem[_2400]
                require mem[_2400] <= test266151307()
                require _2400 + return_data.size > _2400 + mem[_2400] + 31
                _2464 = mem[_2400 + mem[_2400]]
                if mem[_2400 + mem[_2400]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_2400 + mem[_2400]])) + 1 < 0 or _2400 + ceil32(return_data.size) + ceil32(ceil32(mem[_2400 + mem[_2400]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2400 + ceil32(return_data.size) + ceil32(ceil32(mem[_2400 + mem[_2400]])) + 1
                mem[_2400 + ceil32(return_data.size)] = _2464
                require _2432 + _2464 + 32 <= return_data.size
                s = 0
                while s < _2464:
                    mem[s + _2400 + ceil32(return_data.size) + 32] = mem[s + _2400 + _2432 + 32]
                    s = s + 32
                    continue 
                if ceil32(_2464) <= _2464:
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2464:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4373 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4373
                        mem[0] = _2143
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4373
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4554 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4602 = mem[_4554]
                        require mem[_4554] <= test266151307()
                        require _4554 + return_data.size > _4554 + mem[_4554] + 31
                        _4650 = mem[_4554 + mem[_4554]]
                        if mem[_4554 + mem[_4554]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4554 + mem[_4554]]) + 1 < 0 or _4554 + ceil32(return_data.size) + ceil32(32 * mem[_4554 + mem[_4554]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4554 + ceil32(return_data.size) + ceil32(32 * mem[_4554 + mem[_4554]]) + 1
                        mem[_4554 + ceil32(return_data.size)] = _4650
                        require _4602 + (32 * _4650) + 32 <= return_data.size
                        t = _4554 + _4602 + 32
                        u = _4554 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4650:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4650:
                            revert with 0, 50
                        if 0 >= _4650:
                            revert with 0, 50
                        if 0 >= _4650:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4554 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4554 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4554 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4554 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4554 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4554 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4554 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    mem[_2464 + _2400 + ceil32(return_data.size) + 32] = 0
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2464:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4374 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4374
                        mem[0] = _2143
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4374
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4555 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4603 = mem[_4555]
                        require mem[_4555] <= test266151307()
                        require _4555 + return_data.size > _4555 + mem[_4555] + 31
                        _4651 = mem[_4555 + mem[_4555]]
                        if mem[_4555 + mem[_4555]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4555 + mem[_4555]]) + 1 < 0 or _4555 + ceil32(return_data.size) + ceil32(32 * mem[_4555 + mem[_4555]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4555 + ceil32(return_data.size) + ceil32(32 * mem[_4555 + mem[_4555]]) + 1
                        mem[_4555 + ceil32(return_data.size)] = _4651
                        require _4603 + (32 * _4651) + 32 <= return_data.size
                        t = _4555 + _4603 + 32
                        u = _4555 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4651:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4651:
                            revert with 0, 50
                        if 0 >= _4651:
                            revert with 0, 50
                        if 0 >= _4651:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4555 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4555 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4555 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4555 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4555 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4555 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4555 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _2176 = mem[64]
            mem[mem[64]] = 128
            _2208 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 160 len 32 * _2208] = mem[ceil32(return_data.size) + 128 len 32 * _2208]
            mem[mem[64] + 32] = (32 * _2208) + 160
            _4224 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2208) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2208) + 192 len 32 * _4224] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4224]
            mem[mem[64] + 64] = (32 * _2208) + (32 * _4224) + 192
            _6068 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2176 + (32 * _2208) + (32 * _4224) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2176 + (32 * _2208) + (32 * _4224) + 224 len 32 * _6068] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6068]
            mem[_2176 + 96] = (32 * _2208) + (32 * _4224) + (32 * _6068) + 224
            _7328 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2176 + (32 * _2208) + (32 * _4224) + (32 * _6068) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2176 + (32 * _2208) + (32 * _4224) + (32 * _6068) + 256 len 32 * _7328] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7328]
            return memory
              from mem[64]
               len _2176 + (32 * _2208) + (32 * _4224) + (32 * _6068) + (32 * _7328) + -mem[64] + 256
        mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
        idx = 0
        while idx < ext_call.return_data[0]:
            mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = idx
            _2147 = mem[0]
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                    gas gas_remaining wei
                   args idx
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2193 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2193]
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            _2301 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _2301
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                    gas gas_remaining wei
                   args _2301
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2401 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2433 = mem[_2401]
            require mem[_2401] <= test266151307()
            require _2401 + return_data.size > _2401 + mem[_2401] + 31
            _2465 = mem[_2401 + mem[_2401]]
            if mem[_2401 + mem[_2401]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_2401 + mem[_2401]])) + 1 < 0 or _2401 + ceil32(return_data.size) + ceil32(ceil32(mem[_2401 + mem[_2401]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2401 + ceil32(return_data.size) + ceil32(ceil32(mem[_2401 + mem[_2401]])) + 1
            mem[_2401 + ceil32(return_data.size)] = _2465
            require _2433 + _2465 + 32 <= return_data.size
            s = 0
            while s < _2465:
                mem[s + _2401 + ceil32(return_data.size) + 32] = mem[s + _2401 + _2433 + 32]
                s = s + 32
                continue 
            if ceil32(_2465) <= _2465:
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2465:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4376 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4376
                    mem[0] = _2147
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4376
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4556 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4604 = mem[_4556]
                    require mem[_4556] <= test266151307()
                    require _4556 + return_data.size > _4556 + mem[_4556] + 31
                    _4652 = mem[_4556 + mem[_4556]]
                    if mem[_4556 + mem[_4556]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4556 + mem[_4556]]) + 1 < 0 or _4556 + ceil32(return_data.size) + ceil32(32 * mem[_4556 + mem[_4556]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4556 + ceil32(return_data.size) + ceil32(32 * mem[_4556 + mem[_4556]]) + 1
                    mem[_4556 + ceil32(return_data.size)] = _4652
                    require _4604 + (32 * _4652) + 32 <= return_data.size
                    t = _4556 + _4604 + 32
                    u = _4556 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4652:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4652:
                        revert with 0, 50
                    if 0 >= _4652:
                        revert with 0, 50
                    if 0 >= _4652:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4556 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4556 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4556 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4556 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4556 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4556 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4556 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            else:
                mem[_2465 + _2401 + ceil32(return_data.size) + 32] = 0
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2465:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4377 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4377
                    mem[0] = _2147
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4377
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4557 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4605 = mem[_4557]
                    require mem[_4557] <= test266151307()
                    require _4557 + return_data.size > _4557 + mem[_4557] + 31
                    _4653 = mem[_4557 + mem[_4557]]
                    if mem[_4557 + mem[_4557]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4557 + mem[_4557]]) + 1 < 0 or _4557 + ceil32(return_data.size) + ceil32(32 * mem[_4557 + mem[_4557]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4557 + ceil32(return_data.size) + ceil32(32 * mem[_4557 + mem[_4557]]) + 1
                    mem[_4557 + ceil32(return_data.size)] = _4653
                    require _4605 + (32 * _4653) + 32 <= return_data.size
                    t = _4557 + _4605 + 32
                    u = _4557 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4653:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4653:
                        revert with 0, 50
                    if 0 >= _4653:
                        revert with 0, 50
                    if 0 >= _4653:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4557 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4557 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4557 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4557 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4557 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4557 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4557 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _2177 = mem[64]
        mem[mem[64]] = 128
        _2209 = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 160 len 32 * _2209] = mem[ceil32(return_data.size) + 128 len 32 * _2209]
        mem[mem[64] + 32] = (32 * _2209) + 160
        _4225 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2209) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2209) + 192 len 32 * _4225] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4225]
        mem[mem[64] + 64] = (32 * _2209) + (32 * _4225) + 192
        _6071 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[_2177 + (32 * _2209) + (32 * _4225) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[_2177 + (32 * _2209) + (32 * _4225) + 224 len 32 * _6071] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6071]
        mem[_2177 + 96] = (32 * _2209) + (32 * _4225) + (32 * _6071) + 224
        _7329 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[_2177 + (32 * _2209) + (32 * _4225) + (32 * _6071) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[_2177 + (32 * _2209) + (32 * _4225) + (32 * _6071) + 256 len 32 * _7329] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7329]
        return memory
          from mem[64]
           len _2177 + (32 * _2209) + (32 * _4225) + (32 * _6071) + (32 * _7329) + -mem[64] + 256
    mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
    if ext_call.return_data[0] > test266151307():
        revert with 0, 65
    mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160] = ext_call.return_data[0]
    if not ext_call.return_data[0]:
        if ext_call.return_data[0] > test266151307():
            revert with 0, 65
        mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
        mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
        if not ext_call.return_data[0]:
            idx = 0
            while idx < ext_call.return_data[0]:
                mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = idx
                _2151 = mem[0]
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                        gas gas_remaining wei
                       args idx
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2194 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2194]
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                _2303 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2303
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                        gas gas_remaining wei
                       args _2303
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2402 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2434 = mem[_2402]
                require mem[_2402] <= test266151307()
                require _2402 + return_data.size > _2402 + mem[_2402] + 31
                _2466 = mem[_2402 + mem[_2402]]
                if mem[_2402 + mem[_2402]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_2402 + mem[_2402]])) + 1 < 0 or _2402 + ceil32(return_data.size) + ceil32(ceil32(mem[_2402 + mem[_2402]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2402 + ceil32(return_data.size) + ceil32(ceil32(mem[_2402 + mem[_2402]])) + 1
                mem[_2402 + ceil32(return_data.size)] = _2466
                require _2434 + _2466 + 32 <= return_data.size
                s = 0
                while s < _2466:
                    mem[s + _2402 + ceil32(return_data.size) + 32] = mem[s + _2402 + _2434 + 32]
                    s = s + 32
                    continue 
                if ceil32(_2466) <= _2466:
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2466:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4379 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4379
                        mem[0] = _2151
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4379
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4558 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4606 = mem[_4558]
                        require mem[_4558] <= test266151307()
                        require _4558 + return_data.size > _4558 + mem[_4558] + 31
                        _4654 = mem[_4558 + mem[_4558]]
                        if mem[_4558 + mem[_4558]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4558 + mem[_4558]]) + 1 < 0 or _4558 + ceil32(return_data.size) + ceil32(32 * mem[_4558 + mem[_4558]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4558 + ceil32(return_data.size) + ceil32(32 * mem[_4558 + mem[_4558]]) + 1
                        mem[_4558 + ceil32(return_data.size)] = _4654
                        require _4606 + (32 * _4654) + 32 <= return_data.size
                        t = _4558 + _4606 + 32
                        u = _4558 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4654:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4654:
                            revert with 0, 50
                        if 0 >= _4654:
                            revert with 0, 50
                        if 0 >= _4654:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4558 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4558 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4558 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4558 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4558 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4558 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4558 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    mem[_2466 + _2402 + ceil32(return_data.size) + 32] = 0
                    if idx >= mem[ceil32(return_data.size) + 96]:
                        revert with 0, 50
                    if not _2466:
                        mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                    else:
                        _4380 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                        mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _4380
                        mem[0] = _2151
                        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                gas gas_remaining wei
                               args _4380
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4559 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4607 = mem[_4559]
                        require mem[_4559] <= test266151307()
                        require _4559 + return_data.size > _4559 + mem[_4559] + 31
                        _4655 = mem[_4559 + mem[_4559]]
                        if mem[_4559 + mem[_4559]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4559 + mem[_4559]]) + 1 < 0 or _4559 + ceil32(return_data.size) + ceil32(32 * mem[_4559 + mem[_4559]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4559 + ceil32(return_data.size) + ceil32(32 * mem[_4559 + mem[_4559]]) + 1
                        mem[_4559 + ceil32(return_data.size)] = _4655
                        require _4607 + (32 * _4655) + 32 <= return_data.size
                        t = _4559 + _4607 + 32
                        u = _4559 + ceil32(return_data.size) + 32
                        s = 0
                        while s < _4655:
                            mem[u] = mem[t]
                            t = t + 32
                            u = u + 32
                            s = s + 1
                            continue 
                        if 0 >= _4655:
                            revert with 0, 50
                        if 0 >= _4655:
                            revert with 0, 50
                        if 0 >= _4655:
                            revert with 0, 50
                        if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                            revert with 0, 50
                        if mem[_4559 + ceil32(return_data.size) + 32] != 0:
                            if mem[_4559 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4559 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4559 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4559 + ceil32(return_data.size) + 32] != 1:
                                if mem[_4559 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                    if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                            else:
                                if mem[_4559 + ceil32(return_data.size) + 32] != 2:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                                else:
                                    mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                    if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _2178 = mem[64]
            mem[mem[64]] = 128
            _2210 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 160 len 32 * _2210] = mem[ceil32(return_data.size) + 128 len 32 * _2210]
            mem[mem[64] + 32] = (32 * _2210) + 160
            _4226 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2210) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
            mem[mem[64] + (32 * _2210) + 192 len 32 * _4226] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4226]
            mem[mem[64] + 64] = (32 * _2210) + (32 * _4226) + 192
            _6074 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2178 + (32 * _2210) + (32 * _4226) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
            mem[_2178 + (32 * _2210) + (32 * _4226) + 224 len 32 * _6074] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6074]
            mem[_2178 + 96] = (32 * _2210) + (32 * _4226) + (32 * _6074) + 224
            _7330 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2178 + (32 * _2210) + (32 * _4226) + (32 * _6074) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
            mem[_2178 + (32 * _2210) + (32 * _4226) + (32 * _6074) + 256 len 32 * _7330] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7330]
            return memory
              from mem[64]
               len _2178 + (32 * _2210) + (32 * _4226) + (32 * _6074) + (32 * _7330) + -mem[64] + 256
        mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
        idx = 0
        while idx < ext_call.return_data[0]:
            mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = idx
            _2155 = mem[0]
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                    gas gas_remaining wei
                   args idx
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2195 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2195]
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            _2305 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _2305
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                    gas gas_remaining wei
                   args _2305
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2403 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2435 = mem[_2403]
            require mem[_2403] <= test266151307()
            require _2403 + return_data.size > _2403 + mem[_2403] + 31
            _2467 = mem[_2403 + mem[_2403]]
            if mem[_2403 + mem[_2403]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_2403 + mem[_2403]])) + 1 < 0 or _2403 + ceil32(return_data.size) + ceil32(ceil32(mem[_2403 + mem[_2403]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2403 + ceil32(return_data.size) + ceil32(ceil32(mem[_2403 + mem[_2403]])) + 1
            mem[_2403 + ceil32(return_data.size)] = _2467
            require _2435 + _2467 + 32 <= return_data.size
            s = 0
            while s < _2467:
                mem[s + _2403 + ceil32(return_data.size) + 32] = mem[s + _2403 + _2435 + 32]
                s = s + 32
                continue 
            if ceil32(_2467) <= _2467:
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2467:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4382 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4382
                    mem[0] = _2155
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4382
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4560 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4608 = mem[_4560]
                    require mem[_4560] <= test266151307()
                    require _4560 + return_data.size > _4560 + mem[_4560] + 31
                    _4656 = mem[_4560 + mem[_4560]]
                    if mem[_4560 + mem[_4560]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4560 + mem[_4560]]) + 1 < 0 or _4560 + ceil32(return_data.size) + ceil32(32 * mem[_4560 + mem[_4560]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4560 + ceil32(return_data.size) + ceil32(32 * mem[_4560 + mem[_4560]]) + 1
                    mem[_4560 + ceil32(return_data.size)] = _4656
                    require _4608 + (32 * _4656) + 32 <= return_data.size
                    t = _4560 + _4608 + 32
                    u = _4560 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4656:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4656:
                        revert with 0, 50
                    if 0 >= _4656:
                        revert with 0, 50
                    if 0 >= _4656:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4560 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4560 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4560 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4560 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4560 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4560 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4560 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            else:
                mem[_2467 + _2403 + ceil32(return_data.size) + 32] = 0
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2467:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4383 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4383
                    mem[0] = _2155
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4383
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4561 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4609 = mem[_4561]
                    require mem[_4561] <= test266151307()
                    require _4561 + return_data.size > _4561 + mem[_4561] + 31
                    _4657 = mem[_4561 + mem[_4561]]
                    if mem[_4561 + mem[_4561]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4561 + mem[_4561]]) + 1 < 0 or _4561 + ceil32(return_data.size) + ceil32(32 * mem[_4561 + mem[_4561]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4561 + ceil32(return_data.size) + ceil32(32 * mem[_4561 + mem[_4561]]) + 1
                    mem[_4561 + ceil32(return_data.size)] = _4657
                    require _4609 + (32 * _4657) + 32 <= return_data.size
                    t = _4561 + _4609 + 32
                    u = _4561 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4657:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4657:
                        revert with 0, 50
                    if 0 >= _4657:
                        revert with 0, 50
                    if 0 >= _4657:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4561 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4561 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4561 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4561 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4561 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4561 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4561 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        mem[mem[64]] = 128
        _2211 = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 160 len 32 * _2211] = mem[ceil32(return_data.size) + 128 len 32 * _2211]
        mem[mem[64] + 32] = (32 * _2211) + 160
        _4227 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2211) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2211) + 192 len 32 * _4227] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4227]
        mem[mem[64] + 64] = (32 * _2211) + (32 * _4227) + 192
        _6077 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[mem[64] + (32 * _2211) + (32 * _4227) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[mem[64] + (32 * _2211) + (32 * _4227) + 224 len 32 * _6077] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6077]
        mem[mem[64] + 96] = (32 * _2211) + (32 * _4227) + (32 * _6077) + 224
        _7331 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[mem[64] + (32 * _2211) + (32 * _4227) + (32 * _6077) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[mem[64] + (32 * _2211) + (32 * _4227) + (32 * _6077) + 256 len 32 * _7331] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7331]
        return 128, 
               (32 * _2211) + 160,
               (32 * _2211) + (32 * _4227) + 192,
               (32 * _2211) + (32 * _4227) + (32 * _6077) + 224,
               mem[mem[64] + 128 len (32 * _2211) + (32 * _4227) + (32 * _6077) + (32 * _7331) + 128]
    mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
    if ext_call.return_data[0] > test266151307():
        revert with 0, 65
    mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192] = ext_call.return_data[0]
    mem[64] = ceil32(return_data.size) + (131 * ext_call.return_data[0]) + 224
    if not ext_call.return_data[0]:
        idx = 0
        while idx < ext_call.return_data[0]:
            mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = idx
            _2159 = mem[0]
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                    gas gas_remaining wei
                   args idx
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2196 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2196]
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            _2307 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _2307
            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                    gas gas_remaining wei
                   args _2307
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2404 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2436 = mem[_2404]
            require mem[_2404] <= test266151307()
            require _2404 + return_data.size > _2404 + mem[_2404] + 31
            _2468 = mem[_2404 + mem[_2404]]
            if mem[_2404 + mem[_2404]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_2404 + mem[_2404]])) + 1 < 0 or _2404 + ceil32(return_data.size) + ceil32(ceil32(mem[_2404 + mem[_2404]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2404 + ceil32(return_data.size) + ceil32(ceil32(mem[_2404 + mem[_2404]])) + 1
            mem[_2404 + ceil32(return_data.size)] = _2468
            require _2436 + _2468 + 32 <= return_data.size
            s = 0
            while s < _2468:
                mem[s + _2404 + ceil32(return_data.size) + 32] = mem[s + _2404 + _2436 + 32]
                s = s + 32
                continue 
            if ceil32(_2468) <= _2468:
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2468:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4385 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4385
                    mem[0] = _2159
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4385
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4562 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4610 = mem[_4562]
                    require mem[_4562] <= test266151307()
                    require _4562 + return_data.size > _4562 + mem[_4562] + 31
                    _4658 = mem[_4562 + mem[_4562]]
                    if mem[_4562 + mem[_4562]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4562 + mem[_4562]]) + 1 < 0 or _4562 + ceil32(return_data.size) + ceil32(32 * mem[_4562 + mem[_4562]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4562 + ceil32(return_data.size) + ceil32(32 * mem[_4562 + mem[_4562]]) + 1
                    mem[_4562 + ceil32(return_data.size)] = _4658
                    require _4610 + (32 * _4658) + 32 <= return_data.size
                    t = _4562 + _4610 + 32
                    u = _4562 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4658:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4658:
                        revert with 0, 50
                    if 0 >= _4658:
                        revert with 0, 50
                    if 0 >= _4658:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4562 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4562 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4562 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4562 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4562 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4562 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4562 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            else:
                mem[_2468 + _2404 + ceil32(return_data.size) + 32] = 0
                if idx >= mem[ceil32(return_data.size) + 96]:
                    revert with 0, 50
                if not _2468:
                    mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
                else:
                    _4386 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                    mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _4386
                    mem[0] = _2159
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                            gas gas_remaining wei
                           args _4386
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4563 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4611 = mem[_4563]
                    require mem[_4563] <= test266151307()
                    require _4563 + return_data.size > _4563 + mem[_4563] + 31
                    _4659 = mem[_4563 + mem[_4563]]
                    if mem[_4563 + mem[_4563]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_4563 + mem[_4563]]) + 1 < 0 or _4563 + ceil32(return_data.size) + ceil32(32 * mem[_4563 + mem[_4563]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _4563 + ceil32(return_data.size) + ceil32(32 * mem[_4563 + mem[_4563]]) + 1
                    mem[_4563 + ceil32(return_data.size)] = _4659
                    require _4611 + (32 * _4659) + 32 <= return_data.size
                    t = _4563 + _4611 + 32
                    u = _4563 + ceil32(return_data.size) + 32
                    s = 0
                    while s < _4659:
                        mem[u] = mem[t]
                        t = t + 32
                        u = u + 32
                        s = s + 1
                        continue 
                    if 0 >= _4659:
                        revert with 0, 50
                    if 0 >= _4659:
                        revert with 0, 50
                    if 0 >= _4659:
                        revert with 0, 50
                    if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                        revert with 0, 50
                    if mem[_4563 + ceil32(return_data.size) + 32] != 0:
                        if mem[_4563 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4563 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4563 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4563 + ceil32(return_data.size) + 32] != 1:
                            if mem[_4563 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                                if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                        else:
                            if mem[_4563 + ceil32(return_data.size) + 32] != 2:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                            else:
                                mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                                if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        mem[mem[64]] = 128
        _2212 = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 160 len 32 * _2212] = mem[ceil32(return_data.size) + 128 len 32 * _2212]
        mem[mem[64] + 32] = (32 * _2212) + 160
        _4228 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2212) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
        mem[mem[64] + (32 * _2212) + 192 len 32 * _4228] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4228]
        mem[mem[64] + 64] = (32 * _2212) + (32 * _4228) + 192
        _6080 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[mem[64] + (32 * _2212) + (32 * _4228) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
        mem[mem[64] + (32 * _2212) + (32 * _4228) + 224 len 32 * _6080] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6080]
        mem[mem[64] + 96] = (32 * _2212) + (32 * _4228) + (32 * _6080) + 224
        _7332 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[mem[64] + (32 * _2212) + (32 * _4228) + (32 * _6080) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
        mem[mem[64] + (32 * _2212) + (32 * _4228) + (32 * _6080) + 256 len 32 * _7332] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7332]
        return 128, 
               (32 * _2212) + 160,
               (32 * _2212) + (32 * _4228) + 192,
               (32 * _2212) + (32 * _4228) + (32 * _6080) + 224,
               mem[mem[64] + 128 len (32 * _2212) + (32 * _4228) + (32 * _6080) + (32 * _7332) + 128]
    mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * ext_call.return_data[0]] = call.data[calldata.size len 32 * ext_call.return_data[0]]
    idx = 0
    while idx < ext_call.return_data[0]:
        mem[mem[64]] = 0x4f6ccce700000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = idx
        _2163 = mem[0]
        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.tokenByIndex(uint256 arg1) with:
                gas gas_remaining wei
               args idx
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2197 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if idx >= mem[ceil32(return_data.size) + 96]:
            revert with 0, 50
        mem[(32 * idx) + ceil32(return_data.size) + 128] = mem[_2197]
        if idx >= mem[ceil32(return_data.size) + 96]:
            revert with 0, 50
        _2309 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[mem[64]] = 0x9021453700000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _2309
        require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
        staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                gas gas_remaining wei
               args _2309
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2405 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2437 = mem[_2405]
        require mem[_2405] <= test266151307()
        require _2405 + return_data.size > _2405 + mem[_2405] + 31
        _2469 = mem[_2405 + mem[_2405]]
        if mem[_2405 + mem[_2405]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_2405 + mem[_2405]])) + 1 < 0 or _2405 + ceil32(return_data.size) + ceil32(ceil32(mem[_2405 + mem[_2405]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _2405 + ceil32(return_data.size) + ceil32(ceil32(mem[_2405 + mem[_2405]])) + 1
        mem[_2405 + ceil32(return_data.size)] = _2469
        require _2437 + _2469 + 32 <= return_data.size
        s = 0
        while s < _2469:
            mem[s + _2405 + ceil32(return_data.size) + 32] = mem[s + _2405 + _2437 + 32]
            s = s + 32
            continue 
        if ceil32(_2469) <= _2469:
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            if not _2469:
                mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
            else:
                _4388 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _4388
                mem[0] = _2163
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                        gas gas_remaining wei
                       args _4388
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4564 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _4612 = mem[_4564]
                require mem[_4564] <= test266151307()
                require _4564 + return_data.size > _4564 + mem[_4564] + 31
                _4660 = mem[_4564 + mem[_4564]]
                if mem[_4564 + mem[_4564]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_4564 + mem[_4564]]) + 1 < 0 or _4564 + ceil32(return_data.size) + ceil32(32 * mem[_4564 + mem[_4564]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _4564 + ceil32(return_data.size) + ceil32(32 * mem[_4564 + mem[_4564]]) + 1
                mem[_4564 + ceil32(return_data.size)] = _4660
                require _4612 + (32 * _4660) + 32 <= return_data.size
                t = _4564 + _4612 + 32
                u = _4564 + ceil32(return_data.size) + 32
                s = 0
                while s < _4660:
                    mem[u] = mem[t]
                    t = t + 32
                    u = u + 32
                    s = s + 1
                    continue 
                if 0 >= _4660:
                    revert with 0, 50
                if 0 >= _4660:
                    revert with 0, 50
                if 0 >= _4660:
                    revert with 0, 50
                if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                    revert with 0, 50
                if mem[_4564 + ceil32(return_data.size) + 32] != 0:
                    if mem[_4564 + ceil32(return_data.size) + 32] != 1:
                        if mem[_4564 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4564 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    if mem[_4564 + ceil32(return_data.size) + 32] != 1:
                        if mem[_4564 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4564 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
        else:
            mem[_2469 + _2405 + ceil32(return_data.size) + 32] = 0
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            if not _2469:
                mem[(32 * idx) + ceil32(return_data.size) + 128] = 0
            else:
                _4389 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _4389
                mem[0] = _2163
                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                        gas gas_remaining wei
                       args _4389
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4565 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _4613 = mem[_4565]
                require mem[_4565] <= test266151307()
                require _4565 + return_data.size > _4565 + mem[_4565] + 31
                _4661 = mem[_4565 + mem[_4565]]
                if mem[_4565 + mem[_4565]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_4565 + mem[_4565]]) + 1 < 0 or _4565 + ceil32(return_data.size) + ceil32(32 * mem[_4565 + mem[_4565]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _4565 + ceil32(return_data.size) + ceil32(32 * mem[_4565 + mem[_4565]]) + 1
                mem[_4565 + ceil32(return_data.size)] = _4661
                require _4613 + (32 * _4661) + 32 <= return_data.size
                t = _4565 + _4613 + 32
                u = _4565 + ceil32(return_data.size) + 32
                s = 0
                while s < _4661:
                    mem[u] = mem[t]
                    t = t + 32
                    u = u + 32
                    s = s + 1
                    continue 
                if 0 >= _4661:
                    revert with 0, 50
                if 0 >= _4661:
                    revert with 0, 50
                if 0 >= _4661:
                    revert with 0, 50
                if idx >= mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]:
                    revert with 0, 50
                if mem[_4565 + ceil32(return_data.size) + 32] != 0:
                    if mem[_4565 + ceil32(return_data.size) + 32] != 1:
                        if mem[_4565 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 0
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 0
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 0
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4565 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                else:
                    if mem[_4565 + ceil32(return_data.size) + 32] != 1:
                        if mem[_4565 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 6
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 7
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 50 * 10^18
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                            if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
                    else:
                        if mem[_4565 + ceil32(return_data.size) + 32] != 2:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 8
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 9
                        else:
                            mem[(32 * idx) + ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160] = 10
                            if idx >= mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192] = 11
                        if idx >= mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224] = 10^18
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    mem[mem[64]] = 128
    _2213 = mem[ceil32(return_data.size) + 96]
    mem[mem[64] + 128] = mem[ceil32(return_data.size) + 96]
    mem[mem[64] + 160 len 32 * _2213] = mem[ceil32(return_data.size) + 128 len 32 * _2213]
    mem[mem[64] + 32] = (32 * _2213) + 160
    _4229 = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
    mem[mem[64] + (32 * _2213) + 160] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 128]
    mem[mem[64] + (32 * _2213) + 192 len 32 * _4229] = mem[ceil32(return_data.size) + (32 * ext_call.return_data[0]) + 160 len 32 * _4229]
    mem[mem[64] + 64] = (32 * _2213) + (32 * _4229) + 192
    _6083 = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
    mem[mem[64] + (32 * _2213) + (32 * _4229) + 192] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 160]
    mem[mem[64] + (32 * _2213) + (32 * _4229) + 224 len 32 * _6083] = mem[ceil32(return_data.size) + (64 * ext_call.return_data[0]) + 192 len 32 * _6083]
    mem[mem[64] + 96] = (32 * _2213) + (32 * _4229) + (32 * _6083) + 224
    _7333 = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
    mem[mem[64] + (32 * _2213) + (32 * _4229) + (32 * _6083) + 224] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 192]
    mem[mem[64] + (32 * _2213) + (32 * _4229) + (32 * _6083) + 256 len 32 * _7333] = mem[ceil32(return_data.size) + (98 * ext_call.return_data[0]) + 224 len 32 * _7333]
    return 128, 
           (32 * _2213) + 160,
           (32 * _2213) + (32 * _4229) + 192,
           (32 * _2213) + (32 * _4229) + (32 * _6083) + 224,
           mem[mem[64] + 128 len (32 * _2213) + (32 * _4229) + (32 * _6083) + (32 * _7333) + 128]
}

function start(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if paused:
        revert with 0, 'Pausable: paused'
    else:
        if stor4 == 2:
            revert with 0, 'ReentrancyGuard: reentrant call'
        else:
            stor4 = 2
            if msg.value < sub_8ff382e9:
                revert with 0, 'input value too low'
            else:
                if arg2 <= 0:
                    revert with 0, 'invalid territoryId'
                else:
                    mem[100] = arg2
                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                    staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.exists(uint256 arg1) with:
                            gas gas_remaining wei
                           args arg2
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    else:
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid territoryId'
                        else:
                            mem[ceil32(return_data.size) + 96] = 0x9021453700000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 100] = arg2
                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                            staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0x90214537 with:
                                    gas gas_remaining wei
                                   args arg2
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _22 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32
                                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
                                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 127
                                _23 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 96]
                                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                else:
                                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 96])) + 97 > test266151307():
                                        revert with 0, 65
                                    else:
                                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 96])) + 97
                                        mem[(2 * ceil32(return_data.size)) + 96] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, arg2) >> 32 + 96]
                                        require _22 + _23 + 32 <= return_data.size
                                        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_23)] = mem[ceil32(return_data.size) + _22 + 128 len ceil32(_23)]
                                        if ceil32(_23) <= _23:
                                            if not _23:
                                                revert with 0, 'territory is not start'
                                            else:
                                                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = arg2
                                                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                                        gas gas_remaining wei
                                                       args arg2
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                else:
                                                    _1687 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _1689 = mem[_1687]
                                                    require mem[_1687] <= test266151307()
                                                    require _1687 + return_data.size > _1687 + mem[_1687] + 31
                                                    _1691 = mem[_1687 + mem[_1687]]
                                                    if mem[_1687 + mem[_1687]] > test266151307():
                                                        revert with 0, 65
                                                    else:
                                                        if ceil32(32 * mem[_1687 + mem[_1687]]) + 1 < 0 or _1687 + ceil32(return_data.size) + ceil32(32 * mem[_1687 + mem[_1687]]) + 1 > test266151307():
                                                            revert with 0, 65
                                                        else:
                                                            mem[64] = _1687 + ceil32(return_data.size) + ceil32(32 * mem[_1687 + mem[_1687]]) + 1
                                                            mem[_1687 + ceil32(return_data.size)] = _1691
                                                            require _1689 + (32 * _1691) + 32 <= return_data.size
                                                            mem[_1687 + ceil32(return_data.size) + 32 len 32 * _1691] = mem[_1687 + _1689 + 32 len 32 * _1691]
                                                            mem[mem[64] + 36] = this.address
                                                            mem[mem[64] + 68] = arg1
                                                            require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                            call 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.safeTransferFrom(address arg1, address arg2, uint256 arg3) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, address(this.address), arg1
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            else:
                                                                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = arg1
                                                                require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                                staticcall 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.0xa19625e8 with:
                                                                        gas gas_remaining wei
                                                                       args arg1
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                else:
                                                                    _3329 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3331 = mem[_3329]
                                                                    require mem[_3329] <= test266151307()
                                                                    require _3329 + return_data.size > _3329 + mem[_3329] + 31
                                                                    _3333 = mem[_3329 + mem[_3329]]
                                                                    if mem[_3329 + mem[_3329]] > test266151307():
                                                                        revert with 0, 65
                                                                    else:
                                                                        if ceil32(32 * mem[_3329 + mem[_3329]]) + 1 < 0 or _3329 + ceil32(return_data.size) + ceil32(32 * mem[_3329 + mem[_3329]]) + 1 > test266151307():
                                                                            revert with 0, 65
                                                                        else:
                                                                            mem[64] = _3329 + ceil32(return_data.size) + ceil32(32 * mem[_3329 + mem[_3329]]) + 1
                                                                            mem[_3329 + ceil32(return_data.size)] = _3333
                                                                            require _3331 + (32 * _3333) + 32 <= return_data.size
                                                                            mem[_3329 + ceil32(return_data.size) + 32 len 32 * _3333] = mem[_3329 + _3331 + 32 len 32 * _3333]
                                                                            if 2 >= _3333:
                                                                                revert with 0, 50
                                                                            else:
                                                                                if 0 == mem[_3329 + ceil32(return_data.size) + 96]:
                                                                                    if 2 >= _3333:
                                                                                        revert with 0, 50
                                                                                    else:
                                                                                        if mem[_3329 + ceil32(return_data.size) + 96] != 0:
                                                                                            mem[0] = msg.sender
                                                                                            mem[32] = 14
                                                                                            _4958 = mem[64]
                                                                                            mem[64] = mem[64] + 192
                                                                                            if arg1 > test266151307():
                                                                                                revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                            else:
                                                                                                mem[_4958] = uint64(arg1)
                                                                                                if arg2 > test266151307():
                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                else:
                                                                                                    mem[_4958 + 32] = uint32(arg2)
                                                                                                    if block.timestamp > test266151307():
                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                    else:
                                                                                                        mem[_4958 + 64] = uint32(block.timestamp)
                                                                                                        mem[_4958 + 96] = uint32(block.timestamp)
                                                                                                        if 0 >= _1691:
                                                                                                            revert with 0, 50
                                                                                                        else:
                                                                                                            if mem[_1687 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                            else:
                                                                                                                mem[_4958 + 128] = mem[_1687 + ceil32(return_data.size) + 60 len 4]
                                                                                                                if 3 >= _3333:
                                                                                                                    revert with 0, 50
                                                                                                                else:
                                                                                                                    if 0 >= _1691:
                                                                                                                        revert with 0, 50
                                                                                                                    else:
                                                                                                                        if mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                            if 1 == mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                else:
                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                        revert with 0, 17
                                                                                                                                    else:
                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                        stor4 = 1
                                                                                                                            else:
                                                                                                                                if mem[_1687 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                else:
                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                        else:
                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                else:
                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                        revert with 0, 17
                                                                                                                                    else:
                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                        stor4 = 1
                                                                                                                            else:
                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4958 + 156 len 4]
                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                    revert with 0, 17
                                                                                                                                else:
                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                    stor4 = 1
                                                                                        else:
                                                                                            if 2 >= _1691:
                                                                                                revert with 0, 50
                                                                                            else:
                                                                                                if 3 >= _1691:
                                                                                                    revert with 0, 50
                                                                                                else:
                                                                                                    if mem[_1687 + ceil32(return_data.size) + 128] >= mem[_1687 + ceil32(return_data.size) + 96]:
                                                                                                        revert with 0, 'exceed territory population limit'
                                                                                                    else:
                                                                                                        mem[mem[64] + 68] = 8
                                                                                                        mem[mem[64] + 100] = 4
                                                                                                        mem[mem[64] + 132] = arg2
                                                                                                        require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                                                                        call 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.0xb9c2c3b9 with:
                                                                                                             gas gas_remaining wei
                                                                                                            args arg1, 0, 8, 4, arg2
                                                                                                        if not ext_call.success:
                                                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                                                        else:
                                                                                                            mem[mem[64]] = 0x8ab14c4900000000000000000000000000000000000000000000000000000000
                                                                                                            mem[mem[64] + 4] = arg1
                                                                                                            mem[mem[64] + 36] = arg2
                                                                                                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                                                                                            call ????????????????????????????????????????.0x8ab14c49 with:
                                                                                                                 gas gas_remaining wei
                                                                                                                args arg1, arg2
                                                                                                            if not ext_call.success:
                                                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                                                            else:
                                                                                                                mem[0] = msg.sender
                                                                                                                mem[32] = 14
                                                                                                                _5037 = mem[64]
                                                                                                                mem[64] = mem[64] + 192
                                                                                                                if arg1 > test266151307():
                                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                                                else:
                                                                                                                    mem[_5037] = uint64(arg1)
                                                                                                                    if arg2 > test266151307():
                                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                    else:
                                                                                                                        mem[_5037 + 32] = uint32(arg2)
                                                                                                                        if block.timestamp > test266151307():
                                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                        else:
                                                                                                                            mem[_5037 + 64] = uint32(block.timestamp)
                                                                                                                            mem[_5037 + 96] = uint32(block.timestamp)
                                                                                                                            if 0 >= _1691:
                                                                                                                                revert with 0, 50
                                                                                                                            else:
                                                                                                                                if mem[_1687 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                                else:
                                                                                                                                    mem[_5037 + 128] = mem[_1687 + ceil32(return_data.size) + 60 len 4]
                                                                                                                                    if 3 >= _3333:
                                                                                                                                        revert with 0, 50
                                                                                                                                    else:
                                                                                                                                        if 0 >= _1691:
                                                                                                                                            revert with 0, 50
                                                                                                                                        else:
                                                                                                                                            if mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                                if 1 == mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    if mem[_1687 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                            else:
                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5037 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                else:
                                                                                    if 2 >= _3333:
                                                                                        revert with 0, 50
                                                                                    else:
                                                                                        if mem[_3329 + ceil32(return_data.size) + 96] != arg2:
                                                                                            revert with 0, 'incorrect territory'
                                                                                        else:
                                                                                            if 2 >= _3333:
                                                                                                revert with 0, 50
                                                                                            else:
                                                                                                if mem[_3329 + ceil32(return_data.size) + 96] != 0:
                                                                                                    mem[0] = msg.sender
                                                                                                    mem[32] = 14
                                                                                                    _4978 = mem[64]
                                                                                                    mem[64] = mem[64] + 192
                                                                                                    if arg1 > test266151307():
                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                                    else:
                                                                                                        mem[_4978] = uint64(arg1)
                                                                                                        if arg2 > test266151307():
                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                        else:
                                                                                                            mem[_4978 + 32] = uint32(arg2)
                                                                                                            if block.timestamp > test266151307():
                                                                                                                revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                            else:
                                                                                                                mem[_4978 + 64] = uint32(block.timestamp)
                                                                                                                mem[_4978 + 96] = uint32(block.timestamp)
                                                                                                                if 0 >= _1691:
                                                                                                                    revert with 0, 50
                                                                                                                else:
                                                                                                                    if mem[_1687 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                    else:
                                                                                                                        mem[_4978 + 128] = mem[_1687 + ceil32(return_data.size) + 60 len 4]
                                                                                                                        if 3 >= _3333:
                                                                                                                            revert with 0, 50
                                                                                                                        else:
                                                                                                                            if 0 >= _1691:
                                                                                                                                revert with 0, 50
                                                                                                                            else:
                                                                                                                                if mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                    if 1 == mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        if mem[_1687 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                else:
                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4978 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                else:
                                                                                                    if 2 >= _1691:
                                                                                                        revert with 0, 50
                                                                                                    else:
                                                                                                        if 3 >= _1691:
                                                                                                            revert with 0, 50
                                                                                                        else:
                                                                                                            if mem[_1687 + ceil32(return_data.size) + 128] >= mem[_1687 + ceil32(return_data.size) + 96]:
                                                                                                                revert with 0, 'exceed territory population limit'
                                                                                                            else:
                                                                                                                mem[mem[64] + 68] = 8
                                                                                                                mem[mem[64] + 100] = 4
                                                                                                                mem[mem[64] + 132] = arg2
                                                                                                                require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                                                                                call 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.0xb9c2c3b9 with:
                                                                                                                     gas gas_remaining wei
                                                                                                                    args arg1, 0, 8, 4, arg2
                                                                                                                if not ext_call.success:
                                                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                                                else:
                                                                                                                    mem[mem[64]] = 0x8ab14c4900000000000000000000000000000000000000000000000000000000
                                                                                                                    mem[mem[64] + 4] = arg1
                                                                                                                    mem[mem[64] + 36] = arg2
                                                                                                                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                                                                                                    call ????????????????????????????????????????.0x8ab14c49 with:
                                                                                                                         gas gas_remaining wei
                                                                                                                        args arg1, arg2
                                                                                                                    if not ext_call.success:
                                                                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                                                                    else:
                                                                                                                        mem[0] = msg.sender
                                                                                                                        mem[32] = 14
                                                                                                                        _5048 = mem[64]
                                                                                                                        mem[64] = mem[64] + 192
                                                                                                                        if arg1 > test266151307():
                                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                                                        else:
                                                                                                                            mem[_5048] = uint64(arg1)
                                                                                                                            if arg2 > test266151307():
                                                                                                                                revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                            else:
                                                                                                                                mem[_5048 + 32] = uint32(arg2)
                                                                                                                                if block.timestamp > test266151307():
                                                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                                else:
                                                                                                                                    mem[_5048 + 64] = uint32(block.timestamp)
                                                                                                                                    mem[_5048 + 96] = uint32(block.timestamp)
                                                                                                                                    if 0 >= _1691:
                                                                                                                                        revert with 0, 50
                                                                                                                                    else:
                                                                                                                                        if mem[_1687 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                                        else:
                                                                                                                                            mem[_5048 + 128] = mem[_1687 + ceil32(return_data.size) + 60 len 4]
                                                                                                                                            if 3 >= _3333:
                                                                                                                                                revert with 0, 50
                                                                                                                                            else:
                                                                                                                                                if 0 >= _1691:
                                                                                                                                                    revert with 0, 50
                                                                                                                                                else:
                                                                                                                                                    if mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                                        if 1 == mem[_1687 + ceil32(return_data.size) + 32]:
                                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                    else:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            if mem[_1687 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                        else:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                    else:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                                    if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                        else:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                    else:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        if mem[_3329 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                            if mem[_3329 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                if mem[_3329 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5048 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                        else:
                                            mem[_23 + (2 * ceil32(return_data.size)) + 128] = 0
                                            if not _23:
                                                revert with 0, 'territory is not start'
                                            else:
                                                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = arg2
                                                require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                                staticcall 0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6.0xa19625e8 with:
                                                        gas gas_remaining wei
                                                       args arg2
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                else:
                                                    _1688 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _1690 = mem[_1688]
                                                    require mem[_1688] <= test266151307()
                                                    require _1688 + return_data.size > _1688 + mem[_1688] + 31
                                                    _1692 = mem[_1688 + mem[_1688]]
                                                    if mem[_1688 + mem[_1688]] > test266151307():
                                                        revert with 0, 65
                                                    else:
                                                        if ceil32(32 * mem[_1688 + mem[_1688]]) + 1 < 0 or _1688 + ceil32(return_data.size) + ceil32(32 * mem[_1688 + mem[_1688]]) + 1 > test266151307():
                                                            revert with 0, 65
                                                        else:
                                                            mem[64] = _1688 + ceil32(return_data.size) + ceil32(32 * mem[_1688 + mem[_1688]]) + 1
                                                            mem[_1688 + ceil32(return_data.size)] = _1692
                                                            require _1690 + (32 * _1692) + 32 <= return_data.size
                                                            mem[_1688 + ceil32(return_data.size) + 32 len 32 * _1692] = mem[_1688 + _1690 + 32 len 32 * _1692]
                                                            mem[mem[64] + 36] = this.address
                                                            mem[mem[64] + 68] = arg1
                                                            require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                            call 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.safeTransferFrom(address arg1, address arg2, uint256 arg3) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, address(this.address), arg1
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            else:
                                                                mem[mem[64]] = 0xa19625e800000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = arg1
                                                                require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                                staticcall 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.0xa19625e8 with:
                                                                        gas gas_remaining wei
                                                                       args arg1
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                else:
                                                                    _3330 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3332 = mem[_3330]
                                                                    require mem[_3330] <= test266151307()
                                                                    require _3330 + return_data.size > _3330 + mem[_3330] + 31
                                                                    _3334 = mem[_3330 + mem[_3330]]
                                                                    if mem[_3330 + mem[_3330]] > test266151307():
                                                                        revert with 0, 65
                                                                    else:
                                                                        if ceil32(32 * mem[_3330 + mem[_3330]]) + 1 < 0 or _3330 + ceil32(return_data.size) + ceil32(32 * mem[_3330 + mem[_3330]]) + 1 > test266151307():
                                                                            revert with 0, 65
                                                                        else:
                                                                            mem[64] = _3330 + ceil32(return_data.size) + ceil32(32 * mem[_3330 + mem[_3330]]) + 1
                                                                            mem[_3330 + ceil32(return_data.size)] = _3334
                                                                            require _3332 + (32 * _3334) + 32 <= return_data.size
                                                                            mem[_3330 + ceil32(return_data.size) + 32 len 32 * _3334] = mem[_3330 + _3332 + 32 len 32 * _3334]
                                                                            if 2 >= _3334:
                                                                                revert with 0, 50
                                                                            else:
                                                                                if 0 == mem[_3330 + ceil32(return_data.size) + 96]:
                                                                                    if 2 >= _3334:
                                                                                        revert with 0, 50
                                                                                    else:
                                                                                        if mem[_3330 + ceil32(return_data.size) + 96] != 0:
                                                                                            mem[0] = msg.sender
                                                                                            mem[32] = 14
                                                                                            _4963 = mem[64]
                                                                                            mem[64] = mem[64] + 192
                                                                                            if arg1 > test266151307():
                                                                                                revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                            else:
                                                                                                mem[_4963] = uint64(arg1)
                                                                                                if arg2 > test266151307():
                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                else:
                                                                                                    mem[_4963 + 32] = uint32(arg2)
                                                                                                    if block.timestamp > test266151307():
                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                    else:
                                                                                                        mem[_4963 + 64] = uint32(block.timestamp)
                                                                                                        mem[_4963 + 96] = uint32(block.timestamp)
                                                                                                        if 0 >= _1692:
                                                                                                            revert with 0, 50
                                                                                                        else:
                                                                                                            if mem[_1688 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                            else:
                                                                                                                mem[_4963 + 128] = mem[_1688 + ceil32(return_data.size) + 60 len 4]
                                                                                                                if 3 >= _3334:
                                                                                                                    revert with 0, 50
                                                                                                                else:
                                                                                                                    if 0 >= _1692:
                                                                                                                        revert with 0, 50
                                                                                                                    else:
                                                                                                                        if mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                            if 1 == mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                else:
                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                        revert with 0, 17
                                                                                                                                    else:
                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                        stor4 = 1
                                                                                                                            else:
                                                                                                                                if mem[_1688 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                else:
                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                        else:
                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                                                else:
                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                        revert with 0, 17
                                                                                                                                    else:
                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                        stor4 = 1
                                                                                                                            else:
                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4963 + 156 len 4]
                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                    revert with 0, 17
                                                                                                                                else:
                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                    stor4 = 1
                                                                                        else:
                                                                                            if 2 >= _1692:
                                                                                                revert with 0, 50
                                                                                            else:
                                                                                                if 3 >= _1692:
                                                                                                    revert with 0, 50
                                                                                                else:
                                                                                                    if mem[_1688 + ceil32(return_data.size) + 128] >= mem[_1688 + ceil32(return_data.size) + 96]:
                                                                                                        revert with 0, 'exceed territory population limit'
                                                                                                    else:
                                                                                                        mem[mem[64] + 68] = 8
                                                                                                        mem[mem[64] + 100] = 4
                                                                                                        mem[mem[64] + 132] = arg2
                                                                                                        require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                                                                        call 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.0xb9c2c3b9 with:
                                                                                                             gas gas_remaining wei
                                                                                                            args arg1, 0, 8, 4, arg2
                                                                                                        if not ext_call.success:
                                                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                                                        else:
                                                                                                            mem[mem[64]] = 0x8ab14c4900000000000000000000000000000000000000000000000000000000
                                                                                                            mem[mem[64] + 4] = arg1
                                                                                                            mem[mem[64] + 36] = arg2
                                                                                                            require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                                                                                            call ????????????????????????????????????????.0x8ab14c49 with:
                                                                                                                 gas gas_remaining wei
                                                                                                                args arg1, arg2
                                                                                                            if not ext_call.success:
                                                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                                                            else:
                                                                                                                mem[0] = msg.sender
                                                                                                                mem[32] = 14
                                                                                                                _5041 = mem[64]
                                                                                                                mem[64] = mem[64] + 192
                                                                                                                if arg1 > test266151307():
                                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                                                else:
                                                                                                                    mem[_5041] = uint64(arg1)
                                                                                                                    if arg2 > test266151307():
                                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                    else:
                                                                                                                        mem[_5041 + 32] = uint32(arg2)
                                                                                                                        if block.timestamp > test266151307():
                                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                        else:
                                                                                                                            mem[_5041 + 64] = uint32(block.timestamp)
                                                                                                                            mem[_5041 + 96] = uint32(block.timestamp)
                                                                                                                            if 0 >= _1692:
                                                                                                                                revert with 0, 50
                                                                                                                            else:
                                                                                                                                if mem[_1688 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                                else:
                                                                                                                                    mem[_5041 + 128] = mem[_1688 + ceil32(return_data.size) + 60 len 4]
                                                                                                                                    if 3 >= _3334:
                                                                                                                                        revert with 0, 50
                                                                                                                                    else:
                                                                                                                                        if 0 >= _1692:
                                                                                                                                            revert with 0, 50
                                                                                                                                        else:
                                                                                                                                            if mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                                if 1 == mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    if mem[_1688 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                            else:
                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5041 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                else:
                                                                                    if 2 >= _3334:
                                                                                        revert with 0, 50
                                                                                    else:
                                                                                        if mem[_3330 + ceil32(return_data.size) + 96] != arg2:
                                                                                            revert with 0, 'incorrect territory'
                                                                                        else:
                                                                                            if 2 >= _3334:
                                                                                                revert with 0, 50
                                                                                            else:
                                                                                                if mem[_3330 + ceil32(return_data.size) + 96] != 0:
                                                                                                    mem[0] = msg.sender
                                                                                                    mem[32] = 14
                                                                                                    _4983 = mem[64]
                                                                                                    mem[64] = mem[64] + 192
                                                                                                    if arg1 > test266151307():
                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                                    else:
                                                                                                        mem[_4983] = uint64(arg1)
                                                                                                        if arg2 > test266151307():
                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                        else:
                                                                                                            mem[_4983 + 32] = uint32(arg2)
                                                                                                            if block.timestamp > test266151307():
                                                                                                                revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                            else:
                                                                                                                mem[_4983 + 64] = uint32(block.timestamp)
                                                                                                                mem[_4983 + 96] = uint32(block.timestamp)
                                                                                                                if 0 >= _1692:
                                                                                                                    revert with 0, 50
                                                                                                                else:
                                                                                                                    if mem[_1688 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                        revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                    else:
                                                                                                                        mem[_4983 + 128] = mem[_1688 + ceil32(return_data.size) + 60 len 4]
                                                                                                                        if 3 >= _3334:
                                                                                                                            revert with 0, 50
                                                                                                                        else:
                                                                                                                            if 0 >= _1692:
                                                                                                                                revert with 0, 50
                                                                                                                            else:
                                                                                                                                if mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                    if 1 == mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        if mem[_1688 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                            revert with 0, 17
                                                                                                                                                        else:
                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                            stor4 = 1
                                                                                                                                                else:
                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                        revert with 0, 17
                                                                                                                                                    else:
                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                        stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                else:
                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                            else:
                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                    revert with 0, 17
                                                                                                                                                else:
                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                    stor4 = 1
                                                                                                                                        else:
                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                revert with 0, 17
                                                                                                                                            else:
                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                stor4 = 1
                                                                                                                                    else:
                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_4983 + 156 len 4]
                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                            revert with 0, 17
                                                                                                                                        else:
                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                            stor4 = 1
                                                                                                else:
                                                                                                    if 2 >= _1692:
                                                                                                        revert with 0, 50
                                                                                                    else:
                                                                                                        if 3 >= _1692:
                                                                                                            revert with 0, 50
                                                                                                        else:
                                                                                                            if mem[_1688 + ceil32(return_data.size) + 128] >= mem[_1688 + ceil32(return_data.size) + 96]:
                                                                                                                revert with 0, 'exceed territory population limit'
                                                                                                            else:
                                                                                                                mem[mem[64] + 68] = 8
                                                                                                                mem[mem[64] + 100] = 4
                                                                                                                mem[mem[64] + 132] = arg2
                                                                                                                require ext_code.size(0xf693e596a2e86ad229fb638e2b7f99a4bd166f39)
                                                                                                                call 0xf693e596a2e86ad229fb638e2b7f99a4bd166f39.0xb9c2c3b9 with:
                                                                                                                     gas gas_remaining wei
                                                                                                                    args arg1, 0, 8, 4, arg2
                                                                                                                if not ext_call.success:
                                                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                                                else:
                                                                                                                    mem[mem[64]] = 0x8ab14c4900000000000000000000000000000000000000000000000000000000
                                                                                                                    mem[mem[64] + 4] = arg1
                                                                                                                    mem[mem[64] + 36] = arg2
                                                                                                                    require ext_code.size(0xfe0000000000000000000000008fbe8d8e4723dea859610467c8eff84eaab6c6)
                                                                                                                    call ????????????????????????????????????????.0x8ab14c49 with:
                                                                                                                         gas gas_remaining wei
                                                                                                                        args arg1, arg2
                                                                                                                    if not ext_call.success:
                                                                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                                                                    else:
                                                                                                                        mem[0] = msg.sender
                                                                                                                        mem[32] = 14
                                                                                                                        _5052 = mem[64]
                                                                                                                        mem[64] = mem[64] + 192
                                                                                                                        if arg1 > test266151307():
                                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 64 bits'
                                                                                                                        else:
                                                                                                                            mem[_5052] = uint64(arg1)
                                                                                                                            if arg2 > test266151307():
                                                                                                                                revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                            else:
                                                                                                                                mem[_5052 + 32] = uint32(arg2)
                                                                                                                                if block.timestamp > test266151307():
                                                                                                                                    revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                                else:
                                                                                                                                    mem[_5052 + 64] = uint32(block.timestamp)
                                                                                                                                    mem[_5052 + 96] = uint32(block.timestamp)
                                                                                                                                    if 0 >= _1692:
                                                                                                                                        revert with 0, 50
                                                                                                                                    else:
                                                                                                                                        if mem[_1688 + ceil32(return_data.size) + 32] > test266151307():
                                                                                                                                            revert with 0, 'SafeCast: value doesn't fit in 32 bits'
                                                                                                                                        else:
                                                                                                                                            mem[_5052 + 128] = mem[_1688 + ceil32(return_data.size) + 60 len 4]
                                                                                                                                            if 3 >= _3334:
                                                                                                                                                revert with 0, 50
                                                                                                                                            else:
                                                                                                                                                if 0 >= _1692:
                                                                                                                                                    revert with 0, 50
                                                                                                                                                else:
                                                                                                                                                    if mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                                        if 1 == mem[_1688 + ceil32(return_data.size) + 32]:
                                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                    else:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            if mem[_1688 + ceil32(return_data.size) + 32] != 2:
                                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                        else:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                            Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                    else:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                        Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                    Mask(96, 0, sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_512 % 1 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                                    if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                        else:
                                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 7629394531250
                                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                                revert with 0, 17
                                                                                                                                                                            else:
                                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                                stor4 = 1
                                                                                                                                                                    else:
                                                                                                                                                                        uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                        uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                        sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 3051757812500
                                                                                                                                                                        uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                        if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                            revert with 0, 17
                                                                                                                                                                        else:
                                                                                                                                                                            sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                            emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                            stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 1525878906250
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                    else:
                                                                                                                                                        if mem[_3330 + ceil32(return_data.size) + 128] >= 21:
                                                                                                                                                            if mem[_3330 + ceil32(return_data.size) + 128] >= 41:
                                                                                                                                                                if mem[_3330 + ceil32(return_data.size) + 128] >= 51:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                                else:
                                                                                                                                                                    uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                    uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                    uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 72057594037927936 = 381469726562500
                                                                                                                                                                    sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_328 % 16777216 = 0
                                                                                                                                                                    if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                        revert with 0, 17
                                                                                                                                                                    else:
                                                                                                                                                                        sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                        emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                        stor4 = 1
                                                                                                                                                            else:
                                                                                                                                                                uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                                uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                                sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 152587890625000
                                                                                                                                                                uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                                if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                    revert with 0, 17
                                                                                                                                                                else:
                                                                                                                                                                    sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                    emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                    stor4 = 1
                                                                                                                                                        else:
                                                                                                                                                            uint64(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_0) = uint64(arg1)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_64) = uint32(arg2)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_96) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_128) = uint32(block.timestamp)
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_160) = mem[_5052 + 156 len 4]
                                                                                                                                                            uint16(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_256) = 0
                                                                                                                                                            sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_272 % 281474976710656 = 76293945312500
                                                                                                                                                            uint32(sub_b90aa6d2[address(msg.sender)][stor14[address(msg.sender)]].field_320) = 0
                                                                                                                                                            if 1 > !sub_7cc60a9e[address(msg.sender)]:
                                                                                                                                                                revert with 0, 17
                                                                                                                                                            else:
                                                                                                                                                                sub_7cc60a9e[address(msg.sender)]++
                                                                                                                                                                emit 0xd87c20b5: msg.sender, sub_7cc60a9e[address(msg.sender)], arg1, arg2
                                                                                                                                                                stor4 = 1
}



}
