contract main {




// =====================  Runtime code  =====================


#
#  - sub_0cffc676(?)
#  - sub_0ddeb327(?)
#
const sub_2c7769b2(?) = 0

const int_max = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

const originationFee = 0

const sub_e03368c1(?) = 10^18

const sub_ea3a4c60(?) = 10^18


uint8 stor0;
uint32 stor0;
address stor0;
address adminAddress; offset 8
uint256 stor0;
uint256 stor0; offset 8
address proposedAdminAddress;
array of struct sub_4100b9f0;
mapping of struct sub_feb59ccf;
mapping of struct sub_4613f127;
uint256 sub_d3339024;
mapping of address accounts;
mapping of uint256 indexes;
uint256 index;
mapping of struct sub_de6843c3;
array of address collateralTokens;
array of uint256 stor11;

function collateralTokens(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 < collateralTokens.length
    return collateralTokens[arg1]
}

function index() {
    return index
}

function indexes(address arg1) {
    require calldata.size - 4 >= 32
    return indexes[arg1]
}

function proposedAdmin() {
    return proposedAdminAddress
}

function sub_4100b9f0(?) {
    require calldata.size - 4 >= 64
    return sub_4100b9f0[arg1][arg2].field_0, sub_4100b9f0[arg1][arg2].field_256, sub_4100b9f0[arg1][arg2].field_512
}

function sub_4613f127(?) {
    require calldata.size - 4 >= 32
    return address(sub_4613f127[arg1].field_0), 
           address(sub_4613f127[arg1].field_256),
           address(sub_4613f127[arg1].field_512),
           address(sub_4613f127[arg1].field_768),
           sub_4613f127[arg1].field_1024,
           sub_4613f127[arg1].field_1280,
           sub_4613f127[arg1].field_1536
}

function getCollateralMarketsLength() {
    return collateralTokens.length
}

function sub_b19322a6(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1280, sub_de6843c3[address(arg2)].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg2)][address(arg1)].field_0, sub_4100b9f0[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    return ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816, 
           ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816
}

function oracleInstance() {
    return address(stor11.length)
}

function sub_d3339024(?) {
    return sub_d3339024
}

function sub_de6843c3(?) {
    require calldata.size - 4 >= 32
    return sub_de6843c3[arg1].field_0, 
           sub_de6843c3[arg1].field_256,
           sub_de6843c3[arg1].field_512,
           address(sub_de6843c3[arg1].field_768),
           sub_de6843c3[arg1].field_1024,
           sub_de6843c3[arg1].field_1280,
           sub_de6843c3[arg1].field_1536,
           sub_de6843c3[arg1].field_1792,
           sub_de6843c3[arg1].field_2048,
           sub_de6843c3[arg1].field_2304,
           sub_de6843c3[arg1].field_2560,
           sub_de6843c3[arg1].field_2816
}

function accounts(uint256 arg1) {
    require calldata.size - 4 >= 32
    return accounts[arg1]
}

function admin() {
    return adminAddress
}

function sub_feb59ccf(?) {
    require calldata.size - 4 >= 64
    return sub_feb59ccf[arg1][arg2].field_0, sub_feb59ccf[arg1][arg2].field_256, sub_feb59ccf[arg1][arg2].field_512
}

function _fallback() payable {
    revert
}

function setOracle(address arg1) {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    address(stor11.length) = arg1
}

function proposeNewAdmin(address arg1) {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    proposedAdminAddress = arg1
}

function sub_7e67e5ce(?) {
    require calldata.size - 4 >= 64
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    sub_de6843c3[address(arg1)].field_2816 = arg2
}

function sub_bbde0102(?) {
    require calldata.size - 4 >= 64
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    sub_de6843c3[address(arg1)].field_2304 = arg2
}

function claimAdministration() {
    if proposedAdminAddress != msg.sender:
        revert with 0, 'Not proposed admin.'
    Mask(248, 0, stor0.field_8) = proposedAdminAddress
    proposedAdminAddress = 0
}

function sub_17585b12(?) {
    require calldata.size - 4 >= 64
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    address(sub_de6843c3[address(arg1)].field_768) = arg2
}

function sub_c92fcfb3(?) {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    sub_de6843c3[address(arg1)].field_0 = block.timestamp
}

function sub_1b6a935e(?) {
    require calldata.size - 4 >= 32
    if not arg1:
        return 0
    if 10^18 * arg1 / arg1 != 10^18:
        revert with 0, 'uint mul overflow'
    return (10^18 * arg1 / 10^18)
}

function setLiquidationDiscount(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    sub_de6843c3[address(arg1)].field_2560 = arg2
}

function addCollateralMarket(address arg1) {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    idx = 0
    while idx < collateralTokens.length:
        mem[0] = 10
        if collateralTokens[idx] != arg1:
            idx = idx + 1
            continue 
    collateralTokens.length++
    collateralTokens[collateralTokens.length] = arg1
}

function getCash(address arg1) {
    require calldata.size - 4 >= 32
    if not arg1:
        return eth.balance(this.address)
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function fetchAssetPrice(address arg1) {
    require calldata.size - 4 >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    return ext_call.return_data[0], bool(ext_call.return_data[32])
}

function sub_27001627(?) {
    require calldata.size - 4 >= 32
    if not sub_de6843c3[address(arg1)].field_1536:
        if not sub_de6843c3[address(arg1)].field_1024:
            revert with 0, 'uint div by zero'
        return (0 / sub_de6843c3[address(arg1)].field_1024)
    if 10^18 * sub_de6843c3[address(arg1)].field_1536 / sub_de6843c3[address(arg1)].field_1536 != 10^18:
        revert with 0, 'uint mul overflow'
    if not sub_de6843c3[address(arg1)].field_1024:
        revert with 0, 'uint div by zero'
    return (10^18 * sub_de6843c3[address(arg1)].field_1536 / sub_de6843c3[address(arg1)].field_1024)
}

function getPriceForAssetAmount(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if arg2 * ext_call.return_data[0] / ext_call.return_data[0] != arg2:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg1)].field_2816:
        revert with 0, 'uint div by zero'
    return (arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816)
}

function sub_9c74acda(?) {
    require calldata.size - 4 >= 64
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if not arg2:
        if not ext_call.return_data[0]:
            revert with 0, 'uint div by zero'
        return (0 / ext_call.return_data[0])
    if 10^sub_de6843c3[address(arg1)].field_2816 * arg2 / arg2 != 10^sub_de6843c3[address(arg1)].field_2816:
        revert with 0, 'uint mul overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'uint div by zero'
    return (10^sub_de6843c3[address(arg1)].field_2816 * arg2 / ext_call.return_data[0])
}

function getBorrowBalance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getSupplyBalance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1280, sub_de6843c3[address(arg2)].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg2)][address(arg1)].field_0, sub_4100b9f0[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getPriceForAssetAmountMulCollatRatio(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if arg2 * ext_call.return_data[0] / ext_call.return_data[0] != arg2:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg1)].field_2816:
        revert with 0, 'uint div by zero'
    if not arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
        return 0
    if sub_de6843c3[address(arg1)].field_2304 * arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816 / arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816 != sub_de6843c3[address(arg1)].field_2304:
        revert with 0, 'uint mul overflow'
    return (sub_de6843c3[address(arg1)].field_2304 * arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816 / 10^18)
}

function sub_332279b1(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] + sub_feb59ccf[address(arg2)][address(arg1)].field_512 < sub_feb59ccf[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint add overflow'
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > ext_call.return_data[0] + sub_feb59ccf[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint sub overflow'
    return (ext_call.return_data[0] + sub_feb59ccf[address(arg2)][address(arg1)].field_512 - sub_feb59ccf[address(arg2)][address(arg1)].field_0)
}

function sub_3c03d33e(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1280, sub_de6843c3[address(arg2)].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg2)][address(arg1)].field_0, sub_4100b9f0[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= sub_4100b9f0[address(arg2)][address(arg1)].field_0:
        return sub_4100b9f0[address(arg2)][address(arg1)].field_512
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > ext_call.return_data[0]:
        revert with 0, 'uint sub overflow'
    if ext_call.return_data[0] - sub_4100b9f0[address(arg2)][address(arg1)].field_0 + sub_4100b9f0[address(arg2)][address(arg1)].field_512 < sub_4100b9f0[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint add overflow'
    return (ext_call.return_data[0] - sub_4100b9f0[address(arg2)][address(arg1)].field_0 + sub_4100b9f0[address(arg2)][address(arg1)].field_512)
}

function sub_1925a751(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1280, sub_de6843c3[address(arg2)].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg2)][address(arg1)].field_0, sub_4100b9f0[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816)
}

function sub_3cb7317b(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816)
}

function sub_d7d9dba0(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816:
        return 0
    if sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816 != sub_de6843c3[address(arg2)].field_2304:
        revert with 0, 'uint mul overflow'
    return (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816 / 10^18)
}

function sub_53131ab5(?) {
    require calldata.size - 4 >= 128
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    if not address(stor11.length):
        address(stor11.length) = arg3
    if address(sub_de6843c3[address(arg1)].field_768):
    else:
        address(sub_de6843c3[address(arg1)].field_768) = arg2
    idx = 0
    while idx < collateralTokens.length:
        mem[0] = 10
        if collateralTokens[idx] != arg1:
            idx = idx + 1
            continue 
        address(sub_de6843c3[address(arg1)].field_768) = address(sub_de6843c3[address(arg1)].field_768)
        if sub_de6843c3[address(arg1)].field_1280:
            if sub_de6843c3[address(arg1)].field_1792:
                if sub_de6843c3[address(arg1)].field_2816:
                else:
                    sub_de6843c3[address(arg1)].field_2816 = arg4
            else:
                sub_de6843c3[address(arg1)].field_1792 = 10^18
                if sub_de6843c3[address(arg1)].field_2816:
                else:
                    sub_de6843c3[address(arg1)].field_2816 = arg4
        else:
            sub_de6843c3[address(arg1)].field_1280 = 10^18
            if sub_de6843c3[address(arg1)].field_1792:
                if sub_de6843c3[address(arg1)].field_2816:
                else:
                    sub_de6843c3[address(arg1)].field_2816 = arg4
            else:
                sub_de6843c3[address(arg1)].field_1792 = 10^18
                if sub_de6843c3[address(arg1)].field_2816:
                else:
                    sub_de6843c3[address(arg1)].field_2816 = arg4
    collateralTokens.length++
    collateralTokens[collateralTokens.length] = arg1
    address(sub_de6843c3[address(arg1)].field_768) = address(sub_de6843c3[address(arg1)].field_768)
    if sub_de6843c3[address(arg1)].field_1280:
        if sub_de6843c3[address(arg1)].field_1792:
            if sub_de6843c3[address(arg1)].field_2816:
            else:
                sub_de6843c3[address(arg1)].field_2816 = arg4
        else:
            sub_de6843c3[address(arg1)].field_1792 = 10^18
            if sub_de6843c3[address(arg1)].field_2816:
            else:
                sub_de6843c3[address(arg1)].field_2816 = arg4
    else:
        sub_de6843c3[address(arg1)].field_1280 = 10^18
        if sub_de6843c3[address(arg1)].field_1792:
            if sub_de6843c3[address(arg1)].field_2816:
            else:
                sub_de6843c3[address(arg1)].field_2816 = arg4
        else:
            sub_de6843c3[address(arg1)].field_1792 = 10^18
            if sub_de6843c3[address(arg1)].field_2816:
            else:
                sub_de6843c3[address(arg1)].field_2816 = arg4
}

function sub_8cd3b022(?) {
    require calldata.size - 4 >= 160
    if sub_de6843c3[address(arg1)].field_2560 + 10^18 < 10^18:
        revert with 0, 'uint add overflow'
    if not arg5:
        if not sub_de6843c3[address(arg1)].field_2560 + 10^18:
            revert with 0, 'uint div by zero'
        if (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / sub_de6843c3[address(arg1)].field_2560 + 10^18 != arg3:
            revert with 0, 'uint mul overflow'
        if not (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18:
            revert with 0, 'uint div by zero'
        if not 0 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18:
            if not 10^sub_de6843c3[address(arg2)].field_2816:
                revert with 0, 'uint div by zero'
            return (0 / 10^sub_de6843c3[address(arg2)].field_2816)
        if 10^sub_de6843c3[address(arg1)].field_2816 * 0 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18 / 0 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18 != 10^sub_de6843c3[address(arg1)].field_2816:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[address(arg2)].field_2816:
            revert with 0, 'uint div by zero'
        return (10^sub_de6843c3[address(arg1)].field_2816 * 0 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18 / 10^sub_de6843c3[address(arg2)].field_2816)
    if arg4 * arg5 / arg5 != arg4:
        revert with 0, 'uint mul overflow'
    if not sub_de6843c3[address(arg1)].field_2560 + 10^18:
        revert with 0, 'uint div by zero'
    if (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / sub_de6843c3[address(arg1)].field_2560 + 10^18 != arg3:
        revert with 0, 'uint mul overflow'
    if not (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18:
        revert with 0, 'uint div by zero'
    if not arg4 * arg5 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18:
        if not 10^sub_de6843c3[address(arg2)].field_2816:
            revert with 0, 'uint div by zero'
        return (0 / 10^sub_de6843c3[address(arg2)].field_2816)
    if 10^sub_de6843c3[address(arg1)].field_2816 * arg4 * arg5 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18 / arg4 * arg5 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18 != 10^sub_de6843c3[address(arg1)].field_2816:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    return (10^sub_de6843c3[address(arg1)].field_2816 * arg4 * arg5 / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / 10^18 / 10^sub_de6843c3[address(arg2)].field_2816)
}

function sub_6e04d137(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] + sub_feb59ccf[address(arg2)][address(arg1)].field_512 < sub_feb59ccf[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint add overflow'
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > ext_call.return_data[0] + sub_feb59ccf[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint sub overflow'
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if (ext_call.return_data[0] * ext_call.return_data[0]) + (sub_feb59ccf[address(arg2)][address(arg1)].field_512 * ext_call.return_data[0]) - (sub_feb59ccf[address(arg2)][address(arg1)].field_0 * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0] + sub_feb59ccf[address(arg2)][address(arg1)].field_512 - sub_feb59ccf[address(arg2)][address(arg1)].field_0:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    return ((ext_call.return_data[0] * ext_call.return_data[0]) + (sub_feb59ccf[address(arg2)][address(arg1)].field_512 * ext_call.return_data[0]) - (sub_feb59ccf[address(arg2)][address(arg1)].field_0 * ext_call.return_data[0]) / 10^sub_de6843c3[address(arg2)].field_2816)
}

function sub_7701d0bd(?) {
    require calldata.size - 4 >= 160
    if sub_de6843c3[address(arg1)].field_2560 + 10^18 < 10^18:
        revert with 0, 'uint add overflow'
    if not arg3:
        if not arg4:
            revert with 0, 'uint div by zero'
        if not 0 / arg4 / 10^18:
            if not 10^sub_de6843c3[address(arg1)].field_2816:
                revert with 0, 'uint div by zero'
            return (0 / 10^sub_de6843c3[address(arg1)].field_2816)
        if 10^sub_de6843c3[address(arg2)].field_2816 * 0 / arg4 / 10^18 / 0 / arg4 / 10^18 != 10^sub_de6843c3[address(arg2)].field_2816:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[address(arg1)].field_2816:
            revert with 0, 'uint div by zero'
        return (10^sub_de6843c3[address(arg2)].field_2816 * 0 / arg4 / 10^18 / 10^sub_de6843c3[address(arg1)].field_2816)
    if (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) / arg3 != sub_de6843c3[address(arg1)].field_2560 + 10^18:
        revert with 0, 'uint mul overflow'
    if not (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3):
        if not arg4:
            revert with 0, 'uint div by zero'
        if not 0 / arg4 / 10^18:
            if not 10^sub_de6843c3[address(arg1)].field_2816:
                revert with 0, 'uint div by zero'
            return (0 / 10^sub_de6843c3[address(arg1)].field_2816)
        if 10^sub_de6843c3[address(arg2)].field_2816 * 0 / arg4 / 10^18 / 0 / arg4 / 10^18 != 10^sub_de6843c3[address(arg2)].field_2816:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[address(arg1)].field_2816:
            revert with 0, 'uint div by zero'
        return (10^sub_de6843c3[address(arg2)].field_2816 * 0 / arg4 / 10^18 / 10^sub_de6843c3[address(arg1)].field_2816)
    if (10^18 * arg3 * arg5) + (sub_de6843c3[address(arg1)].field_2560 * arg3 * arg5) / (10^18 * arg3) + (sub_de6843c3[address(arg1)].field_2560 * arg3) != arg5:
        revert with 0, 'uint mul overflow'
    if not arg4:
        revert with 0, 'uint div by zero'
    if not (10^18 * arg3 * arg5) + (sub_de6843c3[address(arg1)].field_2560 * arg3 * arg5) / arg4 / 10^18:
        if not 10^sub_de6843c3[address(arg1)].field_2816:
            revert with 0, 'uint div by zero'
        return (0 / 10^sub_de6843c3[address(arg1)].field_2816)
    if 10^sub_de6843c3[address(arg2)].field_2816 * (10^18 * arg3 * arg5) + (sub_de6843c3[address(arg1)].field_2560 * arg3 * arg5) / arg4 / 10^18 / (10^18 * arg3 * arg5) + (sub_de6843c3[address(arg1)].field_2560 * arg3 * arg5) / arg4 / 10^18 != 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg1)].field_2816:
        revert with 0, 'uint div by zero'
    return (10^sub_de6843c3[address(arg2)].field_2816 * (10^18 * arg3 * arg5) + (sub_de6843c3[address(arg1)].field_2560 * arg3 * arg5) / arg4 / 10^18 / 10^sub_de6843c3[address(arg1)].field_2816)
}

function sub_841d0071(?) {
    require calldata.size - 4 >= 32
    idx = 0
    s = 0
    while idx < collateralTokens.length:
        _44 = sha3(address(arg1), sha3(collateralTokens[idx], 3))
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        mem[132] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
        mem[164] = ext_call.return_data[0]
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _56 = ext_call.return_data[0]
        if ext_call.return_data[0] + sub_feb59ccf[stor10[idx]][address(arg1)].field_512 < sub_feb59ccf[stor10[idx]][address(arg1)].field_512:
            revert with 0, 'uint add overflow'
        if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > ext_call.return_data[0] + sub_feb59ccf[stor10[idx]][address(arg1)].field_512:
            revert with 0, 'uint sub overflow'
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        _66 = ext_call.return_data[0]
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        mem[0] = collateralTokens[idx]
        mem[32] = 9
        if (ext_call.return_data[0] * ext_call.return_data[0]) + (sub_feb59ccf[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0]) - (sub_feb59ccf[stor10[idx]][address(arg1)].field_0 * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0] + sub_feb59ccf[stor10[idx]][address(arg1)].field_512 - sub_feb59ccf[stor10[idx]][address(arg1)].field_0:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        if ((ext_call.return_data[0] * ext_call.return_data[0]) + (sub_feb59ccf[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0]) - (sub_feb59ccf[stor10[idx]][address(arg1)].field_0 * ext_call.return_data[0]) / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
            revert with 0, 'uint add overflow'
        idx = idx + 1
        s = ((ext_call.return_data[0] * ext_call.return_data[0]) + (sub_feb59ccf[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0]) - (sub_feb59ccf[stor10[idx]][address(arg1)].field_0 * ext_call.return_data[0]) / 10^sub_de6843c3[stor10[idx]].field_2816) + s
        continue 
    return ((_56 * _66) + (sub_4100b9f0[_44].field_0 * _66) - (stor[_44] * _66) / 10^uint256(stor11[_70]) * collateralTokens.length)
}

function sub_35b773cb(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1280, sub_de6843c3[address(arg2)].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg2)][address(arg1)].field_0, sub_4100b9f0[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= sub_4100b9f0[address(arg2)][address(arg1)].field_0:
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if sub_4100b9f0[address(arg2)][address(arg1)].field_512 * ext_call.return_data[0] / ext_call.return_data[0] != sub_4100b9f0[address(arg2)][address(arg1)].field_512:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[address(arg2)].field_2816:
            revert with 0, 'uint div by zero'
        return (sub_4100b9f0[address(arg2)][address(arg1)].field_512 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816)
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > ext_call.return_data[0]:
        revert with 0, 'uint sub overflow'
    if ext_call.return_data[0] - sub_4100b9f0[address(arg2)][address(arg1)].field_0 + sub_4100b9f0[address(arg2)][address(arg1)].field_512 < sub_4100b9f0[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint add overflow'
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if (ext_call.return_data[0] * ext_call.return_data[0]) - (sub_4100b9f0[address(arg2)][address(arg1)].field_0 * ext_call.return_data[0]) + (sub_4100b9f0[address(arg2)][address(arg1)].field_512 * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0] - sub_4100b9f0[address(arg2)][address(arg1)].field_0 + sub_4100b9f0[address(arg2)][address(arg1)].field_512:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    return ((ext_call.return_data[0] * ext_call.return_data[0]) - (sub_4100b9f0[address(arg2)][address(arg1)].field_0 * ext_call.return_data[0]) + (sub_4100b9f0[address(arg2)][address(arg1)].field_512 * ext_call.return_data[0]) / 10^sub_de6843c3[address(arg2)].field_2816)
}

function sub_26bc59fa(?) {
    require calldata.size - 4 >= 64
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1280, sub_de6843c3[address(arg2)].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg2)][address(arg1)].field_0, sub_4100b9f0[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'invalid token price'
    if not ext_call.return_data[0]:
        revert with 0, 'invalid token price'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'uint mul overflow'
    if not 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint div by zero'
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816:
        return ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816, 0
    if sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816 != sub_de6843c3[address(arg2)].field_2304:
        revert with 0, 'uint mul overflow'
    return ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816, 
           sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg2)].field_2816 / 10^18
}

function sub_cb3db563(?) {
    require calldata.size - 4 >= 32
    idx = 0
    s = 0
    while idx < collateralTokens.length:
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        mem[132] = sub_4100b9f0[stor10[idx]][address(arg1)].field_256
        mem[164] = ext_call.return_data[0]
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= sub_4100b9f0[stor10[idx]][address(arg1)].field_0:
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args collateralTokens[idx]
            mem[96 len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            mem[0] = collateralTokens[idx]
            mem[32] = 9
            if sub_4100b9f0[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0] / ext_call.return_data[0] != sub_4100b9f0[stor10[idx]][address(arg1)].field_512:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[stor10[idx]].field_2816:
                revert with 0, 'uint div by zero'
            if (sub_4100b9f0[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
            idx = idx + 1
            s = (sub_4100b9f0[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
            continue 
        if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > ext_call.return_data[0]:
            revert with 0, 'uint sub overflow'
        if ext_call.return_data[0] - sub_4100b9f0[stor10[idx]][address(arg1)].field_0 + sub_4100b9f0[stor10[idx]][address(arg1)].field_512 < sub_4100b9f0[stor10[idx]][address(arg1)].field_512:
            revert with 0, 'uint add overflow'
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        mem[0] = collateralTokens[idx]
        mem[32] = 9
        if (ext_call.return_data[0] * ext_call.return_data[0]) - (sub_4100b9f0[stor10[idx]][address(arg1)].field_0 * ext_call.return_data[0]) + (sub_4100b9f0[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0] - sub_4100b9f0[stor10[idx]][address(arg1)].field_0 + sub_4100b9f0[stor10[idx]][address(arg1)].field_512:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        if ((ext_call.return_data[0] * ext_call.return_data[0]) - (sub_4100b9f0[stor10[idx]][address(arg1)].field_0 * ext_call.return_data[0]) + (sub_4100b9f0[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0]) / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
            revert with 0, 'uint add overflow'
        idx = idx + 1
        s = ((ext_call.return_data[0] * ext_call.return_data[0]) - (sub_4100b9f0[stor10[idx]][address(arg1)].field_0 * ext_call.return_data[0]) + (sub_4100b9f0[stor10[idx]][address(arg1)].field_512 * ext_call.return_data[0]) / 10^sub_de6843c3[stor10[idx]].field_2816) + s
        continue 
    return s
}

function sub_41b41316(?) {
    require calldata.size - 4 >= 32
    idx = 0
    s = 0
    while idx < collateralTokens.length:
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        mem[132] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
        mem[164] = ext_call.return_data[0]
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        mem[0] = collateralTokens[idx]
        mem[32] = 9
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
        else:
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                revert with 0, 'uint mul overflow'
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                revert with 0, 'uint add overflow'
        idx = idx + 1
        s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
        continue 
    return s, 0
}

function sub_a21accdc(?) {
    require calldata.size - 4 >= 32
    idx = 0
    s = 0
    while idx < collateralTokens.length:
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        mem[132] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
        mem[164] = ext_call.return_data[0]
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        mem[0] = collateralTokens[idx]
        mem[32] = 9
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
        else:
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                revert with 0, 'uint mul overflow'
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                revert with 0, 'uint add overflow'
        idx = idx + 1
        s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
        continue 
    if s >= 0:
        if 0 > s:
            revert with 0, 'uint sub overflow'
        return s, 0
    if s > 0:
        revert with 0, 'uint sub overflow'
    return 0, -s
}

function sub_f673e9ca(?) {
    require calldata.size - 4 >= 96
    idx = 0
    s = 0
    while idx < collateralTokens.length:
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        mem[132] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
        mem[164] = ext_call.return_data[0]
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        mem[0] = collateralTokens[idx]
        mem[32] = 9
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
        else:
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                revert with 0, 'uint mul overflow'
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                revert with 0, 'uint add overflow'
        idx = idx + 1
        s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
        continue 
    if s >= 0:
        if 0 > s:
            revert with 0, 'uint sub overflow'
        if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
            revert with 0, 'uint sub overflow'
        if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
            revert with 0, 'uint sub overflow'
        if not arg3:
            revert with 0, 'uint div by zero'
        if (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / arg3 != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
            revert with 0, 'uint mul overflow'
        if not (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / 10^18:
            revert with 0, 'uint div by zero'
        return (0 / (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / 10^18)
    if s > 0:
        revert with 0, 'uint sub overflow'
    if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
        revert with 0, 'uint sub overflow'
    if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
        revert with 0, 'uint sub overflow'
    if not arg3:
        if -s:
            if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                revert with 0, 'uint mul overflow'
        revert with 0, 'uint div by zero'
    if (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / arg3 != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
        revert with 0, 'uint mul overflow'
    if not -s:
        if not (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / 10^18:
            revert with 0, 'uint div by zero'
        return (0 / (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / 10^18)
    if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
        revert with 0, 'uint mul overflow'
    if not (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / 10^18:
        revert with 0, 'uint div by zero'
    return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * arg3) + (sub_de6843c3[address(arg2)].field_2304 * arg3) - (sub_de6843c3[address(arg2)].field_2560 * arg3) / 10^18)
}

function sub_3e3ae88a(?) {
    require calldata.size - 4 >= 64
    if not uint8(stor0.field_0):
        revert with 0, 'tReentrancyGuard: reentrant call'
    uint8(stor0.field_0) = 0
    if adminAddress != msg.sender:
        revert with 0, 'tonly admin can do this!'
    if not arg1:
        if sub_de6843c3[address(arg1)].field_1536 + eth.balance(this.address) < eth.balance(this.address):
            revert with 0, 'uint add overflow'
        if sub_de6843c3[address(arg1)].field_1024 > sub_de6843c3[address(arg1)].field_1536 + eth.balance(this.address):
            revert with 0, 'uint sub overflow'
        if sub_de6843c3[address(arg1)].field_1536 + eth.balance(this.address) - sub_de6843c3[address(arg1)].field_1024 < arg2:
            revert with 0, 'insufficient equity amount'
        if not arg2:
            revert with 0, 'invalid safeTransferFrom amount'
        if this.address == this.address:
            if not arg1:
                if this.address != this.address:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[324 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0x23b872dd(?????), address(this.address) << 64
                        else:
                            mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[260]
                else:
                    if eth.balance(this.address) < arg2:
                        revert with 0, 'Insufficient eth balance'
                    if this.address == this.address:
                        if not arg1:
                            call adminAddress with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[260 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                            else:
                                mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[228]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg2:
                    revert with 0, 'Insufficient balance'
                if this.address == this.address:
                    if not arg1:
                        call adminAddress with:
                           value arg2 wei
                             gas 2300 * is_zero(value) wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    else:
                        require ext_code.size(arg1)
                        mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[260 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                        else:
                            mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[228]
                else:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[324 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0x23b872dd(?????), address(this.address) << 64
                        else:
                            mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[260]
        else:
            if not arg1:
                if this.address != this.address:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[324 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0x23b872dd(?????), address(this.address) << 64
                        else:
                            mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[260]
                else:
                    if eth.balance(this.address) < arg2:
                        revert with 0, 'Insufficient eth balance'
                    if this.address == this.address:
                        if not arg1:
                            call adminAddress with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[260 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                            else:
                                mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[228]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg2:
                    revert with 0, 'Insufficient allowance'
                if not arg1:
                    if this.address != this.address:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
                    else:
                        if eth.balance(this.address) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if this.address == this.address:
                            if not arg1:
                                call adminAddress with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(stor0.field_0)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[260 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                                else:
                                    mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[228]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(stor0.field_0)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[324 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    require unknown_0x23b872dd(?????), address(this.address) << 64
                                else:
                                    mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[260]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient balance'
                    if this.address == this.address:
                        if not arg1:
                            call adminAddress with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[260 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                            else:
                                mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[228]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
        emit 0xf436439e: address(arg1), sub_de6843c3[address(arg1)].field_1536 + eth.balance(this.address) - sub_de6843c3[address(arg1)].field_1024, arg2, adminAddress
    else:
        require ext_code.size(arg1)
        staticcall arg1.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_de6843c3[address(arg1)].field_1536 + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'uint add overflow'
        if sub_de6843c3[address(arg1)].field_1024 > sub_de6843c3[address(arg1)].field_1536 + ext_call.return_data[0]:
            revert with 0, 'uint sub overflow'
        if sub_de6843c3[address(arg1)].field_1536 + ext_call.return_data[0] - sub_de6843c3[address(arg1)].field_1024 < arg2:
            revert with 0, 'insufficient equity amount'
        if not arg2:
            revert with 0, 'invalid safeTransferFrom amount'
        if this.address == this.address:
            if not arg1:
                if this.address != this.address:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[324 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0x23b872dd(?????), address(this.address) << 64
                        else:
                            mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[260]
                else:
                    if eth.balance(this.address) < arg2:
                        revert with 0, 'Insufficient eth balance'
                    if this.address == this.address:
                        if not arg1:
                            call adminAddress with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[260 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                            else:
                                mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[228]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg2:
                    revert with 0, 'Insufficient balance'
                if this.address == this.address:
                    if not arg1:
                        call adminAddress with:
                           value arg2 wei
                             gas 2300 * is_zero(value) wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    else:
                        require ext_code.size(arg1)
                        mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[260 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                        else:
                            mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[228]
                else:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[324 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0x23b872dd(?????), address(this.address) << 64
                        else:
                            mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[260]
        else:
            if not arg1:
                if this.address != this.address:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                           funct uint32(stor0.field_0)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[324 len 4]
                        if not return_data.size:
                            require ext_call.success
                            require unknown_0x23b872dd(?????), address(this.address) << 64
                        else:
                            mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[260]
                else:
                    if eth.balance(this.address) < arg2:
                        revert with 0, 'Insufficient eth balance'
                    if this.address == this.address:
                        if not arg1:
                            call adminAddress with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[260 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                            else:
                                mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[228]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg2:
                    revert with 0, 'Insufficient allowance'
                if not arg1:
                    if this.address != this.address:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
                    else:
                        if eth.balance(this.address) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if this.address == this.address:
                            if not arg1:
                                call adminAddress with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(stor0.field_0)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[260 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                                else:
                                    mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[228]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(stor0.field_0)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[324 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    require unknown_0x23b872dd(?????), address(this.address) << 64
                                else:
                                    mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[260]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient balance'
                    if this.address == this.address:
                        if not arg1:
                            call adminAddress with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0), uint32(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[260 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0xa9059cbb(?????), Mask(224, 0, stor0.field_0)
                            else:
                                mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[228]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[228 len 96] = unknown_0x23b872dd(?????), address(this.address) << 64, 0, address(stor0.field_0), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(stor0.field_0)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[324 len 4]
                            if not return_data.size:
                                require ext_call.success
                                require unknown_0x23b872dd(?????), address(this.address) << 64
                            else:
                                mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[260]
        emit 0xf436439e: address(arg1), sub_de6843c3[address(arg1)].field_1536 + ext_call.return_data[0] - sub_de6843c3[address(arg1)].field_1024, arg2, adminAddress
    uint8(stor0.field_0) = 1
}

function sub_91de89c6(?) payable {
    require calldata.size - 4 >= 64
    if not uint8(stor0.field_0):
        revert with 0, 'tReentrancyGuard: reentrant call'
    uint8(stor0.field_0) = 0
    if arg1:
        if msg.value:
            revert with 0, 'Eth should not be provided'
        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
        staticcall address(sub_de6843c3[address(arg1)].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[address(arg1)][msg.sender].field_0, sub_4100b9f0[address(arg1)][msg.sender].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if arg2 + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'uint add overflow'
        if arg2 + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
            revert with 0, 'uint add overflow'
        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > arg2 + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1024:
            revert with 0, 'uint sub overflow'
        if not arg1:
            if eth.balance(this.address) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                    gas gas_remaining wei
                   args eth.balance(this.address), sub_de6843c3[address(arg1)].field_1536
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if eth.balance(this.address) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                    gas gas_remaining wei
                   args eth.balance(this.address), sub_de6843c3[address(arg1)].field_1536
        else:
            require ext_code.size(arg1)
            staticcall arg1.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not arg1:
                if ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
            else:
                if arg2 + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'uint add overflow'
                if arg2 + ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args arg2 + ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 + ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args arg2 + ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
        sub_de6843c3[address(arg1)].field_1024 = arg2 + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
        sub_de6843c3[address(arg1)].field_0 = block.timestamp
        sub_4100b9f0[address(arg1)][msg.sender].field_0 = arg2 + ext_call.return_data[0]
        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
        if ext_call.return_data[0] > sub_4100b9f0[address(arg1)][msg.sender].field_0:
            if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0]:
                revert with 0, 'uint sub overflow'
            if ext_call.return_data[0] - sub_4100b9f0[address(arg1)][msg.sender].field_0 + sub_4100b9f0[address(arg1)][msg.sender].field_512 < sub_4100b9f0[address(arg1)][msg.sender].field_512:
                revert with 0, 'uint add overflow'
            sub_4100b9f0[address(arg1)][msg.sender].field_512 = ext_call.return_data[0] - sub_4100b9f0[address(arg1)][msg.sender].field_0 + sub_4100b9f0[address(arg1)][msg.sender].field_512
        if not indexes[address(msg.sender)]:
            accounts[stor8] = msg.sender
            indexes[address(msg.sender)] = index
            index++
        if not arg2:
            revert with 0, 'invalid safeTransferFrom amount'
        if msg.sender == this.address:
            if not arg1:
                if this.address != msg.sender:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[580 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[516]
                else:
                    if eth.balance(msg.sender) < arg2:
                        revert with 0, 'Insufficient eth balance'
                    if msg.sender == this.address:
                        if not arg1:
                            call this.address with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[516 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[484]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg2:
                    revert with 0, 'Insufficient balance'
                if msg.sender == this.address:
                    if not arg1:
                        call this.address with:
                           value arg2 wei
                             gas 2300 * is_zero(value) wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    else:
                        require ext_code.size(arg1)
                        mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, arg2) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[516 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[484]
                else:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[580 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[516]
        else:
            if not arg1:
                if this.address != msg.sender:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 480, mem[580 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[516]
                else:
                    if eth.balance(msg.sender) < arg2:
                        revert with 0, 'Insufficient eth balance'
                    if msg.sender == this.address:
                        if not arg1:
                            call this.address with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[516 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[484]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0xdd62ed3e with:
                        gas gas_remaining wei
                       args msg.sender, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg2:
                    revert with 0, 'Insufficient allowance'
                if not arg1:
                    if this.address != msg.sender:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
                    else:
                        if eth.balance(msg.sender) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if msg.sender == this.address:
                            if not arg1:
                                call this.address with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[516 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[484]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[580 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[516]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0x70a08231 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient balance'
                    if msg.sender == this.address:
                        if not arg1:
                            call this.address with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[516 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[484]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
        emit 0x143bd853: msg.sender, address(arg1), arg2, sub_4100b9f0[address(arg1)][msg.sender].field_0, arg2 + ext_call.return_data[0]
    else:
        if arg2 != msg.value:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        35,
                        0xfe4574682076616c75652073686f756c6420626520657175616c20746f20616d6f756e,
                        mem[199 len 29]
        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
        staticcall address(sub_de6843c3[address(arg1)].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[address(arg1)][msg.sender].field_0, sub_4100b9f0[address(arg1)][msg.sender].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if msg.value + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'uint add overflow'
        if msg.value + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
            revert with 0, 'uint add overflow'
        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > msg.value + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1024:
            revert with 0, 'uint sub overflow'
        if not arg1:
            if eth.balance(this.address) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                    gas gas_remaining wei
                   args eth.balance(this.address), sub_de6843c3[address(arg1)].field_1536
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if eth.balance(this.address) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                    gas gas_remaining wei
                   args eth.balance(this.address), sub_de6843c3[address(arg1)].field_1536
        else:
            require ext_code.size(arg1)
            staticcall arg1.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not arg1:
                if ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
            else:
                if msg.value + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'uint add overflow'
                if msg.value + ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args msg.value + ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if msg.value + ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args msg.value + ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
        sub_de6843c3[address(arg1)].field_1024 = msg.value + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
        sub_de6843c3[address(arg1)].field_0 = block.timestamp
        sub_4100b9f0[address(arg1)][msg.sender].field_0 = msg.value + ext_call.return_data[0]
        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
        if ext_call.return_data[0] > sub_4100b9f0[address(arg1)][msg.sender].field_0:
            if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0]:
                revert with 0, 'uint sub overflow'
            if ext_call.return_data[0] - sub_4100b9f0[address(arg1)][msg.sender].field_0 + sub_4100b9f0[address(arg1)][msg.sender].field_512 < sub_4100b9f0[address(arg1)][msg.sender].field_512:
                revert with 0, 'uint add overflow'
            sub_4100b9f0[address(arg1)][msg.sender].field_512 = ext_call.return_data[0] - sub_4100b9f0[address(arg1)][msg.sender].field_0 + sub_4100b9f0[address(arg1)][msg.sender].field_512
        if not indexes[address(msg.sender)]:
            accounts[stor8] = msg.sender
            indexes[address(msg.sender)] = index
            index++
        if not msg.value:
            revert with 0, 'invalid safeTransferFrom amount'
        if msg.sender == this.address:
            if not arg1:
                if this.address != msg.sender:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[516]
                else:
                    if eth.balance(msg.sender) < msg.value:
                        revert with 0, 'Insufficient eth balance'
                    if msg.sender == this.address:
                        if not arg1:
                            call this.address with:
                               value msg.value wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 224, mem[516 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[484]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < msg.value:
                    revert with 0, 'Insufficient balance'
                if msg.sender == this.address:
                    if not arg1:
                        call this.address with:
                           value msg.value wei
                             gas 2300 * is_zero(value) wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    else:
                        require ext_code.size(arg1)
                        mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, msg.value) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, msg.value) << 224, mem[516 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[484]
                else:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[516]
        else:
            if not arg1:
                if this.address != msg.sender:
                    if arg1:
                        require ext_code.size(arg1)
                        mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                        call arg1 with:
                             gas gas_remaining wei
                            args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                        if not return_data.size:
                            require ext_call.success
                            if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                require ext_call.return_data[0]
                        else:
                            mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require ext_call.success
                            if return_data.size:
                                require return_data.size >= 32
                                require mem[516]
                else:
                    if eth.balance(msg.sender) < msg.value:
                        revert with 0, 'Insufficient eth balance'
                    if msg.sender == this.address:
                        if not arg1:
                            call this.address with:
                               value msg.value wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 224, mem[516 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[484]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0xdd62ed3e with:
                        gas gas_remaining wei
                       args msg.sender, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < msg.value:
                    revert with 0, 'Insufficient allowance'
                if not arg1:
                    if this.address != msg.sender:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
                    else:
                        if eth.balance(msg.sender) < msg.value:
                            revert with 0, 'Insufficient eth balance'
                        if msg.sender == this.address:
                            if not arg1:
                                call this.address with:
                                   value msg.value wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, msg.value) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, msg.value) << 224, mem[516 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[484]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[516]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0x70a08231 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < msg.value:
                        revert with 0, 'Insufficient balance'
                    if msg.sender == this.address:
                        if not arg1:
                            call this.address with:
                               value msg.value wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[452 len 64] = unknown_0xa9059cbb(?????), address(this.address) << 64, 0, Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 224, mem[516 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[484]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[484 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, msg.value) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args Mask(224, 32, msg.value) << 480, mem[580 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if sub_4100b9f0[address(arg1)][msg.sender].field_0:
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0 >= 32
                                    require ext_call.return_data[0]
                            else:
                                mem[516 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[516]
        emit 0x143bd853: msg.sender, address(arg1), msg.value, sub_4100b9f0[address(arg1)][msg.sender].field_0, msg.value + ext_call.return_data[0]
    uint8(stor0.field_0) = 1
}

function sub_41ed3ad6(?) {
    require calldata.size - 4 >= 96
    if arg1 == msg.sender:
        revert with 0, 'can't self-liquidate'
    require ext_code.size(address(sub_de6843c3[arg3].field_768))
    staticcall address(sub_de6843c3[arg3].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[arg3].field_1280, sub_de6843c3[arg3].field_256, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg2)].field_1792, sub_de6843c3[address(arg2)].field_512, block.timestamp - sub_de6843c3[address(arg2)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg3)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[arg3].field_768))
    staticcall address(sub_de6843c3[arg3].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg3)][address(arg1)].field_0, sub_4100b9f0[address(arg3)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg2)][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg2)].field_768))
    staticcall address(sub_de6843c3[address(arg2)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg2)][address(arg1)].field_0, sub_feb59ccf[address(arg2)][address(arg1)].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'fail to get collateralPrice'
    if not address(stor11.length):
        revert with 0, 'oracle not set'
    require ext_code.size(address(stor11.length))
    staticcall address(stor11.length).0xc2bc2efc with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        revert with 0, 'fail to get underwaterAssetPrice'
    if sub_de6843c3[address(arg2)].field_2560 + 10^18 < 10^18:
        revert with 0, 'uint add overflow'
    if not ext_call.return_data[0]:
        if not sub_de6843c3[address(arg2)].field_2560 + 10^18:
            revert with 0, 'uint div by zero'
        if (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / sub_de6843c3[address(arg2)].field_2560 + 10^18 != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
            revert with 0, 'uint div by zero'
        if not 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
            if not 10^sub_de6843c3[address(arg3)].field_2816:
                revert with 0, 'uint div by zero'
            idx = 0
            s = 0
            while idx < collateralTokens.length:
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                mem[1092] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
                mem[1124] = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                mem[1056 len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                mem[0] = collateralTokens[idx]
                mem[32] = 9
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                else:
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                        revert with 0, 'uint mul overflow'
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                        revert with 0, 'uint add overflow'
                idx = idx + 1
                s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
                continue 
            if s >= 0:
                if 0 > s:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    revert with 0, 'uint div by zero'
                if ext_call.return_data[0] >= 0 / 10^sub_de6843c3[address(arg3)].field_2816:
                    if 0 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                    return (0 / 10^sub_de6843c3[address(arg3)].field_2816)
                if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
            else:
                if s > 0:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    if -s:
                        if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                            revert with 0, 'uint mul overflow'
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not -s:
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 0 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 0 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (0 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                else:
                    if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                        revert with 0, 'uint mul overflow'
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 0 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 0 / 10^sub_de6843c3[address(arg3)].field_2816 >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (0 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
        else:
            if 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 != 10^sub_de6843c3[address(arg2)].field_2816:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[address(arg3)].field_2816:
                revert with 0, 'uint div by zero'
            idx = 0
            s = 0
            while idx < collateralTokens.length:
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                mem[1092] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
                mem[1124] = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                mem[1056 len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                mem[0] = collateralTokens[idx]
                mem[32] = 9
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                else:
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                        revert with 0, 'uint mul overflow'
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                        revert with 0, 'uint add overflow'
                idx = idx + 1
                s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
                continue 
            if s >= 0:
                if 0 > s:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    revert with 0, 'uint div by zero'
                if ext_call.return_data[0] >= 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816:
                    if 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                    return (10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816)
                if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
            else:
                if s > 0:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    if -s:
                        if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                            revert with 0, 'uint mul overflow'
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not -s:
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                else:
                    if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                        revert with 0, 'uint mul overflow'
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816 >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (10^sub_de6843c3[address(arg2)].field_2816 * 0 / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
    else:
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not sub_de6843c3[address(arg2)].field_2560 + 10^18:
            revert with 0, 'uint div by zero'
        if (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / sub_de6843c3[address(arg2)].field_2560 + 10^18 != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
            revert with 0, 'uint div by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
            if not 10^sub_de6843c3[address(arg3)].field_2816:
                revert with 0, 'uint div by zero'
            idx = 0
            s = 0
            while idx < collateralTokens.length:
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                mem[1092] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
                mem[1124] = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                mem[1056 len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                mem[0] = collateralTokens[idx]
                mem[32] = 9
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                else:
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                        revert with 0, 'uint mul overflow'
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                        revert with 0, 'uint add overflow'
                idx = idx + 1
                s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
                continue 
            if s >= 0:
                if 0 > s:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    revert with 0, 'uint div by zero'
                if ext_call.return_data[0] >= 0 / 10^sub_de6843c3[address(arg3)].field_2816:
                    if 0 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                    return (0 / 10^sub_de6843c3[address(arg3)].field_2816)
                if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
            else:
                if s > 0:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    if -s:
                        if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                            revert with 0, 'uint mul overflow'
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not -s:
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 0 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 0 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (0 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                else:
                    if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                        revert with 0, 'uint mul overflow'
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 0 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 0 / 10^sub_de6843c3[address(arg3)].field_2816 >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (0 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
        else:
            if 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 != 10^sub_de6843c3[address(arg2)].field_2816:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[address(arg3)].field_2816:
                revert with 0, 'uint div by zero'
            idx = 0
            s = 0
            while idx < collateralTokens.length:
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_4100b9f0[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_4100b9f0[stor10[idx]][address(arg1)].field_0, sub_4100b9f0[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if sub_feb59ccf[stor10[idx]][address(arg1)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                mem[1092] = sub_feb59ccf[stor10[idx]][address(arg1)].field_256
                mem[1124] = ext_call.return_data[0]
                require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
                staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                        gas gas_remaining wei
                       args sub_feb59ccf[stor10[idx]][address(arg1)].field_0, sub_feb59ccf[stor10[idx]][address(arg1)].field_256, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not address(stor11.length):
                    revert with 0, 'oracle not set'
                require ext_code.size(address(stor11.length))
                staticcall address(stor11.length).0xc2bc2efc with:
                        gas gas_remaining wei
                       args collateralTokens[idx]
                mem[1056 len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                if not ext_call.return_data[32]:
                    revert with 0, 'invalid token price'
                if not ext_call.return_data[0]:
                    revert with 0, 'invalid token price'
                mem[0] = collateralTokens[idx]
                mem[32] = 9
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'uint mul overflow'
                if not 10^sub_de6843c3[stor10[idx]].field_2816:
                    revert with 0, 'uint div by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                else:
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                        revert with 0, 'uint mul overflow'
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                        revert with 0, 'uint add overflow'
                    if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                        revert with 0, 'uint add overflow'
                idx = idx + 1
                s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
                continue 
            if s >= 0:
                if 0 > s:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    revert with 0, 'uint div by zero'
                if ext_call.return_data[0] >= 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816:
                    if 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                    return (10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816)
                if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                    return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
            else:
                if s > 0:
                    revert with 0, 'uint sub overflow'
                if sub_de6843c3[address(arg2)].field_2560 > sub_de6843c3[address(arg2)].field_2304:
                    revert with 0, 'uint sub overflow'
                if 10^18 > sub_de6843c3[address(arg2)].field_2304 - sub_de6843c3[address(arg2)].field_2560:
                    revert with 0, 'uint sub overflow'
                if not ext_call.return_data[0]:
                    if -s:
                        if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                            revert with 0, 'uint mul overflow'
                    revert with 0, 'uint div by zero'
                if (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / ext_call.return_data[0] != sub_de6843c3[address(arg2)].field_2304 + -sub_de6843c3[address(arg2)].field_2560 - 10^18:
                    revert with 0, 'uint mul overflow'
                if not -s:
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816 >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= 0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (0 / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                else:
                    if -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / -s != 10^sub_de6843c3[address(arg2)].field_2816:
                        revert with 0, 'uint mul overflow'
                    if not (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        revert with 0, 'uint div by zero'
                    if ext_call.return_data[0] >= 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816:
                        if 10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816 >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                            return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
                        return (10^sub_de6843c3[address(arg2)].field_2816 * ext_call.return_data[0] * ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18 / 10^sub_de6843c3[address(arg3)].field_2816)
                    if ext_call.return_data[0] >= -1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18:
                        return (-1 * 10^sub_de6843c3[address(arg2)].field_2816 * s / (-1 * 10^18 * ext_call.return_data[0]) + (sub_de6843c3[address(arg2)].field_2304 * ext_call.return_data[0]) - (sub_de6843c3[address(arg2)].field_2560 * ext_call.return_data[0]) / 10^18)
    return ext_call.return_data[0]
}

function sub_101828d1(?) {
    require calldata.size - 4 >= 64
    if not uint8(stor0.field_0):
        revert with 0, 'tReentrancyGuard: reentrant call'
    uint8(stor0.field_0) = 0
    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
    staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
    staticcall address(sub_de6843c3[address(arg1)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_feb59ccf[address(arg1)][msg.sender].field_0, sub_feb59ccf[address(arg1)][msg.sender].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg2:
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'uint add overflow'
        if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 < sub_de6843c3[address(arg1)].field_1536:
            revert with 0, 'uint add overflow'
        if sub_feb59ccf[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536:
            revert with 0, 'uint sub overflow'
        idx = 0
        s = 0
        while idx < collateralTokens.length:
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if sub_4100b9f0[stor10[idx]][address(msg.sender)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                    gas gas_remaining wei
                   args sub_4100b9f0[stor10[idx]][address(msg.sender)].field_0, sub_4100b9f0[stor10[idx]][address(msg.sender)].field_256, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args collateralTokens[idx]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[stor10[idx]].field_2816:
                revert with 0, 'uint div by zero'
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if sub_feb59ccf[stor10[idx]][address(msg.sender)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            mem[516] = sub_feb59ccf[stor10[idx]][address(msg.sender)].field_256
            mem[548] = ext_call.return_data[0]
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                    gas gas_remaining wei
                   args sub_feb59ccf[stor10[idx]][address(msg.sender)].field_0, sub_feb59ccf[stor10[idx]][address(msg.sender)].field_256, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args collateralTokens[idx]
            mem[480 len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            mem[0] = collateralTokens[idx]
            mem[32] = 9
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[stor10[idx]].field_2816:
                revert with 0, 'uint div by zero'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                    revert with 0, 'uint add overflow'
            else:
                if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                    revert with 0, 'uint mul overflow'
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                    revert with 0, 'uint add overflow'
                if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                    revert with 0, 'uint add overflow'
            idx = idx + 1
            s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
            continue 
        if s < 0:
            if s > 0:
                revert with 0, 'uint sub overflow'
            revert with 0, 'can't borrow, shortfall'
        if 0 > s:
            revert with 0, 'uint sub overflow'
        if not s:
            revert with 0, 'can't borrow, shortfall'
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if 0 / ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[address(arg1)].field_2816:
            revert with 0, 'uint div by zero'
        if not 0 / 10^sub_de6843c3[address(arg1)].field_2816:
            if s < 0:
                revert with 0, 32, 34, 0x63616e277420626f72726f772c20776974686f757420656e6f7567682076616c7500, mem[582 len 30]
            if not arg1:
                if arg2 > eth.balance(this.address):
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 > ext_call.return_data[0]:
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
        else:
            if sub_de6843c3[address(arg1)].field_2304 * 0 / 10^sub_de6843c3[address(arg1)].field_2816 / 0 / 10^sub_de6843c3[address(arg1)].field_2816 != sub_de6843c3[address(arg1)].field_2304:
                revert with 0, 'uint mul overflow'
            if s < sub_de6843c3[address(arg1)].field_2304 * 0 / 10^sub_de6843c3[address(arg1)].field_2816 / 10^18:
                revert with 0, 32, 34, 0x63616e277420626f72726f772c20776974686f757420656e6f7567682076616c7500, mem[582 len 30]
            if not arg1:
                if arg2 > eth.balance(this.address):
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 > ext_call.return_data[0]:
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
        emit 0xccf497a6: msg.sender, address(arg1), arg2, sub_feb59ccf[address(arg1)][msg.sender].field_0, ext_call.return_data[0]
    else:
        if 10^18 * arg2 / arg2 != 10^18:
            revert with 0, 'uint mul overflow'
        if (10^18 * arg2 / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'uint add overflow'
        if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 < sub_de6843c3[address(arg1)].field_1536:
            revert with 0, 'uint add overflow'
        if sub_feb59ccf[address(arg1)][msg.sender].field_0 > (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536:
            revert with 0, 'uint sub overflow'
        idx = 0
        s = 0
        while idx < collateralTokens.length:
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if sub_4100b9f0[stor10[idx]][address(msg.sender)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                    gas gas_remaining wei
                   args sub_4100b9f0[stor10[idx]][address(msg.sender)].field_0, sub_4100b9f0[stor10[idx]][address(msg.sender)].field_256, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args collateralTokens[idx]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[stor10[idx]].field_2816:
                revert with 0, 'uint div by zero'
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if sub_feb59ccf[stor10[idx]][address(msg.sender)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            mem[516] = sub_feb59ccf[stor10[idx]][address(msg.sender)].field_256
            mem[548] = ext_call.return_data[0]
            require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
            staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                    gas gas_remaining wei
                   args sub_feb59ccf[stor10[idx]][address(msg.sender)].field_0, sub_feb59ccf[stor10[idx]][address(msg.sender)].field_256, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args collateralTokens[idx]
            mem[480 len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            mem[0] = collateralTokens[idx]
            mem[32] = 9
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[stor10[idx]].field_2816:
                revert with 0, 'uint div by zero'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                    revert with 0, 'uint add overflow'
            else:
                if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                    revert with 0, 'uint mul overflow'
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                    revert with 0, 'uint add overflow'
                if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                    revert with 0, 'uint add overflow'
            idx = idx + 1
            s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
            continue 
        if s < 0:
            if s > 0:
                revert with 0, 'uint sub overflow'
            revert with 0, 'can't borrow, shortfall'
        if 0 > s:
            revert with 0, 'uint sub overflow'
        if not s:
            revert with 0, 'can't borrow, shortfall'
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if 10^18 * arg2 / 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * arg2 / 10^18:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[address(arg1)].field_2816:
            revert with 0, 'uint div by zero'
        if not 10^18 * arg2 / 10^18 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
            if s < 0:
                revert with 0, 32, 34, 0x63616e277420626f72726f772c20776974686f757420656e6f7567682076616c7500, mem[582 len 30]
            if not arg1:
                if arg2 > eth.balance(this.address):
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = (10^18 * arg2 / 10^18) + ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 > ext_call.return_data[0]:
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = (10^18 * arg2 / 10^18) + ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
        else:
            if sub_de6843c3[address(arg1)].field_2304 * 10^18 * arg2 / 10^18 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816 / 10^18 * arg2 / 10^18 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816 != sub_de6843c3[address(arg1)].field_2304:
                revert with 0, 'uint mul overflow'
            if s < sub_de6843c3[address(arg1)].field_2304 * 10^18 * arg2 / 10^18 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816 / 10^18:
                revert with 0, 32, 34, 0x63616e277420626f72726f772c20776974686f757420656e6f7567682076616c7500, mem[582 len 30]
            if not arg1:
                if arg2 > eth.balance(this.address):
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args eth.balance(this.address) - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = (10^18 * arg2 / 10^18) + ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
            else:
                require ext_code.size(arg1)
                staticcall arg1.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 > ext_call.return_data[0]:
                    revert with 0, 'uint sub overflow'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                        gas gas_remaining wei
                       args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                if (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 'uint r is not valid'
                require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                        gas gas_remaining wei
                       args ext_call.return_data[0] - arg2, (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_0 = block.timestamp
                sub_de6843c3[address(arg1)].field_1536 = (10^18 * arg2 / 10^18) + ext_call.return_data[0] + sub_de6843c3[address(arg1)].field_1536 - sub_feb59ccf[address(arg1)][msg.sender].field_0
                sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_0 = (10^18 * arg2 / 10^18) + ext_call.return_data[0]
                sub_feb59ccf[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                if not arg2:
                    revert with 0, 'invalid safeTransferFrom amount'
                if this.address == this.address:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[612]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                else:
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0] >= 32
                                        require ext_call.return_data[0]
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0xdd62ed3e with:
                                gas gas_remaining wei
                               args address(this.address), this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient allowance'
                        if not arg1:
                            if this.address != this.address:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if eth.balance(this.address) < arg2:
                                    revert with 0, 'Insufficient eth balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value arg2 wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[612]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require ext_call.return_data[0]
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                        else:
                            require ext_code.size(arg1)
                            staticcall arg1.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(this.address)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < arg2:
                                revert with 0, 'Insufficient balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[580 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[644 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[612 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[612]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[612 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[708 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0] >= 32
                                            require ext_call.return_data[0]
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
        emit 0xccf497a6: msg.sender, address(arg1), arg2, sub_feb59ccf[address(arg1)][msg.sender].field_0, (10^18 * arg2 / 10^18) + ext_call.return_data[0]
    uint8(stor0.field_0) = 1
}

function sub_6012481a(?) {
    require calldata.size - 4 >= 64
    if not uint8(stor0.field_0):
        revert with 0, 'tReentrancyGuard: reentrant call'
    uint8(stor0.field_0) = 0
    idx = 0
    s = 0
    while idx < collateralTokens.length:
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1280, sub_de6843c3[stor10[idx]].field_256, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_4100b9f0[stor10[idx]][address(msg.sender)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_4100b9f0[stor10[idx]][address(msg.sender)].field_0, sub_4100b9f0[stor10[idx]][address(msg.sender)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0x96e973f5 with:
                gas gas_remaining wei
               args sub_de6843c3[stor10[idx]].field_1792, sub_de6843c3[stor10[idx]].field_512, block.timestamp - sub_de6843c3[stor10[idx]].field_0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_feb59ccf[stor10[idx]][address(msg.sender)].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 'uint r is not valid'
        mem[548] = sub_feb59ccf[stor10[idx]][address(msg.sender)].field_256
        mem[580] = ext_call.return_data[0]
        require ext_code.size(address(sub_de6843c3[stor10[idx]].field_768))
        staticcall address(sub_de6843c3[stor10[idx]].field_768).0xe14768ed with:
                gas gas_remaining wei
               args sub_feb59ccf[stor10[idx]][address(msg.sender)].field_0, sub_feb59ccf[stor10[idx]][address(msg.sender)].field_256, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not address(stor11.length):
            revert with 0, 'oracle not set'
        require ext_code.size(address(stor11.length))
        staticcall address(stor11.length).0xc2bc2efc with:
                gas gas_remaining wei
               args collateralTokens[idx]
        mem[512 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not ext_call.return_data[32]:
            revert with 0, 'invalid token price'
        if not ext_call.return_data[0]:
            revert with 0, 'invalid token price'
        mem[0] = collateralTokens[idx]
        mem[32] = 9
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'uint mul overflow'
        if not 10^sub_de6843c3[stor10[idx]].field_2816:
            revert with 0, 'uint div by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816:
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
        else:
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 != sub_de6843c3[stor10[idx]].field_2304:
                revert with 0, 'uint mul overflow'
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s < s:
                revert with 0, 'uint add overflow'
            if sub_de6843c3[stor10[idx]].field_2304 * ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816 / 10^18 < 0:
                revert with 0, 'uint add overflow'
        idx = idx + 1
        s = (ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[stor10[idx]].field_2816) + s
        continue 
    if s < 0:
        if s > 0:
            revert with 0, 'uint sub overflow'
        revert with 0, 'can't withdraw, shortfall'
    if 0 > s:
        revert with 0, 'uint sub overflow'
    if not s:
        revert with 0, 'can't withdraw, shortfall'
    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
    staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
            gas gas_remaining wei
           args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_4100b9f0[address(arg1)][msg.sender].field_0 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 'uint r is not valid'
    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
    staticcall address(sub_de6843c3[address(arg1)].field_768).0xe14768ed with:
            gas gas_remaining wei
           args sub_4100b9f0[address(arg1)][msg.sender].field_0, sub_4100b9f0[address(arg1)][msg.sender].field_256, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if arg2 != -1:
            if arg2 > eth.balance(this.address):
                revert with 0, 'uint sub overflow'
            if arg2 > ext_call.return_data[0]:
                revert with 0, 'uint sub overflow'
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            if arg2 * ext_call.return_data[0] / ext_call.return_data[0] != arg2:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[address(arg1)].field_2816:
                revert with 0, 'uint div by zero'
            if s < arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                revert with 0, 'account is short'
            if ext_call.return_data[0] - arg2 + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                revert with 0, 'uint add overflow'
            if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - arg2 + sub_de6843c3[address(arg1)].field_1024:
                revert with 0, 'uint sub overflow'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                    gas gas_remaining wei
                   args eth.balance(this.address) - arg2, sub_de6843c3[address(arg1)].field_1536
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if eth.balance(this.address) - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                    gas gas_remaining wei
                   args eth.balance(this.address) - arg2, sub_de6843c3[address(arg1)].field_1536
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
            sub_de6843c3[address(arg1)].field_0 = block.timestamp
            sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - arg2 + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
            sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
            sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
            sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - arg2
            sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
            if not arg2:
                revert with 0, 'invalid safeTransferFrom amount'
            if this.address == this.address:
                if not arg1:
                    if this.address != this.address:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[676]
                    else:
                        if eth.balance(this.address) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient balance'
                    if this.address == this.address:
                        if not arg1:
                            call msg.sender with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(msg.sender)
                                 gas gas_remaining wei
                                args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[644]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(msg.sender)
                                 gas gas_remaining wei
                                args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[676]
            else:
                if not arg1:
                    if this.address != this.address:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(msg.sender)
                                 gas gas_remaining wei
                                args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[676]
                    else:
                        if eth.balance(this.address) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0xdd62ed3e with:
                            gas gas_remaining wei
                           args address(this.address), this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient allowance'
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if arg2:
                                            require arg2 >= 32
                                            require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if arg2:
                                            require arg2 >= 32
                                            require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                    else:
                                        mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[676]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
            emit 0x3a0d9903: msg.sender, address(arg1), arg2, sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - arg2
        else:
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            if not s:
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if 0 / ext_call.return_data[0] >= ext_call.return_data[0]:
                    if ext_call.return_data[0] >= eth.balance(this.address):
                        if eth.balance(this.address) > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if eth.balance(this.address) > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if eth.balance(this.address) * ext_call.return_data[0] / ext_call.return_data[0] != eth.balance(this.address):
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < eth.balance(this.address) * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - eth.balance(this.address)
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not eth.balance(this.address):
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < eth.balance(this.address):
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), eth.balance(this.address), sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - eth.balance(this.address)
                    else:
                        if ext_call.return_data[0] > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 -= sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = 0
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, 0
                else:
                    if 0 / ext_call.return_data[0] >= eth.balance(this.address):
                        if eth.balance(this.address) > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if eth.balance(this.address) > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if eth.balance(this.address) * ext_call.return_data[0] / ext_call.return_data[0] != eth.balance(this.address):
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < eth.balance(this.address) * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - eth.balance(this.address)
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not eth.balance(this.address):
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < eth.balance(this.address):
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), eth.balance(this.address), sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - eth.balance(this.address)
                    else:
                        if 0 / ext_call.return_data[0] > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if 0 / ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - (0 / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - (0 / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - (0 / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - (0 / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - (0 / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - (0 / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - (0 / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - (0 / ext_call.return_data[0])
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 0 / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 0 / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0 / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value 0 / ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 0 / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 0 / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0 / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < 0 / ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value 0 / ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 0 / ext_call.return_data[0]:
                                                        require 0 / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 0 / ext_call.return_data[0]:
                                                        require 0 / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < 0 / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 0 / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), 0 / ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - (0 / ext_call.return_data[0])
            else:
                if 10^sub_de6843c3[address(arg1)].field_2816 * s / s != 10^sub_de6843c3[address(arg1)].field_2816:
                    revert with 0, 'uint mul overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= ext_call.return_data[0]:
                    if ext_call.return_data[0] >= eth.balance(this.address):
                        if eth.balance(this.address) > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if eth.balance(this.address) > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if eth.balance(this.address) * ext_call.return_data[0] / ext_call.return_data[0] != eth.balance(this.address):
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < eth.balance(this.address) * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - eth.balance(this.address)
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not eth.balance(this.address):
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < eth.balance(this.address):
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), eth.balance(this.address), sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - eth.balance(this.address)
                    else:
                        if ext_call.return_data[0] > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - ext_call.return_data[0] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - ext_call.return_data[0], sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 -= sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = 0
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, 0
                else:
                    if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= eth.balance(this.address):
                        if eth.balance(this.address) > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if eth.balance(this.address) > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if eth.balance(this.address) * ext_call.return_data[0] / ext_call.return_data[0] != eth.balance(this.address):
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < eth.balance(this.address) * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - eth.balance(this.address) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - eth.balance(this.address)
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not eth.balance(this.address):
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if eth.balance(this.address):
                                                require eth.balance(this.address) >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < eth.balance(this.address):
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if eth.balance(this.address):
                                                        require eth.balance(this.address) >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < eth.balance(this.address):
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), Mask(224, 32, 0, msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args eth.balance(this.address), 0, address(this.address), msg.sender, Mask(224, 32, eth.balance(this.address)) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if eth.balance(this.address):
                                                    require eth.balance(this.address) >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), eth.balance(this.address), sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - eth.balance(this.address)
                    else:
                        if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] > eth.balance(this.address):
                            revert with 0, 'uint sub overflow'
                        if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if eth.balance(this.address) - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args eth.balance(this.address) - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0])
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                        require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                        require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0])
    else:
        require ext_code.size(arg1)
        staticcall arg1.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if arg2 != -1:
            if arg2 > ext_call.return_data[0]:
                revert with 0, 'uint sub overflow'
            if arg2 > ext_call.return_data[0]:
                revert with 0, 'uint sub overflow'
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            if arg2 * ext_call.return_data[0] / ext_call.return_data[0] != arg2:
                revert with 0, 'uint mul overflow'
            if not 10^sub_de6843c3[address(arg1)].field_2816:
                revert with 0, 'uint div by zero'
            if s < arg2 * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                revert with 0, 'account is short'
            if ext_call.return_data[0] - arg2 + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                revert with 0, 'uint add overflow'
            if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - arg2 + sub_de6843c3[address(arg1)].field_1024:
                revert with 0, 'uint sub overflow'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                    gas gas_remaining wei
                   args ext_call.return_data[0] - arg2, sub_de6843c3[address(arg1)].field_1536
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                    gas gas_remaining wei
                   args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] - arg2 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 'uint r is not valid'
            require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
            staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                    gas gas_remaining wei
                   args ext_call.return_data[0] - arg2, sub_de6843c3[address(arg1)].field_1536
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
            sub_de6843c3[address(arg1)].field_0 = block.timestamp
            sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - arg2 + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
            sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
            sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
            sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - arg2
            sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
            if not arg2:
                revert with 0, 'invalid safeTransferFrom amount'
            if this.address == this.address:
                if not arg1:
                    if this.address != this.address:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(msg.sender)
                                 gas gas_remaining wei
                                args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[676]
                    else:
                        if eth.balance(this.address) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient balance'
                    if this.address == this.address:
                        if not arg1:
                            call msg.sender with:
                               value arg2 wei
                                 gas 2300 * is_zero(value) wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require ext_code.size(arg1)
                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[644]
                    else:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                                 gas gas_remaining wei
                                args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[676]
            else:
                if not arg1:
                    if this.address != this.address:
                        if arg1:
                            require ext_code.size(arg1)
                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                            call arg1 with:
                               funct uint32(msg.sender)
                                 gas gas_remaining wei
                                args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                            if not return_data.size:
                                require ext_call.success
                                if arg2:
                                    require arg2 >= 32
                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                            else:
                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[676]
                    else:
                        if eth.balance(this.address) < arg2:
                            revert with 0, 'Insufficient eth balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
                else:
                    require ext_code.size(arg1)
                    staticcall arg1.0xdd62ed3e with:
                            gas gas_remaining wei
                           args address(this.address), this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < arg2:
                        revert with 0, 'Insufficient allowance'
                    if not arg1:
                        if this.address != this.address:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
                        else:
                            if eth.balance(this.address) < arg2:
                                revert with 0, 'Insufficient eth balance'
                            if this.address == this.address:
                                if not arg1:
                                    call msg.sender with:
                                       value arg2 wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(arg1)
                                    mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if arg2:
                                            require arg2 >= 32
                                            require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                    else:
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[644]
                            else:
                                if arg1:
                                    require ext_code.size(arg1)
                                    mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                    call arg1 with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                    if not return_data.size:
                                        require ext_call.success
                                        if arg2:
                                            require arg2 >= 32
                                            require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                    else:
                                        mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        if return_data.size:
                                            require return_data.size >= 32
                                            require mem[676]
                    else:
                        require ext_code.size(arg1)
                        staticcall arg1.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < arg2:
                            revert with 0, 'Insufficient balance'
                        if this.address == this.address:
                            if not arg1:
                                call msg.sender with:
                                   value arg2 wei
                                     gas 2300 * is_zero(value) wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            else:
                                require ext_code.size(arg1)
                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args arg2, Mask(224, 32, 0, msg.sender, Mask(224, 32, arg2) >> 32) >> 32, mem[676 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[644]
                        else:
                            if arg1:
                                require ext_code.size(arg1)
                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32
                                call arg1 with:
                                     gas gas_remaining wei
                                    args arg2, 0, address(this.address), msg.sender, Mask(224, 32, arg2) >> 32 >> 224, mem[740 len 4]
                                if not return_data.size:
                                    require ext_call.success
                                    if arg2:
                                        require arg2 >= 32
                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                else:
                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    require ext_call.success
                                    if return_data.size:
                                        require return_data.size >= 32
                                        require mem[676]
            emit 0x3a0d9903: msg.sender, address(arg1), arg2, sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - arg2
        else:
            if not address(stor11.length):
                revert with 0, 'oracle not set'
            require ext_code.size(address(stor11.length))
            staticcall address(stor11.length).0xc2bc2efc with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            if not ext_call.return_data[32]:
                revert with 0, 'invalid token price'
            if not ext_call.return_data[0]:
                revert with 0, 'invalid token price'
            if not s:
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if 0 / ext_call.return_data[0] >= ext_call.return_data[0]:
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        revert with 0, 'uint sub overflow'
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        revert with 0, 'uint sub overflow'
                    if not address(stor11.length):
                        revert with 0, 'oracle not set'
                    require ext_code.size(address(stor11.length))
                    staticcall address(stor11.length).0xc2bc2efc with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not ext_call.return_data[32]:
                        revert with 0, 'invalid token price'
                    if not ext_call.return_data[0]:
                        revert with 0, 'invalid token price'
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'uint mul overflow'
                    if not 10^sub_de6843c3[address(arg1)].field_2816:
                        revert with 0, 'uint div by zero'
                    if s < ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                        revert with 0, 'account is short'
                    if sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                        revert with 0, 'uint add overflow'
                    if sub_4100b9f0[address(arg1)][msg.sender].field_0 > sub_de6843c3[address(arg1)].field_1024:
                        revert with 0, 'uint sub overflow'
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                            gas gas_remaining wei
                           args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 'uint r is not valid'
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                            gas gas_remaining wei
                           args 0, sub_de6843c3[address(arg1)].field_1536
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                            gas gas_remaining wei
                           args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 'uint r is not valid'
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                            gas gas_remaining wei
                           args 0, sub_de6843c3[address(arg1)].field_1536
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                    sub_de6843c3[address(arg1)].field_0 = block.timestamp
                    sub_de6843c3[address(arg1)].field_1024 -= sub_4100b9f0[address(arg1)][msg.sender].field_0
                    sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                    sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                    sub_4100b9f0[address(arg1)][msg.sender].field_0 = 0
                    sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                    if not ext_call.return_data[0]:
                        revert with 0, 'invalid safeTransferFrom amount'
                    if ext_call.return_data[0] >= ext_call.return_data[0]:
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                    else:
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                    emit 0x3a0d9903: msg.sender, address(arg1), ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, 0
                else:
                    if 0 / ext_call.return_data[0] >= ext_call.return_data[0]:
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 -= sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = 0
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, 0
                    else:
                        if 0 / ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if 0 / ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - (0 / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - (0 / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] - (0 / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args ext_call.return_data[0] - (0 / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] - (0 / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args ext_call.return_data[0] - (0 / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - (0 / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - (0 / ext_call.return_data[0])
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 0 / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 0 / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0 / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value 0 / ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 / ext_call.return_data[0]:
                                                require 0 / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 0 / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 0 / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0 / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < 0 / ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value 0 / ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                     gas gas_remaining wei
                                                    args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 0 / ext_call.return_data[0]:
                                                        require 0 / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 0 / ext_call.return_data[0]:
                                                        require 0 / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < 0 / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 0 / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 0 / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 0 / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 0 / ext_call.return_data[0]:
                                                    require 0 / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), 0 / ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - (0 / ext_call.return_data[0])
            else:
                if 10^sub_de6843c3[address(arg1)].field_2816 * s / s != 10^sub_de6843c3[address(arg1)].field_2816:
                    revert with 0, 'uint mul overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'uint div by zero'
                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= ext_call.return_data[0]:
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        revert with 0, 'uint sub overflow'
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        revert with 0, 'uint sub overflow'
                    if not address(stor11.length):
                        revert with 0, 'oracle not set'
                    require ext_code.size(address(stor11.length))
                    staticcall address(stor11.length).0xc2bc2efc with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not ext_call.return_data[32]:
                        revert with 0, 'invalid token price'
                    if not ext_call.return_data[0]:
                        revert with 0, 'invalid token price'
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'uint mul overflow'
                    if not 10^sub_de6843c3[address(arg1)].field_2816:
                        revert with 0, 'uint div by zero'
                    if s < ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                        revert with 0, 'account is short'
                    if sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                        revert with 0, 'uint add overflow'
                    if sub_4100b9f0[address(arg1)][msg.sender].field_0 > sub_de6843c3[address(arg1)].field_1024:
                        revert with 0, 'uint sub overflow'
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                            gas gas_remaining wei
                           args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 'uint r is not valid'
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                            gas gas_remaining wei
                           args 0, sub_de6843c3[address(arg1)].field_1536
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                            gas gas_remaining wei
                           args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 'uint r is not valid'
                    require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                    staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                            gas gas_remaining wei
                           args 0, sub_de6843c3[address(arg1)].field_1536
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                    sub_de6843c3[address(arg1)].field_0 = block.timestamp
                    sub_de6843c3[address(arg1)].field_1024 -= sub_4100b9f0[address(arg1)][msg.sender].field_0
                    sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                    sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                    sub_4100b9f0[address(arg1)][msg.sender].field_0 = 0
                    sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                    if not ext_call.return_data[0]:
                        revert with 0, 'invalid safeTransferFrom amount'
                    if ext_call.return_data[0] >= ext_call.return_data[0]:
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                    else:
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                    emit 0x3a0d9903: msg.sender, address(arg1), ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, 0
                else:
                    if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= ext_call.return_data[0]:
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args 0, sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 -= sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = 0
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                                call arg1 with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], Mask(224, 32, 0, msg.sender, ext_call.return_data[0 len 28]) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, ext_call.return_data[0 len 28]
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, address(this.address), msg.sender, ext_call.return_data[0 len 28] >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, 0
                    else:
                        if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] > ext_call.return_data[0]:
                            revert with 0, 'uint sub overflow'
                        if not address(stor11.length):
                            revert with 0, 'oracle not set'
                        require ext_code.size(address(stor11.length))
                        staticcall address(stor11.length).0xc2bc2efc with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not ext_call.return_data[32]:
                            revert with 0, 'invalid token price'
                        if not ext_call.return_data[0]:
                            revert with 0, 'invalid token price'
                        if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                            revert with 0, 'uint mul overflow'
                        if not 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'uint div by zero'
                        if s < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] * ext_call.return_data[0] / 10^sub_de6843c3[address(arg1)].field_2816:
                            revert with 0, 'account is short'
                        if ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 < sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint add overflow'
                        if sub_4100b9f0[address(arg1)][msg.sender].field_0 > ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024:
                            revert with 0, 'uint sub overflow'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1280, sub_de6843c3[address(arg1)].field_256, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0xa1d77967 with:
                                gas gas_remaining wei
                               args ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_256 = ext_call.return_data[0]
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x96e973f5 with:
                                gas gas_remaining wei
                               args sub_de6843c3[address(arg1)].field_1792, sub_de6843c3[address(arg1)].field_512, block.timestamp - sub_de6843c3[address(arg1)].field_0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        if sub_de6843c3[address(arg1)].field_1536 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 'uint r is not valid'
                        require ext_code.size(address(sub_de6843c3[address(arg1)].field_768))
                        staticcall address(sub_de6843c3[address(arg1)].field_768).0x4fc5f9cc with:
                                gas gas_remaining wei
                               args ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]), sub_de6843c3[address(arg1)].field_1536
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        sub_de6843c3[address(arg1)].field_512 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_0 = block.timestamp
                        sub_de6843c3[address(arg1)].field_1024 = ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) + sub_de6843c3[address(arg1)].field_1024 - sub_4100b9f0[address(arg1)][msg.sender].field_0
                        sub_de6843c3[address(arg1)].field_1280 = ext_call.return_data[0]
                        sub_de6843c3[address(arg1)].field_1792 = ext_call.return_data[0]
                        sub_4100b9f0[address(arg1)][msg.sender].field_0 = ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0])
                        sub_4100b9f0[address(arg1)][msg.sender].field_256 = ext_call.return_data[0]
                        if not 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                            revert with 0, 'invalid safeTransferFrom amount'
                        if this.address == this.address:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient balance'
                                if this.address == this.address:
                                    if not arg1:
                                        call msg.sender with:
                                           value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                             gas 2300 * is_zero(value) wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(arg1)
                                        mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[644]
                                else:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                        else:
                            if not arg1:
                                if this.address != this.address:
                                    if arg1:
                                        require ext_code.size(arg1)
                                        mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                        call arg1 with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                        if not return_data.size:
                                            require ext_call.success
                                            if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                        else:
                                            mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if return_data.size:
                                                require return_data.size >= 32
                                                require mem[676]
                                else:
                                    if eth.balance(this.address) < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient eth balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                            else:
                                require ext_code.size(arg1)
                                staticcall arg1.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                    revert with 0, 'Insufficient allowance'
                                if not arg1:
                                    if this.address != this.address:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                                    else:
                                        if eth.balance(this.address) < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                            revert with 0, 'Insufficient eth balance'
                                        if this.address == this.address:
                                            if not arg1:
                                                call msg.sender with:
                                                   value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                     gas 2300 * is_zero(value) wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            else:
                                                require ext_code.size(arg1)
                                                mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                        require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[644]
                                        else:
                                            if arg1:
                                                require ext_code.size(arg1)
                                                mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                                call arg1 with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                                if not return_data.size:
                                                    require ext_call.success
                                                    if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                        require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                        require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                                else:
                                                    mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    require ext_call.success
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        require mem[676]
                                else:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                        revert with 0, 'Insufficient balance'
                                    if this.address == this.address:
                                        if not arg1:
                                            call msg.sender with:
                                               value 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] wei
                                                 gas 2300 * is_zero(value) wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            require ext_code.size(arg1)
                                            mem[612 len 64] = 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], Mask(224, 32, 0, msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32) >> 32, mem[676 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[644]
                                    else:
                                        if arg1:
                                            require ext_code.size(arg1)
                                            mem[644 len 96] = 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32
                                            call arg1 with:
                                                 gas gas_remaining wei
                                                args 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], 0, address(this.address), msg.sender, Mask(224, 32, 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]) >> 32 >> 224, mem[740 len 4]
                                            if not return_data.size:
                                                require ext_call.success
                                                if 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0]:
                                                    require 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0] >= 32
                                                    require sub_4100b9f0[address(arg1)][msg.sender].field_0
                                            else:
                                                mem[676 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                require ext_call.success
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    require mem[676]
                        emit 0x3a0d9903: msg.sender, address(arg1), 10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0], sub_4100b9f0[address(arg1)][msg.sender].field_0, ext_call.return_data[0] - (10^sub_de6843c3[address(arg1)].field_2816 * s / ext_call.return_data[0])
    uint8(stor0.field_0) = 1
}



}
