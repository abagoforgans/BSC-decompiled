contract main {




// =====================  Runtime code  =====================


#
#  - redeem(address arg1, uint256 arg2)
#
uint256 stor0;
address authorityAddress;
address owner;
uint256 stor2;
uint8 stor3; offset 160
uint8 stor3; offset 168
address newOwner;
uint256 stor4;
uint256 stor5;
address feeRecipientAddress;
uint256 stor6;
uint256 stor6;
mapping of uint256 sub_8d2039b8;
address dispatcherAddress;
uint32 stor9;
address tokenAddress;
uint256 stor9;
address swapModelAddress;
array of uint256 name;
array of uint256 symbol;
uint8 decimals;
uint256 stor13; offset 8
uint256 stor13;
uint256 totalSupply;
mapping of struct balances;
mapping of uint256 allowance;
uint256 stor269D;
uint256 storB160;

function name() payable {
    return name[0 len name.length]
}

function totalSupply() payable {
    return totalSupply
}

function balances(address arg1) payable {
    require calldata.size - 4 >= 32
    return balances[arg1].field_0, balances[arg1].field_256, balances[arg1].field_512
}

function decimals() payable {
    return decimals
}

function feeRecipient() payable {
    return address(feeRecipientAddress)
}

function paused() payable {
    return bool(uint8(stor3.field_160))
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    return balances[address(arg1)].field_0
}

function sub_8d2039b8(?) payable {
    require calldata.size - 4 >= 32
    return sub_8d2039b8[Mask(32, 224, arg1)]
}

function owner() payable {
    return address(owner)
}

function swapModel() payable {
    return swapModelAddress
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function authority() payable {
    return authorityAddress
}

function dispatcher() payable {
    return dispatcherAddress
}

function newOwner() payable {
    return newOwner
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return allowance[arg1][arg2]
}

function token() payable {
    return address(tokenAddress)
}

function _fallback() payable {
    revert
}

function data() payable {
    return stor4, stor5
}

function disableOwnership() payable {
    if address(owner) != msg.sender:
        revert with 0, 'ds-auth-non-owner'
    address(owner) = 0
    emit OwnerUpdate(msg.sender, 0);
}

function setAuthority(address arg1) payable {
    require calldata.size - 4 >= 32
    if address(owner) != msg.sender:
        revert with 0, 'ds-auth-non-owner'
    authorityAddress = arg1
    emit LogSetAuthority(arg1);
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    allowance[msg.sender][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function acceptOwnership() payable {
    if newOwner != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    40,
                    0x724163636570744f776e6572736869703a206f6e6c79206e6577206f776e657220646f2074686973,
                    mem[204 len 24]
    emit OwnerUpdate(address(owner), newOwner);
    address(owner) = newOwner
    newOwner = 0
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if allowance[msg.sender][address(arg1)] + arg2 < allowance[msg.sender][address(arg1)]:
        revert with 0, 'ds-math-add-overflow'
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    allowance[msg.sender][address(arg1)] += arg2
    emit Approval((allowance[msg.sender][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if allowance[msg.sender][address(arg1)] - arg2 > allowance[msg.sender][address(arg1)]:
        revert with 0, 'ds-math-sub-underflow'
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    allowance[msg.sender][address(arg1)] -= arg2
    emit Approval((allowance[msg.sender][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if address(owner) != msg.sender:
        revert with 0, 'ds-auth-non-owner'
    if address(owner) == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x745472616e736665724f776e6572736869703a207468652073616d65206f776e6572,
                    mem[198 len 30]
    newOwner = arg1
}

function pause() payable {
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    uint8(stor3.field_160) = 1
    emit Paused(address(owner));
}

function unpause() payable {
    if not uint8(stor3.field_160):
        revert with 0, 'whenPaused: not paused'
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    uint8(stor3.field_160) = 0
    emit Unpaused(address(owner));
}

function setSwapModel(address arg1) payable {
    require calldata.size - 4 >= 32
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    64,
                    0x2e736574537761704d6f64656c3a2073776170206d6f64656c2063616e206265206e6f742073657420746f2030206f72207468652063757272656e74206f6e65
    if arg1 == swapModelAddress:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    64,
                    0x2e736574537761704d6f64656c3a2073776170206d6f64656c2063616e206265206e6f742073657420746f2030206f72207468652063757272656e74206f6e65
    swapModelAddress = arg1
    emit NewSwapModel(swapModelAddress, arg1);
}

function initialize(string arg1, string arg2, address arg3, address arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg2 <= 4294967296
    require arg2 + 36 <= calldata.size
    require arg2.length <= 4294967296 and arg2 + arg2.length + 36 <= calldata.size
    if uint8(stor3.field_168):
        revert with 0, 'initialize: Already initialized!'
    uint256(stor2) = msg.sender or Mask(96, 160, uint256(stor2))
    stor0 = 1
    uint256(stor6) = this.address or Mask(96, 160, uint256(stor6))
    name[] = Array(len=arg1.length, data=arg1[all])
    symbol[] = Array(len=arg2.length, data=arg2[all])
    address(tokenAddress) = arg3
    dispatcherAddress = arg4
    require ext_code.size(arg3)
    staticcall arg3.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    uint256(stor13.field_0) = Mask(248, 0, stor13.field_8)
    stor4 = 10^18
    uint8(stor3.field_168) = 1
    mem[ceil32(arg1.length) + ceil32(arg2.length) + 160] = 0
    mem[ceil32(arg1.length) + ceil32(arg2.length) + 192] = arg4
    emit NewDispatcher(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[ceil32(arg1.length) + arg2.length + 192 len -arg2.length + ceil32(arg2.length) + 32]);
}

function swap(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if not swapModelAddress:
        revert with 0, 'swap: no swap model available!'
    delegate swapModelAddress.0x0 with:
         gas gas_remaining wei
        args Mask(224, 32, arg2) << 224, mem[260 len 4]
    if not return_data.size:
        if not delegate.return_code:
            revert with 0, 32, 35, 0x64737761703a207377617020746f20616e6f7468657220746f6b656e206661696c6564, mem[299 len 29]
    else:
        if not delegate.return_code:
            revert with 0, 
                        32,
                        35,
                        0x64737761703a207377617020746f20616e6f7468657220746f6b656e206661696c6564,
                        mem[ceil32(return_data.size) + 300 len 29]
    ('bool', 'delegate.return_code')
}

function updateDispatcher(address arg1) payable {
    require calldata.size - 4 >= 32
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    68,
                    0x65757064617465446973706174636865723a20646973706174636865722063616e206265206e6f742073657420746f2030206f72207468652063757272656e74206f6e65,
                    mem[232 len 28]
    if arg1 == dispatcherAddress:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    68,
                    0x65757064617465446973706174636865723a20646973706174636865722063616e206265206e6f742073657420746f2030206f72207468652063757272656e74206f6e65,
                    mem[232 len 28]
    dispatcherAddress = arg1
    emit NewDispatcher(dispatcherAddress, arg1);
}

function updateOriginationFee(bytes4 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if arg2 >= 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x2e7570646174654f726967696e6174696f6e4665653a20696e636f727265637420666565,
                    mem[200 len 28]
    if sub_8d2039b8[Mask(32, 224, arg1)] == arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    56,
                    0x647570646174654f726967696e6174696f6e4665653a206665652068617320616c72656164792073657420746f20746869732076616c7565,
                    mem[220 len 8]
    sub_8d2039b8[Mask(32, 224, arg1)] = arg2
    emit NewOriginationFee(Mask(32, 224, arg1), sub_8d2039b8[Mask(32, 224, arg1)], arg2);
}

function setFeeRecipient(address arg1) payable {
    require calldata.size - 4 >= 32
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    69,
                    0x64736574466565526563697069656e743a20666565526563697069656e742063616e206265206e6f742073657420746f2030206f72207468652063757272656e74206f6e65,
                    mem[233 len 27]
    if arg1 == address(feeRecipientAddress):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    69,
                    0x64736574466565526563697069656e743a20666565526563697069656e742063616e206265206e6f742073657420746f2030206f72207468652063757272656e74206f6e65,
                    mem[233 len 27]
    address(feeRecipientAddress) = arg1
    emit FeeRecipientSet(address(feeRecipientAddress), arg1);
}

function update(string arg1, string arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg2 <= 4294967296
    require arg2 + 36 <= calldata.size
    require arg2.length <= 4294967296 and arg2 + arg2.length + 36 <= calldata.size
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    name.length = (2 * arg1.length) + 1
    s = 0
    idx = arg1 + 36
    while arg1 + arg1.length + 36 > idx:
        name[s] = cd[idx]
        s = s + 1
        idx = idx + 32
        continue 
    idx = Mask(251, 0, arg1.length + 31) >> 5
    while name.length + 31 / 32 > idx:
        name[idx] = 0
        idx = idx + 1
        continue 
    symbol.length = (2 * arg2.length) + 1
    s = 0
    idx = arg2 + 36
    while arg2 + arg2.length + 36 > idx:
        symbol[s] = cd[idx]
        s = s + 1
        idx = idx + 32
        continue 
    idx = Mask(251, 0, arg2.length + 31) >> 5
    while symbol.length + 31 / 32 > idx:
        symbol[idx] = 0
        idx = idx + 1
        continue 
}

function transferFee(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if this.address == address(feeRecipientAddress):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    56,
                    0x2e7472616e736665724665653a2043616e206e6f74207472616e7366657220666565206261636b20746f207468697320636f6e7472616374,
                    mem[220 len 8]
    require ext_code.size(arg1)
    call arg1.0xa9059cbb with:
         gas gas_remaining wei
        args address(feeRecipientAddress), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    if return_data.size:
        require return_data.size == 32
        if not ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        51,
                        0x657472616e736665724665653a20546f6b656e207472616e73666572206f7574206f6620636f6e7472616374206661696c6564,
                        mem[215 len 13]
    emit TransferFee(address(arg1), address(feeRecipientAddress), arg2);
}

function getHandlers() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _19 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _23 = mem[_19 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_19 + 96])] = mem[_19 + 128 len floor32(mem[_19 + 96])]
    mem[(32 * _23) + (32 * _7) + ceil32(return_data.size) + 160] = 32
    mem[(32 * _23) + (32 * _7) + ceil32(return_data.size) + 192] = mem[ceil32(return_data.size) + 96]
    mem[(32 * _23) + (32 * _7) + ceil32(return_data.size) + 224 len floor32(mem[ceil32(return_data.size) + 96])] = mem[ceil32(return_data.size) + 128 len floor32(mem[ceil32(return_data.size) + 96])]
    return 32, mem[(32 * _23) + (32 * _7) + ceil32(return_data.size) + 192 len (32 * mem[ceil32(return_data.size) + 96]) + 32]
}

function sub_81bc9053(?) payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _25 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _29 = mem[_25 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_25 + 96])] = mem[_25 + 128 len floor32(mem[_25 + 96])]
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _56 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_56))
        call address(_56).getRealLiquidity(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    return (s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96])
}

function totalUnderlying() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _25 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _29 = mem[_25 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_25 + 96])] = mem[_25 + 128 len floor32(mem[_25 + 96])]
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _56 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_56))
        call address(_56).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    return (s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96])
}

function getLiquidity() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _25 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _29 = mem[_25 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_25 + 96])] = mem[_25 + 128 len floor32(mem[_25 + 96])]
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _56 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_56))
        staticcall address(_56).getLiquidity(address rg1) with:
                gas gas_remaining wei
               args address(tokenAddress)
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    return (s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96])
}

function getTotalBalance() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _25 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _29 = mem[_25 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_25 + 96])] = mem[_25 + 128 len floor32(mem[_25 + 96])]
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _56 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_56))
        staticcall address(_56).getBalance(address rg1) with:
                gas gas_remaining wei
               args address(tokenAddress)
        mem[(32 * _29) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    return (s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96])
}

function getExchangeRate() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _29 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _33 = mem[_29 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_29 + 96])] = mem[_29 + 128 len floor32(mem[_29 + 96])]
    mem[64] = (32 * _33) + (32 * _7) + ceil32(return_data.size) + 160
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _68 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _33) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_68))
        staticcall address(_68).getBalance(address rg1) with:
                gas gas_remaining wei
               args address(tokenAddress)
        mem[(32 * _33) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    if not totalSupply:
        return 10^18
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
        revert with 0, 'ds-math-mul-overflow'
    if totalSupply <= 0:
        revert with 0, 'ds-math-div-overflow'
    if totalSupply:
        return (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply)
    revert
}

function currentExchangeRate() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _31 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _35 = mem[_31 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_31 + 96])] = mem[_31 + 128 len floor32(mem[_31 + 96])]
    mem[64] = (32 * _35) + (32 * _7) + ceil32(return_data.size) + 160
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _74 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _35) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_74))
        call address(_74).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _35) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    if 0 == totalSupply:
        return 10^18
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
        revert with 0, 'ds-math-mul-overflow'
    if totalSupply <= 0:
        revert with 0, 'ds-math-div-overflow'
    require totalSupply
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply <= 0:
        revert with 0, 'Exchange rate should not be 0!'
    return (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply)
}

function getHandlerInfo() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _124 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _128 = mem[_124 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_124 + 96])] = mem[_124 + 128 len floor32(mem[_124 + 96])]
    _241 = mem[ceil32(return_data.size) + 96]
    mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160] = mem[ceil32(return_data.size) + 96]
    if not mem[ceil32(return_data.size) + 96]:
        _244 = (32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * mem[ceil32(return_data.size) + 96]) + 192
        mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * mem[ceil32(return_data.size) + 96]) + 192] = mem[ceil32(return_data.size) + 96]
        mem[64] = (32 * _128) + (32 * _7) + ceil32(return_data.size) + (64 * mem[ceil32(return_data.size) + 96]) + 224
        if not mem[ceil32(return_data.size) + 96]:
            _351 = mem[ceil32(return_data.size) + 96]
            idx = 0
            while idx < _351:
                require idx < mem[ceil32(return_data.size) + 96]
                _362 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64] + 4] = address(tokenAddress)
                require ext_code.size(address(_362))
                call address(_362).getRealBalance(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require idx < mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
                mem[(32 * idx) + (32 * _128) + (32 * _7) + ceil32(return_data.size) + 192] = ext_call.return_data[0]
                require idx < mem[ceil32(return_data.size) + 96]
                _423 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[mem[64] + 4] = address(tokenAddress)
                require ext_code.size(address(_423))
                call address(_423).getRealLiquidity(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require idx < mem[_244]
                mem[(32 * idx) + _244 + 32] = ext_call.return_data[0]
                _351 = mem[ceil32(return_data.size) + 96]
                idx = idx + 1
                continue 
            _359 = mem[64]
            mem[mem[64]] = 96
            mem[mem[64] + 96] = mem[ceil32(return_data.size) + 96]
            _361 = mem[ceil32(return_data.size) + 96]
            mem[mem[64] + 128 len floor32(mem[ceil32(return_data.size) + 96])] = mem[ceil32(return_data.size) + 128 len floor32(mem[ceil32(return_data.size) + 96])]
            mem[mem[64] + 32] = (32 * _361) + 128
            mem[(32 * _361) + _359 + 128] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
            _456 = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
            mem[(32 * _361) + _359 + 160 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 192 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])]
            mem[_359 + 64] = (32 * _456) + (32 * _361) + 160
            mem[(32 * _456) + (32 * _361) + _359 + 160] = mem[_244]
            _488 = mem[_244]
            s = 0
            while _351 < 32 * _488:
                mem[_351 + (32 * _456) + (32 * _361) + _359 + 192] = mem[_351 + _244 + 32]
                s = _351 + 32
                continue 
            return memory
              from mem[64]
               len (32 * _488) + (32 * _456) + (32 * _361) + _359 + -mem[64] + 192
        mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * mem[ceil32(return_data.size) + 96]) + 224 len 32 * mem[ceil32(return_data.size) + 96]] = code.data[23695 len 32 * mem[ceil32(return_data.size) + 96]]
        _352 = mem[ceil32(return_data.size) + 96]
        idx = 0
        while idx < _352:
            require idx < mem[ceil32(return_data.size) + 96]
            _368 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64] + 4] = address(tokenAddress)
            require ext_code.size(address(_368))
            call address(_368).getRealBalance(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require idx < mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
            mem[(32 * idx) + (32 * _128) + (32 * _7) + ceil32(return_data.size) + 192] = ext_call.return_data[0]
            require idx < mem[ceil32(return_data.size) + 96]
            _426 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64] + 4] = address(tokenAddress)
            require ext_code.size(address(_426))
            call address(_426).getRealLiquidity(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require idx < mem[_244]
            mem[(32 * idx) + _244 + 32] = ext_call.return_data[0]
            _352 = mem[ceil32(return_data.size) + 96]
            idx = idx + 1
            continue 
        _365 = mem[64]
        mem[mem[64]] = 96
        mem[mem[64] + 96] = mem[ceil32(return_data.size) + 96]
        _367 = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 128 len floor32(mem[ceil32(return_data.size) + 96])] = mem[ceil32(return_data.size) + 128 len floor32(mem[ceil32(return_data.size) + 96])]
        mem[mem[64] + 32] = (32 * _367) + 128
        mem[(32 * _367) + _365 + 128] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
        _459 = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
        mem[(32 * _367) + _365 + 160 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 192 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])]
        mem[_365 + 64] = (32 * _459) + (32 * _367) + 160
        mem[(32 * _459) + (32 * _367) + _365 + 160] = mem[_244]
        _491 = mem[_244]
        s = 0
        while _352 < 32 * _491:
            mem[_352 + (32 * _459) + (32 * _367) + _365 + 192] = mem[_352 + _244 + 32]
            s = _352 + 32
            continue 
        return memory
          from mem[64]
           len (32 * _491) + (32 * _459) + (32 * _367) + _365 + -mem[64] + 192
    mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 192 len 32 * mem[ceil32(return_data.size) + 96]] = code.data[23695 len 32 * mem[ceil32(return_data.size) + 96]]
    mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * mem[ceil32(return_data.size) + 96]) + 192] = mem[ceil32(return_data.size) + 96]
    mem[64] = (32 * _128) + (32 * _7) + ceil32(return_data.size) + (64 * mem[ceil32(return_data.size) + 96]) + 224
    if not mem[ceil32(return_data.size) + 96]:
        _353 = mem[ceil32(return_data.size) + 96]
        idx = 0
        while idx < _353:
            require idx < mem[ceil32(return_data.size) + 96]
            _374 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64] + 4] = address(tokenAddress)
            require ext_code.size(address(_374))
            call address(_374).getRealBalance(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require idx < mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
            mem[(32 * idx) + (32 * _128) + (32 * _7) + ceil32(return_data.size) + 192] = ext_call.return_data[0]
            require idx < mem[ceil32(return_data.size) + 96]
            _429 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[mem[64] + 4] = address(tokenAddress)
            require ext_code.size(address(_429))
            call address(_429).getRealLiquidity(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require idx < mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 192]
            mem[(32 * idx) + (32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 224] = ext_call.return_data[0]
            _353 = mem[ceil32(return_data.size) + 96]
            idx = idx + 1
            continue 
        _371 = mem[64]
        mem[mem[64]] = 96
        mem[mem[64] + 96] = mem[ceil32(return_data.size) + 96]
        _373 = mem[ceil32(return_data.size) + 96]
        mem[mem[64] + 128 len floor32(mem[ceil32(return_data.size) + 96])] = mem[ceil32(return_data.size) + 128 len floor32(mem[ceil32(return_data.size) + 96])]
        mem[_371 + 32] = (32 * _373) + 128
        mem[(32 * _373) + _371 + 128] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
        _462 = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
        mem[(32 * _373) + _371 + 160 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 192 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])]
        mem[_371 + 64] = (32 * _462) + (32 * _373) + 160
        mem[(32 * _462) + (32 * _373) + _371 + 160] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 192]
        _494 = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 192]
        s = 0
        while _353 < 32 * _494:
            mem[_353 + (32 * _462) + (32 * _373) + _371 + 192] = mem[_353 + (32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 224]
            s = _353 + 32
            continue 
        return memory
          from mem[64]
           len (32 * _494) + (32 * _462) + (32 * _373) + _371 + -mem[64] + 192
    mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * mem[ceil32(return_data.size) + 96]) + 224 len 32 * mem[ceil32(return_data.size) + 96]] = code.data[23695 len 32 * mem[ceil32(return_data.size) + 96]]
    _354 = mem[ceil32(return_data.size) + 96]
    idx = 0
    while idx < _354:
        require idx < mem[ceil32(return_data.size) + 96]
        _380 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[mem[64] + 4] = address(tokenAddress)
        require ext_code.size(address(_380))
        call address(_380).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require idx < mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
        mem[(32 * idx) + (32 * _128) + (32 * _7) + ceil32(return_data.size) + 192] = ext_call.return_data[0]
        require idx < mem[ceil32(return_data.size) + 96]
        _432 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[mem[64] + 4] = address(tokenAddress)
        require ext_code.size(address(_432))
        call address(_432).getRealLiquidity(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require idx < mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 192]
        mem[(32 * idx) + (32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 224] = ext_call.return_data[0]
        _354 = mem[ceil32(return_data.size) + 96]
        idx = idx + 1
        continue 
    _377 = mem[64]
    mem[mem[64]] = 96
    mem[mem[64] + 96] = mem[ceil32(return_data.size) + 96]
    _379 = mem[ceil32(return_data.size) + 96]
    mem[mem[64] + 128 len floor32(mem[ceil32(return_data.size) + 96])] = mem[ceil32(return_data.size) + 128 len floor32(mem[ceil32(return_data.size) + 96])]
    mem[mem[64] + 32] = (32 * _379) + 128
    mem[(32 * _379) + _377 + 128] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
    _465 = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160]
    mem[(32 * _379) + _377 + 160 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 192 len floor32(mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + 160])]
    mem[_377 + 64] = (32 * _465) + (32 * _379) + 160
    mem[(32 * _465) + (32 * _379) + _377 + 160] = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 192]
    _497 = mem[(32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 192]
    s = 0
    while _354 < 32 * _497:
        mem[_354 + (32 * _465) + (32 * _379) + _377 + 192] = mem[_354 + (32 * _128) + (32 * _7) + ceil32(return_data.size) + (32 * _241) + 224]
        s = _354 + 32
        continue 
    return memory
      from mem[64]
       len (32 * _497) + (32 * _465) + (32 * _379) + _377 + -mem[64] + 192
}

function sub_ff1907a2(?) payable {
    require calldata.size - 4 >= 128
    require cd[4] <= 4294967296
    require cd[4] + 36 <= calldata.size
    require ('cd', 4).length <= 4294967296 and cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    require cd[36] <= 4294967296
    require cd[36] + 36 <= calldata.size
    require ('cd', 36).length <= 4294967296 and cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    require cd[68] <= 4294967296
    require cd[68] + 36 <= calldata.size
    require ('cd', 68).length <= 4294967296 and cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    require cd[100] <= 4294967296
    require cd[100] + 36 <= calldata.size
    require ('cd', 100).length <= 4294967296 and cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    if msg.sender != this.address:
        if address(owner) != msg.sender:
            if not authorityAddress:
                revert with 0, '.ds-auth-unauthorized'
            mem[132] = this.address
            mem[164] = call.func_hash
            require ext_code.size(authorityAddress)
            staticcall authorityAddress.canCall(address rg1, address rg2, bytes4 rg3) with:
                    gas gas_remaining wei
                   args msg.sender, this.address, call.func_hash
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, '.ds-auth-unauthorized'
    if ('cd', 36).length != ('cd', 4).length:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    58,
                    0x726562616c616e63653a20746865206c656e677468206f662061646472657373657320616e6420616d6f756e7473206d757374206d6174636800,
                    mem[222 len 6]
    if ('cd', 100).length != ('cd', 68).length:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    58,
                    0x726562616c616e63653a20746865206c656e677468206f662061646472657373657320616e6420616d6f756e7473206d757374206d6174636800,
                    mem[222 len 6]
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.defaultHandler() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ('cd', 36).length:
        mem[128 len 32 * ('cd', 36).length] = code.data[23695 len 32 * ('cd', 36).length]
    mem[(32 * ('cd', 36).length) + 128] = ('cd', 100).length
    if ('cd', 100).length:
        mem[(32 * ('cd', 36).length) + 160 len 32 * ('cd', 100).length] = code.data[23695 len 32 * ('cd', 100).length]
    idx = 0
    while idx < ('cd', 4).length:
        require idx < ('cd', 36).length
        if cd[((32 * idx) + cd[36] + 36)] != 0:
            require idx < ('cd', 4).length
            if address(ext_call.return_data[0]) != address(cd[((32 * idx) + cd[4] + 36)]):
                require idx < ('cd', 36).length
                if cd[((32 * idx) + cd[36] + 36)] != -1:
                    require idx < ('cd', 36).length
                    require idx < ('cd', 36).length
                    mem[(32 * idx) + 128] = cd[((32 * idx) + cd[36] + 36)]
                    require idx < ('cd', 36).length
                    require idx < ('cd', 4).length
                    require idx < ('cd', 36).length
                    require ext_code.size(address(cd[((32 * idx) + cd[4] + 36)]))
                    call address(cd[((32 * idx) + cd[4] + 36)]).withdraw(address rg1, uint256 rg2) with:
                         gas gas_remaining wei
                        args address(tokenAddress), cd[((32 * idx) + cd[36] + 36)]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] != cd[((32 * idx) + cd[36] + 36)]:
                        revert with 0, 
                                    32,
                                    60,
                                    0x64726562616c616e63653a2061637475616c207769746864726f776e20616d6f756e7420646f6573206e6f74206d61746368207468652077616e7465,
                                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 288 len 4]
                    require idx < ('cd', 4).length
                    require idx < ('cd', 36).length
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 160] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 164] = address(cd[((32 * idx) + cd[4] + 36)])
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 196] = address(ext_call.return_data[0])
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 228] = cd[((32 * idx) + cd[36] + 36)]
                    require ext_code.size(address(tokenAddress))
                    call address(tokenAddress).0x23b872dd with:
                         gas gas_remaining wei
                        args address(cd[((32 * idx) + cd[4] + 36)]), address(ext_call.return_data[0]), cd[((32 * idx) + cd[36] + 36)]
                else:
                    require idx < ('cd', 4).length
                    require ext_code.size(address(cd[((32 * idx) + cd[4] + 36)]))
                    call address(cd[((32 * idx) + cd[4] + 36)]).getRealBalance(address rg1) with:
                         gas gas_remaining wei
                        args address(tokenAddress)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require idx < ('cd', 36).length
                    mem[(32 * idx) + 128] = ext_call.return_data[0]
                    require idx < ('cd', 36).length
                    require idx < ('cd', 4).length
                    require idx < ('cd', 36).length
                    require ext_code.size(address(cd[((32 * idx) + cd[4] + 36)]))
                    call address(cd[((32 * idx) + cd[4] + 36)]).withdraw(address rg1, uint256 rg2) with:
                         gas gas_remaining wei
                        args address(tokenAddress), cd[((32 * idx) + cd[36] + 36)]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    60,
                                    0x64726562616c616e63653a2061637475616c207769746864726f776e20616d6f756e7420646f6573206e6f74206d61746368207468652077616e7465,
                                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 288 len 4]
                    require idx < ('cd', 4).length
                    require idx < ('cd', 36).length
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 160] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 164] = address(cd[((32 * idx) + cd[4] + 36)])
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 196] = address(ext_call.return_data[0])
                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 228] = ext_call.return_data[0]
                    require ext_code.size(address(tokenAddress))
                    call address(tokenAddress).0x23b872dd with:
                         gas gas_remaining wei
                        args address(cd[((32 * idx) + cd[4] + 36)]), address(ext_call.return_data[0]), ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if return_data.size:
                    require return_data.size == 32
                    mem[0] = ext_call.return_data[0]
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    45,
                                    0x65726562616c616e63653a207472616e7366657220746f2064656661756c742068616e646c6572206661696c65,
                                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 273 len 19]
        idx = idx + 1
        continue 
    idx = 0
    while idx < ('cd', 68).length:
        require ext_code.size(dispatcherAddress)
        staticcall dispatcherAddress.isHandlerActive(address rg1) with:
                gas gas_remaining wei
               args address(cd[((32 * idx) + cd[68] + 36)])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 
                        32,
                        49,
                        0x64726562616c616e63653a20626f74682068616e646c657220616e6420746f6b656e206d75737420626520656e61626c65,
                        mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 277 len 15]
        require idx < ('cd', 68).length
        mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 164] = address(tokenAddress)
        require ext_code.size(address(cd[((32 * idx) + cd[68] + 36)]))
        staticcall address(cd[((32 * idx) + cd[68] + 36)]).tokenIsEnabled(address rg1) with:
                gas gas_remaining wei
               args address(tokenAddress)
        mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 
                        32,
                        49,
                        0x64726562616c616e63653a20626f74682068616e646c657220616e6420746f6b656e206d75737420626520656e61626c65,
                        mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 277 len 15]
        require idx < ('cd', 100).length
        if cd[((32 * idx) + cd[100] + 36)] != 0:
            require idx < ('cd', 68).length
            if address(ext_call.return_data[0]) != address(cd[((32 * idx) + cd[68] + 36)]):
                require idx < ('cd', 68).length
                require idx < ('cd', 100).length
                mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 228] = cd[((32 * idx) + cd[100] + 36)]
                require ext_code.size(address(tokenAddress))
                call address(tokenAddress).0x23b872dd with:
                     gas gas_remaining wei
                    args address(ext_call.return_data[0]), address(cd[((32 * idx) + cd[68] + 36)]), cd[((32 * idx) + cd[100] + 36)]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if return_data.size:
                    require return_data.size == 32
                    mem[0] = ext_call.return_data[0]
                    if not ext_call.return_data[0]:
                        revert with 0, 
                                    32,
                                    44,
                                    0x64726562616c616e63653a207472616e7366657220746f207461726765742068616e646c6572206661696c65,
                                    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 272 len 20]
                require idx < ('cd', 68).length
                require idx < ('cd', 100).length
                mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 164] = address(tokenAddress)
                mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 196] = cd[((32 * idx) + cd[100] + 36)]
                require ext_code.size(address(cd[((32 * idx) + cd[68] + 36)]))
                call address(cd[((32 * idx) + cd[68] + 36)]).deposit(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args address(tokenAddress), cd[((32 * idx) + cd[100] + 36)]
                mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require idx < mem[(32 * ('cd', 36).length) + 128]
                mem[(32 * idx) + (32 * ('cd', 36).length) + 160] = ext_call.return_data[0]
                require idx < mem[(32 * ('cd', 36).length) + 128]
                if ext_call.return_data[0] <= 0:
                    revert with 0, 
                                32,
                                48,
                                0x64726562616c616e63653a206465706f73697420746f20746865207461726765742070726f746f63616c206661696c65,
                                mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 276 len 16]
                require idx < ('cd', 100).length
                require idx < mem[(32 * ('cd', 36).length) + 128]
                if ext_call.return_data[0] > cd[((32 * idx) + cd[100] + 36)]:
                    revert with 0, 
                                32,
                                48,
                                0x64726562616c616e63653a206465706f73697420746f20746865207461726765742070726f746f63616c206661696c65,
                                mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 276 len 16]
        idx = idx + 1
        continue 
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 160] = 128
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 288] = ('cd', 4).length
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 320 len 32 * ('cd', 4).length] = call.data[cd[4] + 36 len 32 * ('cd', 4).length]
    mem[(32 * ('cd', 4).length) + (32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 320] = 0
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 192] = floor32(('cd', 4).length) + 160
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + 320] = ('cd', 36).length
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + 352 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
    mem[(64 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + 352] = 0
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 224] = floor32(('cd', 4).length) + floor32(('cd', 36).length) + 192
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + floor32(('cd', 36).length) + 352] = ('cd', 68).length
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + floor32(('cd', 36).length) + 384 len 32 * ('cd', 68).length] = call.data[cd[68] + 36 len 32 * ('cd', 68).length]
    mem[(32 * ('cd', 68).length) + (32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + floor32(('cd', 36).length) + 384] = 0
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 256] = floor32(('cd', 4).length) + floor32(('cd', 36).length) + floor32(('cd', 68).length) + 224
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + floor32(('cd', 36).length) + floor32(('cd', 68).length) + 384] = mem[(32 * ('cd', 36).length) + 128]
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + floor32(('cd', 36).length) + floor32(('cd', 68).length) + 416 len floor32(mem[(32 * ('cd', 36).length) + 128])] = mem[(32 * ('cd', 36).length) + 160 len floor32(mem[(32 * ('cd', 36).length) + 128])]
    emit Rebalance(Array(len=('cd', 4).length, data=mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + 320 len floor32(('cd', 4).length) + 32], call.data[cd[36] + 36 len floor32(('cd', 36).length)], ('cd', 68).length, mem[(32 * ('cd', 36).length) + (32 * ('cd', 100).length) + floor32(('cd', 4).length) + floor32(('cd', 36).length) + 384 len (32 * mem[(32 * ('cd', 36).length) + 128]) + floor32(('cd', 68).length) + 32]), floor32(('cd', 4).length) + 160, floor32(('cd', 4).length) + floor32(('cd', 36).length) + 192, floor32(('cd', 4).length) + floor32(('cd', 36).length) + floor32(('cd', 68).length) + 224);
}

function getTokenBalance(address arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = arg1
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _5 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _8 = mem[_5 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_5 + 96])] = mem[_5 + 128 len floor32(mem[_5 + 96])]
    mem[64] = (32 * _8) + ceil32(return_data.size) + 128
    _36 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _8) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _40 = mem[_36 + 96]
    mem[(32 * _8) + ceil32(return_data.size) + 160 len floor32(mem[_36 + 96])] = mem[_36 + 128 len floor32(mem[_36 + 96])]
    mem[64] = (32 * _40) + (32 * _8) + ceil32(return_data.size) + 160
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _87 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _40) + (32 * _8) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_87))
        staticcall address(_87).getBalance(address rg1) with:
                gas gas_remaining wei
               args address(tokenAddress)
        mem[(32 * _40) + (32 * _8) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    if not totalSupply:
        if 10^18 * balances[address(arg1)].field_0 / 10^18 != balances[address(arg1)].field_0:
            revert with 0, 'ds-math-mul-overflow'
        return (10^18 * balances[address(arg1)].field_0 / 10^18)
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
        revert with 0, 'ds-math-mul-overflow'
    if totalSupply <= 0:
        revert with 0, 'ds-math-div-overflow'
    require totalSupply
    if not 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
        return 0
    require 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
    if balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply != balances[address(arg1)].field_0:
        revert with 0, 'ds-math-mul-overflow'
    return (balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18)
}

function getCurrentInterest(address arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = arg1
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _5 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _8 = mem[_5 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_5 + 96])] = mem[_5 + 128 len floor32(mem[_5 + 96])]
    mem[64] = (32 * _8) + ceil32(return_data.size) + 128
    _56 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _8) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _60 = mem[_56 + 96]
    mem[(32 * _8) + ceil32(return_data.size) + 160 len floor32(mem[_56 + 96])] = mem[_56 + 128 len floor32(mem[_56 + 96])]
    mem[64] = (32 * _60) + (32 * _8) + ceil32(return_data.size) + 160
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _147 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _60) + (32 * _8) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_147))
        staticcall address(_147).getBalance(address rg1) with:
                gas gas_remaining wei
               args address(tokenAddress)
        mem[(32 * _60) + (32 * _8) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    if not totalSupply:
        if -balances[address(arg1)].field_256 + 10^18 > 10^18:
            revert with 0, 'ds-math-sub-underflow'
        if not balances[address(arg1)].field_0:
            if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                revert with 0, 'ds-math-add-overflow'
            return balances[address(arg1)].field_512
        require balances[address(arg1)].field_0
        if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
            revert with 0, 'ds-math-mul-overflow'
        if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
            revert with 0, 'ds-math-add-overflow'
        return (balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18))
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
        revert with 0, 'ds-math-mul-overflow'
    if totalSupply <= 0:
        revert with 0, 'ds-math-div-overflow'
    require totalSupply
    if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
        revert with 0, 'ds-math-sub-underflow'
    if not balances[address(arg1)].field_0:
        if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
            revert with 0, 'ds-math-add-overflow'
        return balances[address(arg1)].field_512
    require balances[address(arg1)].field_0
    if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg1)].field_256:
        revert with 0, 'ds-math-mul-overflow'
    if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
        revert with 0, 'ds-math-add-overflow'
    return (balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18))
}

function getBaseData() payable {
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _4 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _53 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _57 = mem[_53 + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 160 len floor32(mem[_53 + 96])] = mem[_53 + 128 len floor32(mem[_53 + 96])]
    _138 = mem[ceil32(return_data.size) + 96]
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _140 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_140))
        call address(_140).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        _138 = mem[ceil32(return_data.size) + 96]
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160
    require return_data.size >= 64
    _148 = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160]
    require mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] <= 4294967296
    require mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] + 32 <= return_data.size
    require mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] + 160] <= 4294967296 and mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] + (32 * mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] + 160]) + 32 <= return_data.size
    mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 160] + 160]
    _153 = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _148 + 160]
    mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 192 len floor32(mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _148 + 160])] = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _148 + 192 len floor32(mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _148 + 160])]
    _177 = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192]
    require mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192] <= 4294967296
    require mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192] + 32 <= return_data.size
    require mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192] + 160] <= 4294967296 and mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192] + (32 * mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192] + 160]) + 32 <= return_data.size
    mem[(32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 192] = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + 192] + 160]
    _181 = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _177 + 160]
    mem[(32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _177 + 160])] = mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _177 + 192 len floor32(mem[(32 * _57) + (32 * _7) + ceil32(return_data.size) + _177 + 160])]
    mem[64] = (32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224
    idx = 0
    t = 0
    while idx < mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160]:
        require idx < mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160]
        _220 = mem[(32 * idx) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 192]
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 228] = address(tokenAddress)
        require ext_code.size(address(_220))
        call address(_220).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if t + ext_call.return_data[0] >= t:
            idx = idx + 1
            t = t + ext_call.return_data[0]
            continue 
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 228] = 32
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 260] = 20
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 292] = 'ds-math-add-overflow' << 96
        revert with memory
          from (32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224
           len ceil32(return_data.size) + 100
    if 0 == totalSupply:
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = decimals
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 256] = 10^18
    else:
        if 10^18 * t * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] / 10^18 != t * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160]:
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 228] = 32
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 260] = 20
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 292] = 'ds-math-mul-overflow' << 96
            revert with memory
              from (32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224
               len ceil32(return_data.size) + 100
        if totalSupply <= 0:
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 228] = 32
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 260] = 20
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 292] = 'ds-math-div-overflow' << 96
            revert with memory
              from (32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224
               len ceil32(return_data.size) + 100
        require totalSupply
        if 10^18 * t * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] / totalSupply <= 0:
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 228] = 32
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 260] = 30
            mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 292] = 'Exchange rate should not be 0!'
            revert with memory
              from (32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224
               len ceil32(return_data.size) + 100
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224] = decimals
        mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 256] = 10^18 * t * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] * mem[(32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 160] / totalSupply
    mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 288] = stor269D
    mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 320] = storB160
    mem[(32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 352] = s * _138 * _138 * _138
    return memory
      from (32 * _181) + (32 * _153) + (32 * _57) + (32 * _7) + (2 * ceil32(return_data.size)) + 224
       len ceil32(return_data.size) + 160
}

function balanceOfUnderlying(address arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = arg1
    mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.0x3801a828 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 64
    _5 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _8 = mem[_5 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_5 + 96])] = mem[_5 + 128 len floor32(mem[_5 + 96])]
    mem[64] = (32 * _8) + ceil32(return_data.size) + 128
    _58 = mem[128]
    require mem[128] <= 4294967296
    require mem[128] + 32 <= return_data.size
    require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
    mem[(32 * _8) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
    _62 = mem[_58 + 96]
    mem[(32 * _8) + ceil32(return_data.size) + 160 len floor32(mem[_58 + 96])] = mem[_58 + 128 len floor32(mem[_58 + 96])]
    mem[64] = (32 * _62) + (32 * _8) + ceil32(return_data.size) + 160
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _153 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        mem[(32 * _62) + (32 * _8) + ceil32(return_data.size) + 164] = address(tokenAddress)
        require ext_code.size(address(_153))
        call address(_153).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _62) + (32 * _8) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    if 0 == totalSupply:
        if 10^18 * balances[address(arg1)].field_0 / 10^18 != balances[address(arg1)].field_0:
            revert with 0, 'ds-math-mul-overflow'
        if not storB160:
            if 10^18 * balances[address(arg1)].field_0 / 10^18 > 10^18 * balances[address(arg1)].field_0 / 10^18:
                revert with 0, 'ds-math-sub-underflow'
            return (10^18 * balances[address(arg1)].field_0 / 10^18)
        require storB160
        if 10^18 * balances[address(arg1)].field_0 / 10^18 * storB160 / storB160 != 10^18 * balances[address(arg1)].field_0 / 10^18:
            revert with 0, 'ds-math-mul-overflow'
        if (10^18 * balances[address(arg1)].field_0 / 10^18) - (10^18 * balances[address(arg1)].field_0 / 10^18 * storB160 / 10^18) > 10^18 * balances[address(arg1)].field_0 / 10^18:
            revert with 0, 'ds-math-sub-underflow'
        return ((10^18 * balances[address(arg1)].field_0 / 10^18) - (10^18 * balances[address(arg1)].field_0 / 10^18 * storB160 / 10^18))
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
        revert with 0, 'ds-math-mul-overflow'
    if totalSupply <= 0:
        revert with 0, 'ds-math-div-overflow'
    require totalSupply
    if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply <= 0:
        revert with 0, 'Exchange rate should not be 0!'
    if not 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
        if storB160:
            require storB160
            if 0 / storB160:
                revert with 0, 'ds-math-mul-overflow'
            else:
                return 0
        else:
            return 0
    require 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
    if balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply != balances[address(arg1)].field_0:
        revert with 0, 'ds-math-mul-overflow'
    if not storB160:
        if balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18 > balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18:
            revert with 0, 'ds-math-sub-underflow'
        return (balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18)
    require storB160
    if balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18 * storB160 / storB160 != balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18:
        revert with 0, 'ds-math-mul-overflow'
    if (balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18) - (balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18 * storB160 / 10^18) > balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18:
        revert with 0, 'ds-math-sub-underflow'
    return ((balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18) - (balances[address(arg1)].field_0 * 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply / 10^18 * storB160 / 10^18))
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if stor0 == 2:
        revert with 0, 'eReentrancyGuard: reentrant call'
    stor0 = 2
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    mem[0] = arg1
    if arg3 > balances[address(arg1)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0xfe7472616e7366657246726f6d3a20696e73756666696369656e742062616c616e63,
                    mem[198 len 30]
    if msg.sender == arg1:
        mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
        require ext_code.size(dispatcherAddress)
        staticcall dispatcherAddress.0x3801a828 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 64
        _25 = mem[96]
        require mem[96] <= 4294967296
        require mem[96] + 32 <= return_data.size
        require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
        _33 = mem[_25 + 96]
        mem[ceil32(return_data.size) + 128 len floor32(mem[_25 + 96])] = mem[_25 + 128 len floor32(mem[_25 + 96])]
        mem[64] = (32 * _33) + ceil32(return_data.size) + 128
        _1666 = mem[128]
        require mem[128] <= 4294967296
        require mem[128] + 32 <= return_data.size
        require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
        mem[(32 * _33) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
        _1678 = mem[_1666 + 96]
        mem[(32 * _33) + ceil32(return_data.size) + 160 len floor32(mem[_1666 + 96])] = mem[_1666 + 128 len floor32(mem[_1666 + 96])]
        mem[64] = (32 * _1678) + (32 * _33) + ceil32(return_data.size) + 160
        idx = 0
        s = 0
        while idx < mem[ceil32(return_data.size) + 96]:
            require idx < mem[ceil32(return_data.size) + 96]
            _4903 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[(32 * _1678) + (32 * _33) + ceil32(return_data.size) + 164] = address(tokenAddress)
            require ext_code.size(address(_4903))
            call address(_4903).getRealBalance(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[(32 * _1678) + (32 * _33) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if s + ext_call.return_data[0] < s:
                revert with 0, 'ds-math-add-overflow'
            idx = idx + 1
            s = s + ext_call.return_data[0]
            continue 
    else:
        mem[0] = msg.sender
        if -1 == allowance[address(arg1)][msg.sender]:
            mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
            require ext_code.size(dispatcherAddress)
            staticcall dispatcherAddress.0x3801a828 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 64
            _30 = mem[96]
            require mem[96] <= 4294967296
            require mem[96] + 32 <= return_data.size
            require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
            _37 = mem[_30 + 96]
            mem[ceil32(return_data.size) + 128 len floor32(mem[_30 + 96])] = mem[_30 + 128 len floor32(mem[_30 + 96])]
            mem[64] = (32 * _37) + ceil32(return_data.size) + 128
            _1669 = mem[128]
            require mem[128] <= 4294967296
            require mem[128] + 32 <= return_data.size
            require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
            mem[(32 * _37) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
            _1679 = mem[_1669 + 96]
            mem[(32 * _37) + ceil32(return_data.size) + 160 len floor32(mem[_1669 + 96])] = mem[_1669 + 128 len floor32(mem[_1669 + 96])]
            mem[64] = (32 * _1679) + (32 * _37) + ceil32(return_data.size) + 160
            idx = 0
            s = 0
            while idx < mem[ceil32(return_data.size) + 96]:
                require idx < mem[ceil32(return_data.size) + 96]
                _4906 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[(32 * _1679) + (32 * _37) + ceil32(return_data.size) + 164] = address(tokenAddress)
                require ext_code.size(address(_4906))
                call address(_4906).getRealBalance(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[(32 * _1679) + (32 * _37) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if s + ext_call.return_data[0] < s:
                    revert with 0, 'ds-math-add-overflow'
                idx = idx + 1
                s = s + ext_call.return_data[0]
                continue 
        else:
            if arg3 > allowance[address(arg1)][msg.sender]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            36,
                            0x647472616e7366657246726f6d3a20696e73756666696369656e7420616c6c6f77616e63,
                            mem[200 len 28]
            if allowance[address(arg1)][msg.sender] - arg3 > allowance[address(arg1)][msg.sender]:
                revert with 0, 'ds-math-sub-underflow'
            mem[0] = msg.sender
            allowance[address(arg1)][msg.sender] -= arg3
            mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
            require ext_code.size(dispatcherAddress)
            staticcall dispatcherAddress.0x3801a828 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 64
            _45 = mem[96]
            require mem[96] <= 4294967296
            require mem[96] + 32 <= return_data.size
            require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
            _52 = mem[_45 + 96]
            mem[ceil32(return_data.size) + 128 len floor32(mem[_45 + 96])] = mem[_45 + 128 len floor32(mem[_45 + 96])]
            mem[64] = (32 * _52) + ceil32(return_data.size) + 128
            _1672 = mem[128]
            require mem[128] <= 4294967296
            require mem[128] + 32 <= return_data.size
            require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
            mem[(32 * _52) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
            _1680 = mem[_1672 + 96]
            mem[(32 * _52) + ceil32(return_data.size) + 160 len floor32(mem[_1672 + 96])] = mem[_1672 + 128 len floor32(mem[_1672 + 96])]
            mem[64] = (32 * _1680) + (32 * _52) + ceil32(return_data.size) + 160
            idx = 0
            s = 0
            while idx < mem[ceil32(return_data.size) + 96]:
                require idx < mem[ceil32(return_data.size) + 96]
                _4909 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[(32 * _1680) + (32 * _52) + ceil32(return_data.size) + 164] = address(tokenAddress)
                require ext_code.size(address(_4909))
                call address(_4909).getRealBalance(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[(32 * _1680) + (32 * _52) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if s + ext_call.return_data[0] < s:
                    revert with 0, 'ds-math-add-overflow'
                idx = idx + 1
                s = s + ext_call.return_data[0]
                continue 
    if 0 == totalSupply:
        if balances[address(arg1)].field_256:
            if 10^18 > balances[address(arg1)].field_256:
                if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg1)].field_0:
                    if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                else:
                    require balances[address(arg1)].field_0
                    if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
        balances[address(arg1)].field_256 = 10^18
        stor4 = 10^18
        if balances[address(arg2)].field_256:
            if 10^18 > balances[address(arg2)].field_256:
                if -balances[address(arg2)].field_256 + 10^18 > 10^18:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg2)].field_0:
                    if balances[address(arg2)].field_512 < balances[address(arg2)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg2)].field_512, 0, stor5, arg2);
                else:
                    require balances[address(arg2)].field_0
                    if (10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / balances[address(arg2)].field_0 != -balances[address(arg2)].field_256 + 10^18:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg2)].field_512 + ((10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18) < balances[address(arg2)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg2)].field_512 += (10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18
                    if stor5 + ((10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18
                    emit Interest(balances[address(arg2)].field_512, (10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18), arg2);
        balances[address(arg2)].field_256 = 10^18
        stor4 = 10^18
    else:
        if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
            revert with 0, 'ds-math-mul-overflow'
        if totalSupply <= 0:
            revert with 0, 'ds-math-div-overflow'
        require totalSupply
        if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply <= 0:
            revert with 0, 'Exchange rate should not be 0!'
        if balances[address(arg1)].field_256:
            if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply > balances[address(arg1)].field_256:
                if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg1)].field_0:
                    if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                else:
                    require balances[address(arg1)].field_0
                    if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg1)].field_256:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
        balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
        stor4 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
        if balances[address(arg2)].field_256:
            if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply > balances[address(arg2)].field_256:
                if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg2)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg2)].field_0:
                    if balances[address(arg2)].field_512 < balances[address(arg2)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg2)].field_512, 0, stor5, arg2);
                else:
                    require balances[address(arg2)].field_0
                    if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / balances[address(arg2)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg2)].field_256:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg2)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18) < balances[address(arg2)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg2)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18
                    if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18
                    emit Interest(balances[address(arg2)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg2)].field_0) - (balances[address(arg2)].field_256 * balances[address(arg2)].field_0) / 10^18), arg2);
        balances[address(arg2)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
        stor4 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
    if balances[address(arg1)].field_0 - arg3 > balances[address(arg1)].field_0:
        revert with 0, 'ds-math-sub-underflow'
    balances[address(arg1)].field_0 -= arg3
    if balances[address(arg2)].field_0 + arg3 < balances[address(arg2)].field_0:
        revert with 0, 'ds-math-add-overflow'
    balances[address(arg2)].field_0 += arg3
    emit 0x64ddf252: arg3, arg1, arg2
    stor0 = 1
    return 1
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if stor0 == 2:
        revert with 0, 'eReentrancyGuard: reentrant call'
    stor0 = 2
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    mem[0] = msg.sender
    if arg2 > balances[address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0xfe7472616e7366657246726f6d3a20696e73756666696369656e742062616c616e63,
                    mem[198 len 30]
    if msg.sender == msg.sender:
        mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
        require ext_code.size(dispatcherAddress)
        staticcall dispatcherAddress.0x3801a828 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 64
        _25 = mem[96]
        require mem[96] <= 4294967296
        require mem[96] + 32 <= return_data.size
        require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
        _33 = mem[_25 + 96]
        mem[ceil32(return_data.size) + 128 len floor32(mem[_25 + 96])] = mem[_25 + 128 len floor32(mem[_25 + 96])]
        mem[64] = (32 * _33) + ceil32(return_data.size) + 128
        _1666 = mem[128]
        require mem[128] <= 4294967296
        require mem[128] + 32 <= return_data.size
        require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
        mem[(32 * _33) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
        _1678 = mem[_1666 + 96]
        mem[(32 * _33) + ceil32(return_data.size) + 160 len floor32(mem[_1666 + 96])] = mem[_1666 + 128 len floor32(mem[_1666 + 96])]
        mem[64] = (32 * _1678) + (32 * _33) + ceil32(return_data.size) + 160
        idx = 0
        s = 0
        while idx < mem[ceil32(return_data.size) + 96]:
            require idx < mem[ceil32(return_data.size) + 96]
            _4903 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            mem[(32 * _1678) + (32 * _33) + ceil32(return_data.size) + 164] = address(tokenAddress)
            require ext_code.size(address(_4903))
            call address(_4903).getRealBalance(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[(32 * _1678) + (32 * _33) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if s + ext_call.return_data[0] < s:
                revert with 0, 'ds-math-add-overflow'
            idx = idx + 1
            s = s + ext_call.return_data[0]
            continue 
    else:
        mem[0] = msg.sender
        if -1 == allowance[address(msg.sender)][msg.sender]:
            mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
            require ext_code.size(dispatcherAddress)
            staticcall dispatcherAddress.0x3801a828 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 64
            _30 = mem[96]
            require mem[96] <= 4294967296
            require mem[96] + 32 <= return_data.size
            require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
            _37 = mem[_30 + 96]
            mem[ceil32(return_data.size) + 128 len floor32(mem[_30 + 96])] = mem[_30 + 128 len floor32(mem[_30 + 96])]
            mem[64] = (32 * _37) + ceil32(return_data.size) + 128
            _1669 = mem[128]
            require mem[128] <= 4294967296
            require mem[128] + 32 <= return_data.size
            require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
            mem[(32 * _37) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
            _1679 = mem[_1669 + 96]
            mem[(32 * _37) + ceil32(return_data.size) + 160 len floor32(mem[_1669 + 96])] = mem[_1669 + 128 len floor32(mem[_1669 + 96])]
            mem[64] = (32 * _1679) + (32 * _37) + ceil32(return_data.size) + 160
            idx = 0
            s = 0
            while idx < mem[ceil32(return_data.size) + 96]:
                require idx < mem[ceil32(return_data.size) + 96]
                _4906 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[(32 * _1679) + (32 * _37) + ceil32(return_data.size) + 164] = address(tokenAddress)
                require ext_code.size(address(_4906))
                call address(_4906).getRealBalance(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[(32 * _1679) + (32 * _37) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if s + ext_call.return_data[0] < s:
                    revert with 0, 'ds-math-add-overflow'
                idx = idx + 1
                s = s + ext_call.return_data[0]
                continue 
        else:
            if arg2 > allowance[address(msg.sender)][msg.sender]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            36,
                            0x647472616e7366657246726f6d3a20696e73756666696369656e7420616c6c6f77616e63,
                            mem[200 len 28]
            if allowance[address(msg.sender)][msg.sender] - arg2 > allowance[address(msg.sender)][msg.sender]:
                revert with 0, 'ds-math-sub-underflow'
            mem[0] = msg.sender
            allowance[address(msg.sender)][msg.sender] -= arg2
            mem[96] = 0x3801a82800000000000000000000000000000000000000000000000000000000
            require ext_code.size(dispatcherAddress)
            staticcall dispatcherAddress.0x3801a828 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 64
            _45 = mem[96]
            require mem[96] <= 4294967296
            require mem[96] + 32 <= return_data.size
            require mem[mem[96] + 96] <= 4294967296 and mem[96] + (32 * mem[mem[96] + 96]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
            _52 = mem[_45 + 96]
            mem[ceil32(return_data.size) + 128 len floor32(mem[_45 + 96])] = mem[_45 + 128 len floor32(mem[_45 + 96])]
            mem[64] = (32 * _52) + ceil32(return_data.size) + 128
            _1672 = mem[128]
            require mem[128] <= 4294967296
            require mem[128] + 32 <= return_data.size
            require mem[mem[128] + 96] <= 4294967296 and mem[128] + (32 * mem[mem[128] + 96]) + 32 <= return_data.size
            mem[(32 * _52) + ceil32(return_data.size) + 128] = mem[mem[128] + 96]
            _1680 = mem[_1672 + 96]
            mem[(32 * _52) + ceil32(return_data.size) + 160 len floor32(mem[_1672 + 96])] = mem[_1672 + 128 len floor32(mem[_1672 + 96])]
            mem[64] = (32 * _1680) + (32 * _52) + ceil32(return_data.size) + 160
            idx = 0
            s = 0
            while idx < mem[ceil32(return_data.size) + 96]:
                require idx < mem[ceil32(return_data.size) + 96]
                _4909 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                mem[(32 * _1680) + (32 * _52) + ceil32(return_data.size) + 164] = address(tokenAddress)
                require ext_code.size(address(_4909))
                call address(_4909).getRealBalance(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[(32 * _1680) + (32 * _52) + ceil32(return_data.size) + 160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if s + ext_call.return_data[0] < s:
                    revert with 0, 'ds-math-add-overflow'
                idx = idx + 1
                s = s + ext_call.return_data[0]
                continue 
    if 0 == totalSupply:
        if balances[address(msg.sender)].field_256:
            if 10^18 > balances[address(msg.sender)].field_256:
                if -balances[address(msg.sender)].field_256 + 10^18 > 10^18:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(msg.sender)].field_0:
                    if balances[address(msg.sender)].field_512 < balances[address(msg.sender)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(msg.sender)].field_512, 0, stor5, msg.sender);
                else:
                    require balances[address(msg.sender)].field_0
                    if (10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / balances[address(msg.sender)].field_0 != -balances[address(msg.sender)].field_256 + 10^18:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(msg.sender)].field_512 + ((10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18) < balances[address(msg.sender)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(msg.sender)].field_512 += (10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18
                    if stor5 + ((10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18
                    emit Interest(balances[address(msg.sender)].field_512, (10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18, stor5 + ((10^18 * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18), msg.sender);
        balances[address(msg.sender)].field_256 = 10^18
        stor4 = 10^18
        if balances[address(arg1)].field_256:
            if 10^18 > balances[address(arg1)].field_256:
                if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg1)].field_0:
                    if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                else:
                    require balances[address(arg1)].field_0
                    if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
        balances[address(arg1)].field_256 = 10^18
        stor4 = 10^18
    else:
        if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / 10^18 != s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96]:
            revert with 0, 'ds-math-mul-overflow'
        if totalSupply <= 0:
            revert with 0, 'ds-math-div-overflow'
        require totalSupply
        if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply <= 0:
            revert with 0, 'Exchange rate should not be 0!'
        if balances[address(msg.sender)].field_256:
            if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply > balances[address(msg.sender)].field_256:
                if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(msg.sender)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(msg.sender)].field_0:
                    if balances[address(msg.sender)].field_512 < balances[address(msg.sender)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(msg.sender)].field_512, 0, stor5, msg.sender);
                else:
                    require balances[address(msg.sender)].field_0
                    if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / balances[address(msg.sender)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(msg.sender)].field_256:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(msg.sender)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18) < balances[address(msg.sender)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(msg.sender)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18
                    if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18
                    emit Interest(balances[address(msg.sender)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(msg.sender)].field_0) - (balances[address(msg.sender)].field_256 * balances[address(msg.sender)].field_0) / 10^18), msg.sender);
        balances[address(msg.sender)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
        stor4 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
        if balances[address(arg1)].field_256:
            if 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply > balances[address(arg1)].field_256:
                if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg1)].field_0:
                    if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                else:
                    require balances[address(arg1)].field_0
                    if (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply) - balances[address(arg1)].field_256:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
        balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
        stor4 = 10^18 * s * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] * mem[ceil32(return_data.size) + 96] / totalSupply
    if balances[address(msg.sender)].field_0 - arg2 > balances[address(msg.sender)].field_0:
        revert with 0, 'ds-math-sub-underflow'
    balances[address(msg.sender)].field_0 -= arg2
    if balances[address(arg1)].field_0 + arg2 < balances[address(arg1)].field_0:
        revert with 0, 'ds-math-add-overflow'
    balances[address(arg1)].field_0 += arg2
    emit 0x64ddf252: arg2, msg.sender, arg1
    stor0 = 1
    return 1
}

function redeemUnderlying(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if stor0 == 2:
        revert with 0, 'eReentrancyGuard: reentrant call'
    stor0 = 2
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    mem[224] = 0
    mem[288] = 0
    mem[352] = 0
    mem[384] = 0
    mem[96] = address(tokenAddress)
    mem[0] = 0x1e9a695000000000000000000000000000000000000000000000000000000000
    mem[32] = 7
    mem[256] = storB160
    if -storB160 + 10^18 > 10^18:
        revert with 0, 'ds-math-sub-underflow'
    if 10^18 * arg2 / 10^18 != arg2:
        revert with 0, 'ds-math-mul-overflow'
    if (10^18 * arg2) + -storB160 + 999999999999999999 < 10^18 * arg2:
        revert with 0, 'ds-math-add-overflow'
    if -storB160 + 10^18 <= 0:
        revert with 0, 'ds-math-div-overflow'
    require -storB160 + 10^18
    mem[320] = (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.defaultHandler() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[128] = ext_call.return_data[12 len 20]
    if not address(ext_call.return_data[0]):
        revert with 0, 
                    32,
                    45,
                    0x2e72656465656d556e6465726c79696e673a2064656661756c742068616e646c657220697320696e6163746976,
                    mem[529 len 19]
    require ext_code.size(dispatcherAddress)
    staticcall dispatcherAddress.isHandlerActive(address rg1) with:
            gas gas_remaining wei
           args address(ext_call.return_data[12 len 20])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 
                    32,
                    45,
                    0x2e72656465656d556e6465726c79696e673a2064656661756c742068616e646c657220697320696e6163746976,
                    mem[529 len 19]
    mem[416] = 0x50c6c5a100000000000000000000000000000000000000000000000000000000
    mem[420] = address(tokenAddress)
    mem[452] = (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18
    require ext_code.size(dispatcherAddress)
    call dispatcherAddress.getWithdrawStrategy(address rg1, uint256 rg2) with:
         gas gas_remaining wei
        args address(tokenAddress), (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[416 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 416
    require return_data.size >= 64
    _36 = mem[416 len 4], Mask(224, 0, stor9)
    require mem[416 len 4], Mask(224, 0, stor9) <= 4294967296
    require mem[416 len 4], Mask(224, 0, stor9) + 32 <= return_data.size
    require mem[mem[416 len 4], Mask(224, 0, stor9) + 416] <= 4294967296 and mem[416 len 4], Mask(224, 0, stor9) + (32 * mem[mem[416 len 4], Mask(224, 0, stor9) + 416]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 416] = mem[mem[416 len 4], Mask(224, 0, stor9) + 416]
    _39 = mem[_36 + 416]
    mem[ceil32(return_data.size) + 448 len floor32(mem[_36 + 416])] = mem[_36 + 448 len floor32(mem[_36 + 416])]
    mem[64] = (32 * _39) + ceil32(return_data.size) + 448
    require uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 <= 4294967296
    require uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 32 <= return_data.size
    require mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 416] <= 4294967296 and uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + (32 * mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 416]) + 32 <= return_data.size
    mem[(32 * _39) + ceil32(return_data.size) + 448] = mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 416]
    _2688 = mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 416]
    mem[(32 * _39) + ceil32(return_data.size) + 480 len floor32(mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 416])] = mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 448 len floor32(mem[uint32(stor9), Mask(224, 32, (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18) >> 32 + 416])]
    mem[64] = (32 * _2688) + (32 * _39) + ceil32(return_data.size) + 480
    mem[192] = (32 * _39) + ceil32(return_data.size) + 448
    mem[160] = ceil32(return_data.size) + 416
    if not mem[ceil32(return_data.size) + 416]:
        revert with 0, 
                    32,
                    82,
                    0x6472656465656d556e6465726c79696e673a206e6f20776974686472617720737472617465677920617661696c61626c652c20706f737369626c792064756520746f2061207061757365642068616e646c65,
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 630 len 14]
    idx = 0
    s = 0
    while idx < mem[ceil32(return_data.size) + 416]:
        require idx < mem[ceil32(return_data.size) + 416]
        _7969 = mem[(32 * idx) + ceil32(return_data.size) + 448]
        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 484] = address(tokenAddress)
        require ext_code.size(address(_7969))
        call address(_7969).getRealBalance(address rg1) with:
             gas gas_remaining wei
            args address(tokenAddress)
        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 480] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if s + ext_call.return_data[0] < s:
            revert with 0, 'ds-math-add-overflow'
        idx = idx + 1
        s = s + ext_call.return_data[0]
        continue 
    if 0 == totalSupply:
        idx = 0
        while idx < mem[ceil32(return_data.size) + 416]:
            require idx < mem[(32 * _39) + ceil32(return_data.size) + 448]
            if mem[(32 * idx) + (32 * _39) + ceil32(return_data.size) + 480] != 0:
                require idx < mem[ceil32(return_data.size) + 416]
                _10620 = mem[(32 * idx) + ceil32(return_data.size) + 448]
                require idx < mem[(32 * _39) + ceil32(return_data.size) + 448]
                _10624 = mem[(32 * idx) + (32 * _39) + ceil32(return_data.size) + 480]
                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 484] = address(tokenAddress)
                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 516] = _10624
                require ext_code.size(address(_10620))
                call address(_10620).withdraw(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args address(tokenAddress), _10624
                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 480] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0x65776974686472617746726f6d48616e646c6572733a2068616e646c6572207769746864726177206661696c65,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 593 len 19]
                require idx < mem[ceil32(return_data.size) + 416]
                if address(ext_call.return_data[12 len 20]) != mem[(32 * idx) + ceil32(return_data.size) + 460 len 20]:
                    require idx < mem[ceil32(return_data.size) + 416]
                    _10650 = mem[(32 * idx) + ceil32(return_data.size) + 448]
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 480] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 484] = address(_10650)
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 516] = address(ext_call.return_data[12 len 20])
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 548] = ext_call.return_data[0]
                    require ext_code.size(address(tokenAddress))
                    call address(tokenAddress).0x23b872dd with:
                         gas gas_remaining wei
                        args address(_10650), address(ext_call.return_data[12 len 20]), ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if return_data.size:
                        require return_data.size == 32
                        mem[0] = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        56,
                                        0x2e776974686472617746726f6d48616e646c6572733a207472616e7366657220746f2064656661756c742068616e646c6572206661696c65,
                                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 604 len 8]
                if ext_call.return_data[0] < 0:
                    revert with 0, 'ds-math-add-overflow'
            idx = idx + 1
            continue 
        if (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18:
            revert with 0, 
                        32,
                        46,
                        0x6472656465656d556e6465726c79696e673a207769746864726f776e206d6f7265207468616e20696e74656e6465,
                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 594 len 18]
        if not balances[address(arg1)].field_256:
            balances[address(arg1)].field_256 = 10^18
            stor4 = 10^18
            if balances[address(arg1)].field_0 < 999999999999999999 / 10^18:
                revert with 0, 
                            32,
                            38,
                            0x2172656465656d556e6465726c79696e673a20696e73756666696369656e742062616c616e63,
                            mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 586 len 26]
            if arg1 != msg.sender:
                if allowance[address(arg1)][msg.sender] != -1:
                    if allowance[address(arg1)][msg.sender] < 999999999999999999 / 10^18:
                        revert with 0, 
                                    32,
                                    40,
                                    0x2e72656465656d556e6465726c79696e673a20696e73756666696369656e7420616c6c6f77616e63,
                                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 588 len 24]
                    if allowance[address(arg1)][msg.sender] - (999999999999999999 / 10^18) > allowance[address(arg1)][msg.sender]:
                        revert with 0, 'ds-math-sub-underflow'
                    allowance[address(arg1)][msg.sender] -= 999999999999999999 / 10^18
            if balances[address(arg1)].field_0 - (999999999999999999 / 10^18) > balances[address(arg1)].field_0:
                revert with 0, 'ds-math-sub-underflow'
            balances[address(arg1)].field_0 -= 999999999999999999 / 10^18
            if totalSupply - (999999999999999999 / 10^18) > totalSupply:
                revert with 0, 'ds-math-sub-underflow'
            totalSupply -= 999999999999999999 / 10^18
        else:
            if 10^18 <= balances[address(arg1)].field_256:
                balances[address(arg1)].field_256 = 10^18
                stor4 = 10^18
                if balances[address(arg1)].field_0 < 999999999999999999 / 10^18:
                    revert with 0, 
                                32,
                                38,
                                0x2172656465656d556e6465726c79696e673a20696e73756666696369656e742062616c616e63,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 586 len 26]
                if arg1 != msg.sender:
                    if allowance[address(arg1)][msg.sender] != -1:
                        if allowance[address(arg1)][msg.sender] < 999999999999999999 / 10^18:
                            revert with 0, 
                                        32,
                                        40,
                                        0x2e72656465656d556e6465726c79696e673a20696e73756666696369656e7420616c6c6f77616e63,
                                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 588 len 24]
                        if allowance[address(arg1)][msg.sender] - (999999999999999999 / 10^18) > allowance[address(arg1)][msg.sender]:
                            revert with 0, 'ds-math-sub-underflow'
                        allowance[address(arg1)][msg.sender] -= 999999999999999999 / 10^18
                if balances[address(arg1)].field_0 - (999999999999999999 / 10^18) > balances[address(arg1)].field_0:
                    revert with 0, 'ds-math-sub-underflow'
                balances[address(arg1)].field_0 -= 999999999999999999 / 10^18
                if totalSupply - (999999999999999999 / 10^18) > totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
                totalSupply -= 999999999999999999 / 10^18
            else:
                if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg1)].field_0:
                    if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                else:
                    require balances[address(arg1)].field_0
                    if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                balances[address(arg1)].field_256 = 10^18
                stor4 = 10^18
                if balances[address(arg1)].field_0 < 0:
                    revert with 0, 
                                32,
                                38,
                                0x2172656465656d556e6465726c79696e673a20696e73756666696369656e742062616c616e63,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 586 len 26]
                if arg1 != msg.sender:
                    if allowance[address(arg1)][msg.sender] != -1:
                        if allowance[address(arg1)][msg.sender] < 0:
                            revert with 0, 
                                        32,
                                        40,
                                        0x2e72656465656d556e6465726c79696e673a20696e73756666696369656e7420616c6c6f77616e63,
                                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 588 len 24]
                        if allowance[address(arg1)][msg.sender] > allowance[address(arg1)][msg.sender]:
                            revert with 0, 'ds-math-sub-underflow'
                if balances[address(arg1)].field_0 > balances[address(arg1)].field_0:
                    revert with 0, 'ds-math-sub-underflow'
                if totalSupply > totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
        if -arg2 > 0:
            revert with 0, 'ds-math-sub-underflow'
        require ext_code.size(address(tokenAddress))
        if -arg2:
            call address(tokenAddress).0x23b872dd with:
                 gas gas_remaining wei
                args address(ext_call.return_data[12 len 20]), address(feeRecipientAddress), -arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if return_data.size:
                require return_data.size == 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                58,
                                0x6472656465656d556e6465726c79696e673a207472616e73666572206665652066726f6d2064656661756c742068616e646c6572206661696c65,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 606 len 6]
        call address(tokenAddress).0x23b872dd with:
             gas gas_remaining wei
            args address(ext_call.return_data[12 len 20]), msg.sender, arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if return_data.size:
            require return_data.size == 32
            if not ext_call.return_data[0]:
                revert with 0, 
                            32,
                            41,
                            0x6472656465656d556e6465726c79696e673a207472616e7366657220746f2075736572206661696c65,
                            mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 589 len 23]
        emit 0x64ddf252: 0, arg1, 0
        emit Redeem(0, totalSupply, 10^18, arg1, 0);
    else:
        if 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / 10^18 != s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416]:
            revert with 0, 'ds-math-mul-overflow'
        if totalSupply <= 0:
            revert with 0, 'ds-math-div-overflow'
        require totalSupply
        if 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply <= 0:
            revert with 0, 'Exchange rate should not be 0!'
        idx = 0
        while idx < mem[ceil32(return_data.size) + 416]:
            require idx < mem[(32 * _39) + ceil32(return_data.size) + 448]
            if mem[(32 * idx) + (32 * _39) + ceil32(return_data.size) + 480] != 0:
                require idx < mem[ceil32(return_data.size) + 416]
                _10622 = mem[(32 * idx) + ceil32(return_data.size) + 448]
                require idx < mem[(32 * _39) + ceil32(return_data.size) + 448]
                _10627 = mem[(32 * idx) + (32 * _39) + ceil32(return_data.size) + 480]
                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 484] = address(tokenAddress)
                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 516] = _10627
                require ext_code.size(address(_10622))
                call address(_10622).withdraw(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args address(tokenAddress), _10627
                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 480] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0x65776974686472617746726f6d48616e646c6572733a2068616e646c6572207769746864726177206661696c65,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 593 len 19]
                require idx < mem[ceil32(return_data.size) + 416]
                if address(ext_call.return_data[12 len 20]) != mem[(32 * idx) + ceil32(return_data.size) + 460 len 20]:
                    require idx < mem[ceil32(return_data.size) + 416]
                    _10653 = mem[(32 * idx) + ceil32(return_data.size) + 448]
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 480] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 484] = address(_10653)
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 516] = address(ext_call.return_data[12 len 20])
                    mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 548] = ext_call.return_data[0]
                    require ext_code.size(address(tokenAddress))
                    call address(tokenAddress).0x23b872dd with:
                         gas gas_remaining wei
                        args address(_10653), address(ext_call.return_data[12 len 20]), ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if return_data.size:
                        require return_data.size == 32
                        mem[0] = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        56,
                                        0x2e776974686472617746726f6d48616e646c6572733a207472616e7366657220746f2064656661756c742068616e646c6572206661696c65,
                                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 604 len 8]
                if ext_call.return_data[0] < 0:
                    revert with 0, 'ds-math-add-overflow'
            idx = idx + 1
            continue 
        if (10^18 * arg2) + -storB160 + 999999999999999999 / -storB160 + 10^18:
            revert with 0, 
                        32,
                        46,
                        0x6472656465656d556e6465726c79696e673a207769746864726f776e206d6f7265207468616e20696e74656e6465,
                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 594 len 18]
        if (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 > 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply:
            revert with 0, 'ds-math-sub-underflow'
        if (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 < 0:
            revert with 0, 'ds-math-add-overflow'
        if 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply <= 0:
            revert with 0, 'ds-math-div-overflow'
        require 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply
        if balances[address(arg1)].field_256:
            if 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply > balances[address(arg1)].field_256:
                if (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply:
                    revert with 0, 'ds-math-sub-underflow'
                if not balances[address(arg1)].field_0:
                    if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    if stor5 < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                else:
                    require balances[address(arg1)].field_0
                    if (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - balances[address(arg1)].field_256:
                        revert with 0, 'ds-math-mul-overflow'
                    if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                        revert with 0, 'ds-math-add-overflow'
                    stor5 += (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                    emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
        balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply
        stor4 = 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply
        if balances[address(arg1)].field_0 < (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply:
            revert with 0, 
                        32,
                        38,
                        0x2172656465656d556e6465726c79696e673a20696e73756666696369656e742062616c616e63,
                        mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 586 len 26]
        if arg1 != msg.sender:
            if allowance[address(arg1)][msg.sender] != -1:
                if allowance[address(arg1)][msg.sender] < (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply:
                    revert with 0, 
                                32,
                                40,
                                0x2e72656465656d556e6465726c79696e673a20696e73756666696369656e7420616c6c6f77616e63,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 588 len 24]
                if allowance[address(arg1)][msg.sender] - ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) > allowance[address(arg1)][msg.sender]:
                    revert with 0, 'ds-math-sub-underflow'
                allowance[address(arg1)][msg.sender] -= (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply
        if balances[address(arg1)].field_0 - ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) > balances[address(arg1)].field_0:
            revert with 0, 'ds-math-sub-underflow'
        balances[address(arg1)].field_0 -= (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply
        if totalSupply - ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) > totalSupply:
            revert with 0, 'ds-math-sub-underflow'
        totalSupply -= (10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply
        if -arg2 > 0:
            revert with 0, 'ds-math-sub-underflow'
        require ext_code.size(address(tokenAddress))
        if -arg2:
            call address(tokenAddress).0x23b872dd with:
                 gas gas_remaining wei
                args address(ext_call.return_data[12 len 20]), address(feeRecipientAddress), -arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if return_data.size:
                require return_data.size == 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                58,
                                0x6472656465656d556e6465726c79696e673a207472616e73666572206665652066726f6d2064656661756c742068616e646c6572206661696c65,
                                mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 606 len 6]
        call address(tokenAddress).0x23b872dd with:
             gas gas_remaining wei
            args address(ext_call.return_data[12 len 20]), msg.sender, arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if return_data.size:
            require return_data.size == 32
            if not ext_call.return_data[0]:
                revert with 0, 
                            32,
                            41,
                            0x6472656465656d556e6465726c79696e673a207472616e7366657220746f2075736572206661696c65,
                            mem[(32 * _2688) + (32 * _39) + ceil32(return_data.size) + 589 len 23]
        emit 0x64ddf252: ((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply), arg1, 0
        emit Redeem((10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply) - 1 / 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply, totalSupply, 10^18 * s * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] * mem[ceil32(return_data.size) + 416] / totalSupply, arg1, 0);
    stor0 = 1
}

function mint(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if stor0 == 2:
        revert with 0, 'eReentrancyGuard: reentrant call'
    stor0 = 2
    if uint8(stor3.field_160):
        revert with 0, 'whenNotPaused: paused'
    mem[192] = 0
    mem[320] = 0
    mem[352] = 0
    mem[96] = address(tokenAddress)
    mem[0] = call.func_hash
    mem[32] = 7
    mem[224] = sub_8d2039b8[call.func_hash]
    if not sub_8d2039b8[call.func_hash]:
        mem[256] = 0
        if arg2 > arg2:
            revert with 0, 'ds-math-sub-underflow'
        mem[288] = arg2
        mem[384] = 0x1e462e9000000000000000000000000000000000000000000000000000000000
        mem[388] = arg2
        require ext_code.size(dispatcherAddress)
        staticcall dispatcherAddress.getDepositStrategy(uint256 rg1) with:
                gas gas_remaining wei
               args arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[384 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 384
        require return_data.size >= 64
        _26 = mem[384 len 4], Mask(224, 32, arg2) >> 32
        require mem[384 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[384 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[384 len 4], Mask(224, 32, arg2) >> 32 + 384] <= 4294967296 and mem[384 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[384 len 4], Mask(224, 32, arg2) >> 32 + 384]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + 384] = mem[mem[384 len 4], Mask(224, 32, arg2) >> 32 + 384]
        _33 = mem[_26 + 384]
        mem[ceil32(return_data.size) + 416 len floor32(mem[_26 + 384])] = mem[_26 + 416 len floor32(mem[_26 + 384])]
        mem[64] = (32 * _33) + ceil32(return_data.size) + 416
        _1266 = uint32(arg2), mem[420 len 28]
        require uint32(arg2), mem[420 len 28] <= 4294967296
        require uint32(arg2), mem[420 len 28] + 32 <= return_data.size
        require mem[uint32(arg2), mem[420 len 28] + 384] <= 4294967296 and uint32(arg2), mem[420 len 28] + (32 * mem[uint32(arg2), mem[420 len 28] + 384]) + 32 <= return_data.size
        mem[(32 * _33) + ceil32(return_data.size) + 416] = mem[uint32(arg2), mem[420 len 28] + 384]
        _1282 = mem[_1266 + 384]
        mem[(32 * _33) + ceil32(return_data.size) + 448 len floor32(mem[_1266 + 384])] = mem[_1266 + 416 len floor32(mem[_1266 + 384])]
        mem[64] = (32 * _1282) + (32 * _33) + ceil32(return_data.size) + 448
        mem[160] = (32 * _33) + ceil32(return_data.size) + 416
        mem[128] = ceil32(return_data.size) + 384
        if not mem[ceil32(return_data.size) + 384]:
            revert with 0, 
                        32,
                        69,
                        0x2e6d696e743a206e6f206465706f73697420737472617465677920617661696c61626c652c20706f737369626c792064756520746f2061207061757365642068616e646c65,
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 585 len 27]
        idx = 0
        s = 0
        while idx < mem[ceil32(return_data.size) + 384]:
            require idx < mem[ceil32(return_data.size) + 384]
            _3670 = mem[(32 * idx) + ceil32(return_data.size) + 416]
            mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = address(tokenAddress)
            require ext_code.size(address(_3670))
            call address(_3670).getRealBalance(address rg1) with:
                 gas gas_remaining wei
                args address(tokenAddress)
            mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if s + ext_call.return_data[0] < s:
                revert with 0, 'ds-math-add-overflow'
            idx = idx + 1
            s = s + ext_call.return_data[0]
            continue 
        if 0 == totalSupply:
            idx = 0
            while idx < mem[ceil32(return_data.size) + 384]:
                require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                if mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448] != 0:
                    require idx < mem[ceil32(return_data.size) + 384]
                    _4946 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                    require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                    _4970 = mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448]
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = msg.sender
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 484] = address(_4946)
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 516] = _4970
                    require ext_code.size(address(tokenAddress))
                    call address(tokenAddress).0x23b872dd with:
                         gas gas_remaining wei
                        args msg.sender, address(_4946), _4970
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not return_data.size:
                        require idx < mem[ceil32(return_data.size) + 384]
                        _5050 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                        require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                        _5114 = mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448]
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = address(tokenAddress)
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 484] = _5114
                        require ext_code.size(address(_5050))
                        call address(_5050).deposit(address rg1, uint256 rg2) with:
                             gas gas_remaining wei
                            args address(tokenAddress), _5114
                    else:
                        require return_data.size == 32
                        mem[0] = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        39,
                                        0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 555 len 25]
                        require idx < mem[ceil32(return_data.size) + 384]
                        _5117 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                        require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                        _5173 = mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448]
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = address(tokenAddress)
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 484] = _5173
                        require ext_code.size(address(_5117))
                        call address(_5117).deposit(address rg1, uint256 rg2) with:
                             gas gas_remaining wei
                            args address(tokenAddress), _5173
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if mem[320] + ext_call.return_data[0] < mem[320]:
                        revert with 0, 'ds-math-add-overflow'
                    mem[320] = mem[320] + ext_call.return_data[0]
                idx = idx + 1
                continue 
            if mem[320] > arg2:
                revert with 0, 
                            32,
                            34,
                            0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                            mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 550 len 30]
            if 10^18 * mem[320] / 10^18 != mem[320]:
                revert with 0, 'ds-math-mul-overflow'
            if not 10^18 * mem[320] / 10^18:
                revert with 0, 
                            32,
                            58,
                            0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                            mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 574 len 6]
            if balances[address(arg1)].field_256:
                if 10^18 > balances[address(arg1)].field_256:
                    if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                        revert with 0, 'ds-math-sub-underflow'
                    if not balances[address(arg1)].field_0:
                        if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                            revert with 0, 'ds-math-add-overflow'
                        if stor5 < stor5:
                            revert with 0, 'ds-math-add-overflow'
                        emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                    else:
                        require balances[address(arg1)].field_0
                        if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                            revert with 0, 'ds-math-mul-overflow'
                        if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                            revert with 0, 'ds-math-add-overflow'
                        balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                        if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                            revert with 0, 'ds-math-add-overflow'
                        stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                        emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
            balances[address(arg1)].field_256 = 10^18
            stor4 = 10^18
            if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18) < balances[address(arg1)].field_0:
                revert with 0, 'ds-math-add-overflow'
            balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18
            if totalSupply + (10^18 * mem[320] / 10^18) < totalSupply:
                revert with 0, 'ds-math-add-overflow'
            totalSupply += 10^18 * mem[320] / 10^18
            emit 0x64ddf252: (10^18 * mem[320] / 10^18), 0, arg1
            emit Mint(10^18 * mem[320] / 10^18, totalSupply, 10^18, arg1, arg2);
        else:
            if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / 10^18 != s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384]:
                revert with 0, 'ds-math-mul-overflow'
            if totalSupply <= 0:
                revert with 0, 'ds-math-div-overflow'
            require totalSupply
            if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                revert with 0, 'Exchange rate should not be 0!'
            idx = 0
            while idx < mem[ceil32(return_data.size) + 384]:
                require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                if mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448] != 0:
                    require idx < mem[ceil32(return_data.size) + 384]
                    _4949 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                    require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                    _4971 = mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448]
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = msg.sender
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 484] = address(_4949)
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 516] = _4971
                    require ext_code.size(address(tokenAddress))
                    call address(tokenAddress).0x23b872dd with:
                         gas gas_remaining wei
                        args msg.sender, address(_4949), _4971
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not return_data.size:
                        require idx < mem[ceil32(return_data.size) + 384]
                        _5058 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                        require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                        _5121 = mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448]
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = address(tokenAddress)
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 484] = _5121
                        require ext_code.size(address(_5058))
                        call address(_5058).deposit(address rg1, uint256 rg2) with:
                             gas gas_remaining wei
                            args address(tokenAddress), _5121
                    else:
                        require return_data.size == 32
                        mem[0] = ext_call.return_data[0]
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        39,
                                        0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 555 len 25]
                        require idx < mem[ceil32(return_data.size) + 384]
                        _5124 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                        require idx < mem[(32 * _33) + ceil32(return_data.size) + 416]
                        _5179 = mem[(32 * idx) + (32 * _33) + ceil32(return_data.size) + 448]
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 452] = address(tokenAddress)
                        mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 484] = _5179
                        require ext_code.size(address(_5124))
                        call address(_5124).deposit(address rg1, uint256 rg2) with:
                             gas gas_remaining wei
                            args address(tokenAddress), _5179
                    mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if mem[320] + ext_call.return_data[0] < mem[320]:
                        revert with 0, 'ds-math-add-overflow'
                    mem[320] = mem[320] + ext_call.return_data[0]
                idx = idx + 1
                continue 
            if mem[320] > arg2:
                revert with 0, 
                            32,
                            34,
                            0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                            mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 550 len 30]
            if 10^18 * mem[320] / 10^18 != mem[320]:
                revert with 0, 'ds-math-mul-overflow'
            if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                revert with 0, 'ds-math-div-overflow'
            require 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
            if not 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                revert with 0, 
                            32,
                            58,
                            0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                            mem[(32 * _1282) + (32 * _33) + ceil32(return_data.size) + 574 len 6]
            if balances[address(arg1)].field_256:
                if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply > balances[address(arg1)].field_256:
                    if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                        revert with 0, 'ds-math-sub-underflow'
                    if not balances[address(arg1)].field_0:
                        if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                            revert with 0, 'ds-math-add-overflow'
                        if stor5 < stor5:
                            revert with 0, 'ds-math-add-overflow'
                        emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                    else:
                        require balances[address(arg1)].field_0
                        if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                            revert with 0, 'ds-math-add-overflow'
                        balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                        if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                            revert with 0, 'ds-math-add-overflow'
                        stor5 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                        emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
            balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
            stor4 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
            if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < balances[address(arg1)].field_0:
                revert with 0, 'ds-math-add-overflow'
            balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
            if totalSupply + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < totalSupply:
                revert with 0, 'ds-math-add-overflow'
            totalSupply += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
            emit 0x64ddf252: (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply), 0, arg1
            emit Mint(10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, totalSupply, 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, arg1, arg2);
    else:
        require sub_8d2039b8[call.func_hash]
        if arg2 * sub_8d2039b8[call.func_hash] / sub_8d2039b8[call.func_hash] != arg2:
            revert with 0, 'ds-math-mul-overflow'
        mem[256] = arg2 * sub_8d2039b8[call.func_hash] / 10^18
        if not arg2 * sub_8d2039b8[call.func_hash] / 10^18:
            if arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18) > arg2:
                revert with 0, 'ds-math-sub-underflow'
            mem[288] = arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)
            mem[384] = 0x1e462e9000000000000000000000000000000000000000000000000000000000
            mem[388] = arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)
            require ext_code.size(dispatcherAddress)
            staticcall dispatcherAddress.getDepositStrategy(uint256 rg1) with:
                    gas gas_remaining wei
                   args (arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18))
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[384 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 384
            require return_data.size >= 64
            _31 = mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32
            require mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 <= 4294967296
            require mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 32 <= return_data.size
            require mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384] <= 4294967296 and mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + (32 * mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 384] = mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384]
            _42 = mem[_31 + 384]
            mem[ceil32(return_data.size) + 416 len floor32(mem[_31 + 384])] = mem[_31 + 416 len floor32(mem[_31 + 384])]
            mem[64] = (32 * _42) + ceil32(return_data.size) + 416
            _1269 = uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28]
            require uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28] <= 4294967296
            require uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28] + 32 <= return_data.size
            require mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28] + 384] <= 4294967296 and uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28] + (32 * mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28] + 384]) + 32 <= return_data.size
            mem[(32 * _42) + ceil32(return_data.size) + 416] = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), mem[420 len 28] + 384]
            _1283 = mem[_1269 + 384]
            mem[(32 * _42) + ceil32(return_data.size) + 448 len floor32(mem[_1269 + 384])] = mem[_1269 + 416 len floor32(mem[_1269 + 384])]
            mem[64] = (32 * _1283) + (32 * _42) + ceil32(return_data.size) + 448
            mem[160] = (32 * _42) + ceil32(return_data.size) + 416
            mem[128] = ceil32(return_data.size) + 384
            if not mem[ceil32(return_data.size) + 384]:
                revert with 0, 
                            32,
                            69,
                            0x2e6d696e743a206e6f206465706f73697420737472617465677920617661696c61626c652c20706f737369626c792064756520746f2061207061757365642068616e646c65,
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 585 len 27]
            idx = 0
            s = 0
            while idx < mem[ceil32(return_data.size) + 384]:
                require idx < mem[ceil32(return_data.size) + 384]
                _3673 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = address(tokenAddress)
                require ext_code.size(address(_3673))
                call address(_3673).getRealBalance(address rg1) with:
                     gas gas_remaining wei
                    args address(tokenAddress)
                mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if s + ext_call.return_data[0] < s:
                    revert with 0, 'ds-math-add-overflow'
                idx = idx + 1
                s = s + ext_call.return_data[0]
                continue 
            if 0 == totalSupply:
                idx = 0
                while idx < mem[ceil32(return_data.size) + 384]:
                    require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                    if mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448] != 0:
                        require idx < mem[ceil32(return_data.size) + 384]
                        _4952 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                        require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                        _4972 = mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448]
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = msg.sender
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 484] = address(_4952)
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 516] = _4972
                        require ext_code.size(address(tokenAddress))
                        call address(tokenAddress).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, address(_4952), _4972
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not return_data.size:
                            require idx < mem[ceil32(return_data.size) + 384]
                            _5066 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                            _5128 = mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448]
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = address(tokenAddress)
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 484] = _5128
                            require ext_code.size(address(_5066))
                            call address(_5066).deposit(address rg1, uint256 rg2) with:
                                 gas gas_remaining wei
                                args address(tokenAddress), _5128
                        else:
                            require return_data.size == 32
                            mem[0] = ext_call.return_data[0]
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            39,
                                            0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 555 len 25]
                            require idx < mem[ceil32(return_data.size) + 384]
                            _5131 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                            _5185 = mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448]
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = address(tokenAddress)
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 484] = _5185
                            require ext_code.size(address(_5131))
                            call address(_5131).deposit(address rg1, uint256 rg2) with:
                                 gas gas_remaining wei
                                args address(tokenAddress), _5185
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if mem[320] + ext_call.return_data[0] < mem[320]:
                            revert with 0, 'ds-math-add-overflow'
                        mem[320] = mem[320] + ext_call.return_data[0]
                    idx = idx + 1
                    continue 
                if mem[320] > arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18):
                    revert with 0, 
                                32,
                                34,
                                0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                                mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 550 len 30]
                if 10^18 * mem[320] / 10^18 != mem[320]:
                    revert with 0, 'ds-math-mul-overflow'
                if not 10^18 * mem[320] / 10^18:
                    revert with 0, 
                                32,
                                58,
                                0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                                mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 574 len 6]
                if balances[address(arg1)].field_256:
                    if 10^18 > balances[address(arg1)].field_256:
                        if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                            revert with 0, 'ds-math-sub-underflow'
                        if not balances[address(arg1)].field_0:
                            if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                                revert with 0, 'ds-math-add-overflow'
                            if stor5 < stor5:
                                revert with 0, 'ds-math-add-overflow'
                            emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                        else:
                            require balances[address(arg1)].field_0
                            if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                                revert with 0, 'ds-math-mul-overflow'
                            if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                                revert with 0, 'ds-math-add-overflow'
                            balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                            if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                                revert with 0, 'ds-math-add-overflow'
                            stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                            emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                balances[address(arg1)].field_256 = 10^18
                stor4 = 10^18
                if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18) < balances[address(arg1)].field_0:
                    revert with 0, 'ds-math-add-overflow'
                balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18
                if totalSupply + (10^18 * mem[320] / 10^18) < totalSupply:
                    revert with 0, 'ds-math-add-overflow'
                totalSupply += 10^18 * mem[320] / 10^18
                emit 0x64ddf252: (10^18 * mem[320] / 10^18), 0, arg1
                emit Mint(10^18 * mem[320] / 10^18, totalSupply, 10^18, arg1, arg2);
            else:
                if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / 10^18 != s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384]:
                    revert with 0, 'ds-math-mul-overflow'
                if totalSupply <= 0:
                    revert with 0, 'ds-math-div-overflow'
                require totalSupply
                if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                    revert with 0, 'Exchange rate should not be 0!'
                idx = 0
                while idx < mem[ceil32(return_data.size) + 384]:
                    require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                    if mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448] != 0:
                        require idx < mem[ceil32(return_data.size) + 384]
                        _4955 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                        require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                        _4973 = mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448]
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = msg.sender
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 484] = address(_4955)
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 516] = _4973
                        require ext_code.size(address(tokenAddress))
                        call address(tokenAddress).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, address(_4955), _4973
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not return_data.size:
                            require idx < mem[ceil32(return_data.size) + 384]
                            _5074 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                            _5135 = mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448]
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = address(tokenAddress)
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 484] = _5135
                            require ext_code.size(address(_5074))
                            call address(_5074).deposit(address rg1, uint256 rg2) with:
                                 gas gas_remaining wei
                                args address(tokenAddress), _5135
                        else:
                            require return_data.size == 32
                            mem[0] = ext_call.return_data[0]
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            39,
                                            0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 555 len 25]
                            require idx < mem[ceil32(return_data.size) + 384]
                            _5138 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _42) + ceil32(return_data.size) + 416]
                            _5191 = mem[(32 * idx) + (32 * _42) + ceil32(return_data.size) + 448]
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 452] = address(tokenAddress)
                            mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 484] = _5191
                            require ext_code.size(address(_5138))
                            call address(_5138).deposit(address rg1, uint256 rg2) with:
                                 gas gas_remaining wei
                                args address(tokenAddress), _5191
                        mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if mem[320] + ext_call.return_data[0] < mem[320]:
                            revert with 0, 'ds-math-add-overflow'
                        mem[320] = mem[320] + ext_call.return_data[0]
                    idx = idx + 1
                    continue 
                if mem[320] > arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18):
                    revert with 0, 
                                32,
                                34,
                                0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                                mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 550 len 30]
                if 10^18 * mem[320] / 10^18 != mem[320]:
                    revert with 0, 'ds-math-mul-overflow'
                if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                    revert with 0, 'ds-math-div-overflow'
                require 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                if not 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                    revert with 0, 
                                32,
                                58,
                                0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                                mem[(32 * _1283) + (32 * _42) + ceil32(return_data.size) + 574 len 6]
                if balances[address(arg1)].field_256:
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply > balances[address(arg1)].field_256:
                        if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                            revert with 0, 'ds-math-sub-underflow'
                        if not balances[address(arg1)].field_0:
                            if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                                revert with 0, 'ds-math-add-overflow'
                            if stor5 < stor5:
                                revert with 0, 'ds-math-add-overflow'
                            emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                        else:
                            require balances[address(arg1)].field_0
                            if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                                revert with 0, 'ds-math-add-overflow'
                            balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                            if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                                revert with 0, 'ds-math-add-overflow'
                            stor5 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                            emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                stor4 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < balances[address(arg1)].field_0:
                    revert with 0, 'ds-math-add-overflow'
                balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                if totalSupply + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < totalSupply:
                    revert with 0, 'ds-math-add-overflow'
                totalSupply += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                emit 0x64ddf252: (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply), 0, arg1
                emit Mint(10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, totalSupply, 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, arg1, arg2);
        else:
            mem[420] = address(feeRecipientAddress)
            mem[452] = arg2 * sub_8d2039b8[call.func_hash] / 10^18
            require ext_code.size(address(tokenAddress))
            call address(tokenAddress).0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(feeRecipientAddress), arg2 * sub_8d2039b8[call.func_hash] / 10^18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not return_data.size:
                if arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18) > arg2:
                    revert with 0, 'ds-math-sub-underflow'
                mem[288] = arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)
                mem[384] = 0x1e462e9000000000000000000000000000000000000000000000000000000000
                mem[388] = arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)
                require ext_code.size(dispatcherAddress)
                staticcall dispatcherAddress.getDepositStrategy(uint256 rg1) with:
                        gas gas_remaining wei
                       args (arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18))
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[384 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 384
                require return_data.size >= 64
                _58 = mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32
                require mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 <= 4294967296
                require mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 32 <= return_data.size
                require mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384] <= 4294967296 and mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + (32 * mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + 384] = mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384]
                _73 = mem[_58 + 384]
                mem[ceil32(return_data.size) + 416 len floor32(mem[_58 + 384])] = mem[_58 + 416 len floor32(mem[_58 + 384])]
                mem[64] = (32 * _73) + ceil32(return_data.size) + 416
                require uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) <= 4294967296
                require uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 32 <= return_data.size
                require mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384] <= 4294967296 and uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + (32 * mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384]) + 32 <= return_data.size
                mem[(32 * _73) + ceil32(return_data.size) + 416] = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384]
                _1284 = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384]
                mem[(32 * _73) + ceil32(return_data.size) + 448 len floor32(mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384])] = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 416 len floor32(mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384])]
                mem[64] = (32 * _1284) + (32 * _73) + ceil32(return_data.size) + 448
                mem[160] = (32 * _73) + ceil32(return_data.size) + 416
                mem[128] = ceil32(return_data.size) + 384
                if not mem[ceil32(return_data.size) + 384]:
                    revert with 0, 
                                32,
                                69,
                                0x2e6d696e743a206e6f206465706f73697420737472617465677920617661696c61626c652c20706f737369626c792064756520746f2061207061757365642068616e646c65,
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 585 len 27]
                idx = 0
                s = 0
                while idx < mem[ceil32(return_data.size) + 384]:
                    require idx < mem[ceil32(return_data.size) + 384]
                    _3676 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                    mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = address(tokenAddress)
                    require ext_code.size(address(_3676))
                    call address(_3676).getRealBalance(address rg1) with:
                         gas gas_remaining wei
                        args address(tokenAddress)
                    mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if s + ext_call.return_data[0] < s:
                        revert with 0, 'ds-math-add-overflow'
                    idx = idx + 1
                    s = s + ext_call.return_data[0]
                    continue 
                if 0 == totalSupply:
                    idx = 0
                    while idx < mem[ceil32(return_data.size) + 384]:
                        require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                        if mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448] != 0:
                            require idx < mem[ceil32(return_data.size) + 384]
                            _4958 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                            _4974 = mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448]
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = msg.sender
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 484] = address(_4958)
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 516] = _4974
                            require ext_code.size(address(tokenAddress))
                            call address(tokenAddress).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, address(_4958), _4974
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not return_data.size:
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5082 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                                _5142 = mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448]
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 484] = _5142
                                require ext_code.size(address(_5082))
                                call address(_5082).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5142
                            else:
                                require return_data.size == 32
                                mem[0] = ext_call.return_data[0]
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                39,
                                                0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 555 len 25]
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5145 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                                _5197 = mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448]
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 484] = _5197
                                require ext_code.size(address(_5145))
                                call address(_5145).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5197
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if mem[320] + ext_call.return_data[0] < mem[320]:
                                revert with 0, 'ds-math-add-overflow'
                            mem[320] = mem[320] + ext_call.return_data[0]
                        idx = idx + 1
                        continue 
                    if mem[320] > arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18):
                        revert with 0, 
                                    32,
                                    34,
                                    0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                                    mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 550 len 30]
                    if 10^18 * mem[320] / 10^18 != mem[320]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not 10^18 * mem[320] / 10^18:
                        revert with 0, 
                                    32,
                                    58,
                                    0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                                    mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 574 len 6]
                    if balances[address(arg1)].field_256:
                        if 10^18 > balances[address(arg1)].field_256:
                            if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                                revert with 0, 'ds-math-sub-underflow'
                            if not balances[address(arg1)].field_0:
                                if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                if stor5 < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                            else:
                                require balances[address(arg1)].field_0
                                if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                                    revert with 0, 'ds-math-mul-overflow'
                                if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                    balances[address(arg1)].field_256 = 10^18
                    stor4 = 10^18
                    if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18) < balances[address(arg1)].field_0:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18
                    if totalSupply + (10^18 * mem[320] / 10^18) < totalSupply:
                        revert with 0, 'ds-math-add-overflow'
                    totalSupply += 10^18 * mem[320] / 10^18
                    emit 0x64ddf252: (10^18 * mem[320] / 10^18), 0, arg1
                    emit Mint(10^18 * mem[320] / 10^18, totalSupply, 10^18, arg1, arg2);
                else:
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / 10^18 != s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384]:
                        revert with 0, 'ds-math-mul-overflow'
                    if totalSupply <= 0:
                        revert with 0, 'ds-math-div-overflow'
                    require totalSupply
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                        revert with 0, 'Exchange rate should not be 0!'
                    idx = 0
                    while idx < mem[ceil32(return_data.size) + 384]:
                        require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                        if mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448] != 0:
                            require idx < mem[ceil32(return_data.size) + 384]
                            _4961 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                            _4975 = mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448]
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = msg.sender
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 484] = address(_4961)
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 516] = _4975
                            require ext_code.size(address(tokenAddress))
                            call address(tokenAddress).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, address(_4961), _4975
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not return_data.size:
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5090 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                                _5149 = mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448]
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 484] = _5149
                                require ext_code.size(address(_5090))
                                call address(_5090).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5149
                            else:
                                require return_data.size == 32
                                mem[0] = ext_call.return_data[0]
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                39,
                                                0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 555 len 25]
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5152 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _73) + ceil32(return_data.size) + 416]
                                _5203 = mem[(32 * idx) + (32 * _73) + ceil32(return_data.size) + 448]
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 484] = _5203
                                require ext_code.size(address(_5152))
                                call address(_5152).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5203
                            mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if mem[320] + ext_call.return_data[0] < mem[320]:
                                revert with 0, 'ds-math-add-overflow'
                            mem[320] = mem[320] + ext_call.return_data[0]
                        idx = idx + 1
                        continue 
                    if mem[320] > arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18):
                        revert with 0, 
                                    32,
                                    34,
                                    0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                                    mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 550 len 30]
                    if 10^18 * mem[320] / 10^18 != mem[320]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                        revert with 0, 'ds-math-div-overflow'
                    require 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    if not 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                        revert with 0, 
                                    32,
                                    58,
                                    0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                                    mem[(32 * _1284) + (32 * _73) + ceil32(return_data.size) + 574 len 6]
                    if balances[address(arg1)].field_256:
                        if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply > balances[address(arg1)].field_256:
                            if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                                revert with 0, 'ds-math-sub-underflow'
                            if not balances[address(arg1)].field_0:
                                if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                if stor5 < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                            else:
                                require balances[address(arg1)].field_0
                                if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256:
                                    revert with 0, 'ds-math-mul-overflow'
                                if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                stor5 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                    balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    stor4 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < balances[address(arg1)].field_0:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    if totalSupply + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < totalSupply:
                        revert with 0, 'ds-math-add-overflow'
                    totalSupply += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    emit 0x64ddf252: (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply), 0, arg1
                    emit Mint(10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, totalSupply, 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, arg1, arg2);
            else:
                require return_data.size == 32
                mem[0] = ext_call.return_data[0]
                if not ext_call.return_data[0]:
                    revert with 0, 'mint: transferFrom fee failed'
                if arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18) > arg2:
                    revert with 0, 'ds-math-sub-underflow'
                mem[288] = arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)
                mem[384] = 0x1e462e9000000000000000000000000000000000000000000000000000000000
                mem[388] = arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)
                require ext_code.size(dispatcherAddress)
                staticcall dispatcherAddress.getDepositStrategy(uint256 rg1) with:
                        gas gas_remaining wei
                       args (arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18))
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[384 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 384
                require return_data.size >= 64
                _64 = mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32
                require mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 <= 4294967296
                require mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 32 <= return_data.size
                require mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384] <= 4294967296 and mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + (32 * mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + 384] = mem[mem[384 len 4], Mask(224, 32, arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)) >> 32 + 384]
                _80 = mem[_64 + 384]
                mem[ceil32(return_data.size) + 416 len floor32(mem[_64 + 384])] = mem[_64 + 416 len floor32(mem[_64 + 384])]
                mem[64] = (32 * _80) + ceil32(return_data.size) + 416
                require uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) <= 4294967296
                require uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 32 <= return_data.size
                require mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384] <= 4294967296 and uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + (32 * mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384]) + 32 <= return_data.size
                mem[(32 * _80) + ceil32(return_data.size) + 416] = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384]
                _1285 = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384]
                mem[(32 * _80) + ceil32(return_data.size) + 448 len floor32(mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384])] = mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 416 len floor32(mem[uint32(arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18)), Mask(224, 0, stor6) + 384])]
                mem[64] = (32 * _1285) + (32 * _80) + ceil32(return_data.size) + 448
                mem[160] = (32 * _80) + ceil32(return_data.size) + 416
                mem[128] = ceil32(return_data.size) + 384
                if not mem[ceil32(return_data.size) + 384]:
                    revert with 0, 
                                32,
                                69,
                                0x2e6d696e743a206e6f206465706f73697420737472617465677920617661696c61626c652c20706f737369626c792064756520746f2061207061757365642068616e646c65,
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 585 len 27]
                idx = 0
                s = 0
                while idx < mem[ceil32(return_data.size) + 384]:
                    require idx < mem[ceil32(return_data.size) + 384]
                    _3679 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                    mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = address(tokenAddress)
                    require ext_code.size(address(_3679))
                    call address(_3679).getRealBalance(address rg1) with:
                         gas gas_remaining wei
                        args address(tokenAddress)
                    mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if s + ext_call.return_data[0] < s:
                        revert with 0, 'ds-math-add-overflow'
                    idx = idx + 1
                    s = s + ext_call.return_data[0]
                    continue 
                if 0 == totalSupply:
                    idx = 0
                    while idx < mem[ceil32(return_data.size) + 384]:
                        require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                        if mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448] != 0:
                            require idx < mem[ceil32(return_data.size) + 384]
                            _4964 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                            _4976 = mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448]
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = msg.sender
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 484] = address(_4964)
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 516] = _4976
                            require ext_code.size(address(tokenAddress))
                            call address(tokenAddress).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, address(_4964), _4976
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not return_data.size:
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5098 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                                _5156 = mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448]
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 484] = _5156
                                require ext_code.size(address(_5098))
                                call address(_5098).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5156
                            else:
                                require return_data.size == 32
                                mem[0] = ext_call.return_data[0]
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                39,
                                                0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 555 len 25]
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5159 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                                _5209 = mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448]
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 484] = _5209
                                require ext_code.size(address(_5159))
                                call address(_5159).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5209
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if mem[320] + ext_call.return_data[0] < mem[320]:
                                revert with 0, 'ds-math-add-overflow'
                            mem[320] = mem[320] + ext_call.return_data[0]
                        idx = idx + 1
                        continue 
                    if mem[320] > arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18):
                        revert with 0, 
                                    32,
                                    34,
                                    0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                                    mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 550 len 30]
                    if 10^18 * mem[320] / 10^18 != mem[320]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not 10^18 * mem[320] / 10^18:
                        revert with 0, 
                                    32,
                                    58,
                                    0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                                    mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 574 len 6]
                    if balances[address(arg1)].field_256:
                        if 10^18 > balances[address(arg1)].field_256:
                            if -balances[address(arg1)].field_256 + 10^18 > 10^18:
                                revert with 0, 'ds-math-sub-underflow'
                            if not balances[address(arg1)].field_0:
                                if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                if stor5 < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                            else:
                                require balances[address(arg1)].field_0
                                if (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != -balances[address(arg1)].field_256 + 10^18:
                                    revert with 0, 'ds-math-mul-overflow'
                                if balances[address(arg1)].field_512 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                balances[address(arg1)].field_512 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                if stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                stor5 += (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                emit Interest(balances[address(arg1)].field_512, (10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                    balances[address(arg1)].field_256 = 10^18
                    stor4 = 10^18
                    if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18) < balances[address(arg1)].field_0:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18
                    if totalSupply + (10^18 * mem[320] / 10^18) < totalSupply:
                        revert with 0, 'ds-math-add-overflow'
                    totalSupply += 10^18 * mem[320] / 10^18
                    emit 0x64ddf252: (10^18 * mem[320] / 10^18), 0, arg1
                    emit Mint(10^18 * mem[320] / 10^18, totalSupply, 10^18, arg1, arg2);
                else:
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / 10^18 != s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384]:
                        revert with 0, 'ds-math-mul-overflow'
                    if totalSupply <= 0:
                        revert with 0, 'ds-math-div-overflow'
                    require totalSupply
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                        revert with 0, 'Exchange rate should not be 0!'
                    idx = 0
                    while idx < mem[ceil32(return_data.size) + 384]:
                        require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                        if mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448] != 0:
                            require idx < mem[ceil32(return_data.size) + 384]
                            _4967 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                            require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                            _4977 = mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448]
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 448] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = msg.sender
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 484] = address(_4967)
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 516] = _4977
                            require ext_code.size(address(tokenAddress))
                            call address(tokenAddress).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, address(_4967), _4977
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not return_data.size:
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5106 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                                _5163 = mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448]
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 484] = _5163
                                require ext_code.size(address(_5106))
                                call address(_5106).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5163
                            else:
                                require return_data.size == 32
                                mem[0] = ext_call.return_data[0]
                                if not ext_call.return_data[0]:
                                    revert with 0, 
                                                32,
                                                39,
                                                0x646d696e743a207472616e7366657220746f6b656e20746f2068616e646c6572206661696c6564,
                                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 555 len 25]
                                require idx < mem[ceil32(return_data.size) + 384]
                                _5166 = mem[(32 * idx) + ceil32(return_data.size) + 416]
                                require idx < mem[(32 * _80) + ceil32(return_data.size) + 416]
                                _5215 = mem[(32 * idx) + (32 * _80) + ceil32(return_data.size) + 448]
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 452] = address(tokenAddress)
                                mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 484] = _5215
                                require ext_code.size(address(_5166))
                                call address(_5166).deposit(address rg1, uint256 rg2) with:
                                     gas gas_remaining wei
                                    args address(tokenAddress), _5215
                            mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 448] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if mem[320] + ext_call.return_data[0] < mem[320]:
                                revert with 0, 'ds-math-add-overflow'
                            mem[320] = mem[320] + ext_call.return_data[0]
                        idx = idx + 1
                        continue 
                    if mem[320] > arg2 - (arg2 * sub_8d2039b8[call.func_hash] / 10^18):
                        revert with 0, 
                                    32,
                                    34,
                                    0x726d696e743a206465706f7369746564206d6f7265207468616e20696e74656e6465,
                                    mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 550 len 30]
                    if 10^18 * mem[320] / 10^18 != mem[320]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply <= 0:
                        revert with 0, 'ds-math-div-overflow'
                    require 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    if not 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                        revert with 0, 
                                    32,
                                    58,
                                    0x656d696e743a2063616e206e6f74206d696e742074686520736d616c6c65737420756e697420776974682074686520676976656e20616d6f756e,
                                    mem[(32 * _1285) + (32 * _80) + ceil32(return_data.size) + 574 len 6]
                    if balances[address(arg1)].field_256:
                        if 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply > balances[address(arg1)].field_256:
                            if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256 > 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply:
                                revert with 0, 'ds-math-sub-underflow'
                            if not balances[address(arg1)].field_0:
                                if balances[address(arg1)].field_512 < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                if stor5 < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                emit Interest(balances[address(arg1)].field_512, 0, stor5, arg1);
                            else:
                                require balances[address(arg1)].field_0
                                if (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / balances[address(arg1)].field_0 != (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) - balances[address(arg1)].field_256:
                                    revert with 0, 'ds-math-mul-overflow'
                                if balances[address(arg1)].field_512 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < balances[address(arg1)].field_512:
                                    revert with 0, 'ds-math-add-overflow'
                                balances[address(arg1)].field_512 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                if stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18) < stor5:
                                    revert with 0, 'ds-math-add-overflow'
                                stor5 += (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18
                                emit Interest(balances[address(arg1)].field_512, (10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18, stor5 + ((10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply * balances[address(arg1)].field_0) - (balances[address(arg1)].field_256 * balances[address(arg1)].field_0) / 10^18), arg1);
                    balances[address(arg1)].field_256 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    stor4 = 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    if balances[address(arg1)].field_0 + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < balances[address(arg1)].field_0:
                        revert with 0, 'ds-math-add-overflow'
                    balances[address(arg1)].field_0 += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    if totalSupply + (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply) < totalSupply:
                        revert with 0, 'ds-math-add-overflow'
                    totalSupply += 10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply
                    emit 0x64ddf252: (10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply), 0, arg1
                    emit Mint(10^18 * mem[320] / 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, totalSupply, 10^18 * s * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] * mem[ceil32(return_data.size) + 384] / totalSupply, arg1, arg2);
    stor0 = 1
}



}
