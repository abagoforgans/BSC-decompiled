contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#
const totalSupply = 100 * 10^18


address owner;
mapping of uint256 stor1;
mapping of uint256 stor2;
mapping of uint256 allowance;
mapping of uint8 stor4;
array of address stor5;
uint256 stor6;
uint256 totalFees;
array of uint256 name;
array of uint256 symbol;
uint8 decimals;

function name() payable {
    return name[0 len name.length]
}

function totalFees() payable {
    return totalFees
}

function decimals() payable {
    return decimals
}

function owner() payable {
    return owner
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function isExcluded(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(stor4[address(arg1)])
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return allowance[address(arg1)][address(arg2)]
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function includeAccount(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not stor4[address(arg1)]:
        revert with 0, 'Account is already excluded'
    idx = 0
    while idx < stor5.length:
        mem[0] = 5
        if stor5[idx] != arg1:
            idx = idx + 1
            continue 
        require stor5.length - 1 < stor5.length
        require idx < stor5.length
        stor5[idx] = stor5[stor5.length]
        stor2[address(arg1)] = 0
        stor4[address(arg1)] = 0
        require stor5.length
        stor5[stor5.length] = 0
        stor5.length--
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 > allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 
                    32,
                    37,
                    0x6e45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                    mem[165 len 27],
                    mem[219 len 5]
    if not msg.sender:
        revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
    if not arg1:
        revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
    allowance[address(msg.sender)][address(arg1)] -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if allowance[address(msg.sender)][address(arg1)] + arg2 < allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function tokenFromReflection(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if arg1 > stor6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                    mem[206 len 22]
    idx = 0
    s = 100 * 10^18
    t = stor6
    while idx < stor5.length:
        mem[0] = stor5[idx]
        mem[32] = 1
        if stor1[stor5[idx]] > t:
            _77 = mem[64]
            mem[64] = mem[64] + 64
            mem[_77] = 26
            mem[_77 + 32] = 'SafeMath: division by zero'
            _95 = mem[64]
            mem[64] = mem[64] + 64
            mem[_95] = 26
            mem[_95 + 32] = 'SafeMath: division by zero'
            if stor6 / 100 * 10^18 > 0:
                require stor6 / 100 * 10^18
                return (arg1 / stor6 / 100 * 10^18)
            _101 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_101 + idx + 68] = mem[_95 + idx + 32]
                idx = idx + 32
                continue 
            mem[_101 + 68] = mem[_101 + 74 len 26]
            revert with memory
              from mem[64]
               len _101 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        if stor2[stor5[idx]] > s:
            _81 = mem[64]
            mem[64] = mem[64] + 64
            mem[_81] = 26
            mem[_81 + 32] = 'SafeMath: division by zero'
            _107 = mem[64]
            mem[64] = mem[64] + 64
            mem[_107] = 26
            mem[_107 + 32] = 'SafeMath: division by zero'
            if stor6 / 100 * 10^18 > 0:
                require stor6 / 100 * 10^18
                return (arg1 / stor6 / 100 * 10^18)
            _113 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_113 + idx + 68] = mem[_107 + idx + 32]
                idx = idx + 32
                continue 
            mem[_113 + 68] = mem[_113 + 74 len 26]
            revert with memory
              from mem[64]
               len _113 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 1
        _80 = mem[64]
        mem[64] = mem[64] + 64
        mem[_80] = 30
        mem[_80 + 32] = 'SafeMath: subtraction overflow'
        if stor1[stor5[idx]] > t:
            _82 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_82 + idx + 68] = mem[_80 + idx + 32]
                idx = idx + 32
                continue 
            mem[_82 + 68] = mem[_82 + 70 len 30]
            revert with memory
              from mem[64]
               len _82 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        _96 = mem[64]
        mem[64] = mem[64] + 64
        mem[_96] = 30
        mem[_96 + 32] = 'SafeMath: subtraction overflow'
        if stor2[stor5[idx]] <= s:
            idx = idx + 1
            s = s - stor2[stor5[idx]]
            t = t - stor1[stor5[idx]]
            continue 
        _104 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 30
        idx = 0
        while idx < 30:
            mem[_104 + idx + 68] = mem[_96 + idx + 32]
            idx = idx + 32
            continue 
        mem[_104 + 68] = mem[_104 + 70 len 30]
        revert with memory
          from mem[64]
           len _104 + -mem[64] + 100
    if t < stor6 / 100 * 10^18:
        if stor6 / 100 * 10^18 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if stor6 / 100 * 10^18:
            return (arg1 / stor6 / 100 * 10^18)
    else:
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        if s:
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            if t / s:
                return (arg1 / t / s)
    revert
}

function balanceOf(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if stor4[address(arg1)]:
        return stor2[address(arg1)]
    mem[0] = arg1
    mem[32] = 1
    if stor1[address(arg1)] > stor6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                    mem[206 len 22]
    idx = 0
    s = 100 * 10^18
    t = stor6
    while idx < stor5.length:
        mem[0] = stor5[idx]
        mem[32] = 1
        if stor1[stor5[idx]] > t:
            _82 = mem[64]
            mem[64] = mem[64] + 64
            mem[_82] = 26
            mem[_82 + 32] = 'SafeMath: division by zero'
            _100 = mem[64]
            mem[64] = mem[64] + 64
            mem[_100] = 26
            mem[_100 + 32] = 'SafeMath: division by zero'
            if stor6 / 100 * 10^18 > 0:
                require stor6 / 100 * 10^18
                return (stor1[address(arg1)] / stor6 / 100 * 10^18)
            _106 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_106 + idx + 68] = mem[_100 + idx + 32]
                idx = idx + 32
                continue 
            mem[_106 + 68] = mem[_106 + 74 len 26]
            revert with memory
              from mem[64]
               len _106 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        if stor2[stor5[idx]] > s:
            _86 = mem[64]
            mem[64] = mem[64] + 64
            mem[_86] = 26
            mem[_86 + 32] = 'SafeMath: division by zero'
            _112 = mem[64]
            mem[64] = mem[64] + 64
            mem[_112] = 26
            mem[_112 + 32] = 'SafeMath: division by zero'
            if stor6 / 100 * 10^18 > 0:
                require stor6 / 100 * 10^18
                return (stor1[address(arg1)] / stor6 / 100 * 10^18)
            _118 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_118 + idx + 68] = mem[_112 + idx + 32]
                idx = idx + 32
                continue 
            mem[_118 + 68] = mem[_118 + 74 len 26]
            revert with memory
              from mem[64]
               len _118 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 1
        _85 = mem[64]
        mem[64] = mem[64] + 64
        mem[_85] = 30
        mem[_85 + 32] = 'SafeMath: subtraction overflow'
        if stor1[stor5[idx]] > t:
            _87 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_87 + idx + 68] = mem[_85 + idx + 32]
                idx = idx + 32
                continue 
            mem[_87 + 68] = mem[_87 + 70 len 30]
            revert with memory
              from mem[64]
               len _87 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        _101 = mem[64]
        mem[64] = mem[64] + 64
        mem[_101] = 30
        mem[_101 + 32] = 'SafeMath: subtraction overflow'
        if stor2[stor5[idx]] <= s:
            idx = idx + 1
            s = s - stor2[stor5[idx]]
            t = t - stor1[stor5[idx]]
            continue 
        _109 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 30
        idx = 0
        while idx < 30:
            mem[_109 + idx + 68] = mem[_101 + idx + 32]
            idx = idx + 32
            continue 
        mem[_109 + 68] = mem[_109 + 70 len 30]
        revert with memory
          from mem[64]
           len _109 + -mem[64] + 100
    if t < stor6 / 100 * 10^18:
        if stor6 / 100 * 10^18 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if stor6 / 100 * 10^18:
            return (stor1[address(arg1)] / stor6 / 100 * 10^18)
    else:
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        if s:
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            if t / s:
                return (stor1[address(arg1)] / t / s)
    revert
}

function excludeAccount(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor4[address(arg1)]:
        revert with 0, 'Account is already excluded'
    if stor1[address(arg1)] > 0:
        mem[0] = arg1
        mem[32] = 1
        if stor1[address(arg1)] > stor6:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        42,
                        0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                        mem[206 len 22]
        idx = 0
        s = 100 * 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _90 = mem[64]
                mem[64] = mem[64] + 64
                mem[_90] = 26
                mem[_90 + 32] = 'SafeMath: division by zero'
                _108 = mem[64]
                mem[64] = mem[64] + 64
                mem[_108] = 26
                mem[_108 + 32] = 'SafeMath: division by zero'
                if stor6 / 100 * 10^18 > 0:
                    require stor6 / 100 * 10^18
                    stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 100 * 10^18
                    stor4[address(arg1)] = 1
                    stor5.length++
                    stor5[stor5.length] = arg1
                _114 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_114 + idx + 68] = mem[_108 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_114 + 68] = mem[_114 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _114 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _94 = mem[64]
                mem[64] = mem[64] + 64
                mem[_94] = 26
                mem[_94 + 32] = 'SafeMath: division by zero'
                _120 = mem[64]
                mem[64] = mem[64] + 64
                mem[_120] = 26
                mem[_120 + 32] = 'SafeMath: division by zero'
                if stor6 / 100 * 10^18 > 0:
                    require stor6 / 100 * 10^18
                    stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 100 * 10^18
                    stor4[address(arg1)] = 1
                    stor5.length++
                    stor5[stor5.length] = arg1
                _126 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_126 + idx + 68] = mem[_120 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_126 + 68] = mem[_126 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _126 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _93 = mem[64]
            mem[64] = mem[64] + 64
            mem[_93] = 30
            mem[_93 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _95 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_95 + idx + 68] = mem[_93 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_95 + 68] = mem[_95 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _95 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _109 = mem[64]
            mem[64] = mem[64] + 64
            mem[_109] = 30
            mem[_109 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _117 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_117 + idx + 68] = mem[_109 + idx + 32]
                idx = idx + 32
                continue 
            mem[_117 + 68] = mem[_117 + 70 len 30]
            revert with memory
              from mem[64]
               len _117 + -mem[64] + 100
        if t < stor6 / 100 * 10^18:
            if stor6 / 100 * 10^18 <= 0:
                revert with 0, 'SafeMath: division by zero'
            require stor6 / 100 * 10^18
            stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 100 * 10^18
        else:
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require t / s
            stor2[address(arg1)] = stor1[address(arg1)] / t / s
    stor4[address(arg1)] = 1
    stor5.length++
    stor5[stor5.length] = arg1
}

function reflectionFromToken(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 > 100 * 10^18:
        revert with 0, 'Amount must be less than supply'
    if arg2:
        if not arg1:
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            mem[64] = 224
            mem[160] = 30
            mem[192] = 'SafeMath: subtraction overflow'
            if 0 > arg1:
                revert with 0, 'SafeMath: subtraction overflow'
            idx = 0
            s = 100 * 10^18
            t = stor6
            while idx < stor5.length:
                mem[0] = stor5[idx]
                mem[32] = 1
                if stor1[stor5[idx]] > t:
                    _630 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_630] = 26
                    mem[_630 + 32] = 'SafeMath: division by zero'
                    if not arg1:
                        return 0
                    require arg1
                    if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _802 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_802] = 30
                    mem[_802 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 100 * 10^18:
                        return (arg1 * stor6 / 100 * 10^18)
                    _834 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_834 + idx + 68] = mem[_802 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_834 + 68] = mem[_834 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _834 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                if stor2[stor5[idx]] > s:
                    _644 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_644] = 26
                    mem[_644 + 32] = 'SafeMath: division by zero'
                    if not arg1:
                        return 0
                    require arg1
                    if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _837 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_837] = 30
                    mem[_837 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 100 * 10^18:
                        return (arg1 * stor6 / 100 * 10^18)
                    _882 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_882 + idx + 68] = mem[_837 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_882 + 68] = mem[_882 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _882 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _640 = mem[64]
                mem[64] = mem[64] + 64
                mem[_640] = 30
                mem[_640 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _650 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_650 + idx + 68] = mem[_640 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_650 + 68] = mem[_650 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _650 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _701 = mem[64]
                mem[64] = mem[64] + 64
                mem[_701] = 30
                mem[_701 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _718 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_718 + idx + 68] = mem[_701 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_718 + 68] = mem[_718 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _718 + -mem[64] + 100
            _600 = mem[64]
            mem[64] = mem[64] + 64
            mem[_600] = 26
            mem[_600 + 32] = 'SafeMath: division by zero'
            if t < stor6 / 100 * 10^18:
                _662 = mem[64]
                mem[64] = mem[64] + 64
                mem[_662] = 26
                mem[_662 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * stor6 / 100 * 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (arg1 * stor6 / 100 * 10^18)
            _661 = mem[64]
            mem[64] = mem[64] + 64
            mem[_661] = 26
            mem[_661 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                return 0
            require arg1
            if arg1 * t / s / arg1 != t / s:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * t / s)
        require arg1
        if 5 * arg1 / arg1 != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        mem[96] = 26
        mem[128] = 'SafeMath: division by zero'
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 5 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 100 * 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _627 = mem[64]
                mem[64] = mem[64] + 64
                mem[_627] = 26
                mem[_627 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 5 * arg1 / 100:
                        return 0
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _800 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_800] = 30
                    mem[_800 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= 0:
                        return (-1 * 5 * arg1 / 100 * stor6 / 100 * 10^18)
                    _827 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_827 + idx + 68] = mem[_800 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_827 + 68] = mem[_827 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _827 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    _799 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_799] = 30
                    mem[_799 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 100 * 10^18:
                        return (arg1 * stor6 / 100 * 10^18)
                    _824 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_824 + idx + 68] = mem[_799 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_824 + 68] = mem[_824 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _824 + -mem[64] + 100
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _823 = mem[64]
                mem[64] = mem[64] + 64
                mem[_823] = 30
                mem[_823 + 32] = 'SafeMath: subtraction overflow'
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= arg1 * stor6 / 100 * 10^18:
                    return ((arg1 * stor6 / 100 * 10^18) - (5 * arg1 / 100 * stor6 / 100 * 10^18))
                _867 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_867 + idx + 68] = mem[_823 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_867 + 68] = mem[_867 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _867 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _643 = mem[64]
                mem[64] = mem[64] + 64
                mem[_643] = 26
                mem[_643 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 5 * arg1 / 100:
                        return 0
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _831 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_831] = 30
                    mem[_831 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= 0:
                        return (-1 * 5 * arg1 / 100 * stor6 / 100 * 10^18)
                    _876 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_876 + idx + 68] = mem[_831 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_876 + 68] = mem[_876 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _876 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    _830 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_830] = 30
                    mem[_830 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 100 * 10^18:
                        return (arg1 * stor6 / 100 * 10^18)
                    _873 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_873 + idx + 68] = mem[_830 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_873 + 68] = mem[_873 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _873 + -mem[64] + 100
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _872 = mem[64]
                mem[64] = mem[64] + 64
                mem[_872] = 30
                mem[_872 + 32] = 'SafeMath: subtraction overflow'
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= arg1 * stor6 / 100 * 10^18:
                    return ((arg1 * stor6 / 100 * 10^18) - (5 * arg1 / 100 * stor6 / 100 * 10^18))
                _938 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_938 + idx + 68] = mem[_872 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_938 + 68] = mem[_938 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _938 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _639 = mem[64]
            mem[64] = mem[64] + 64
            mem[_639] = 30
            mem[_639 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _647 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_647 + idx + 68] = mem[_639 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_647 + 68] = mem[_647 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _647 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _699 = mem[64]
            mem[64] = mem[64] + 64
            mem[_699] = 30
            mem[_699 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _713 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_713 + idx + 68] = mem[_699 + idx + 32]
                idx = idx + 32
                continue 
            mem[_713 + 68] = mem[_713 + 70 len 30]
            revert with memory
              from mem[64]
               len _713 + -mem[64] + 100
        _595 = mem[64]
        mem[64] = mem[64] + 64
        mem[_595] = 26
        mem[_595 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 100 * 10^18:
            _660 = mem[64]
            mem[64] = mem[64] + 64
            mem[_660] = 26
            mem[_660 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if not 5 * arg1 / 100:
                    return 0
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (-1 * 5 * arg1 / 100 * stor6 / 100 * 10^18)
            require arg1
            if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 5 * arg1 / 100:
                if 0 > arg1 * stor6 / 100 * 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (arg1 * stor6 / 100 * 10^18)
            require 5 * arg1 / 100
            if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 5 * arg1 / 100 * stor6 / 100 * 10^18 > arg1 * stor6 / 100 * 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            return ((arg1 * stor6 / 100 * 10^18) - (5 * arg1 / 100 * stor6 / 100 * 10^18))
        _659 = mem[64]
        mem[64] = mem[64] + 64
        mem[_659] = 26
        mem[_659 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            if not 5 * arg1 / 100:
                return 0
            require 5 * arg1 / 100
            if 5 * arg1 / 100 * t / s / 5 * arg1 / 100 != t / s:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 5 * arg1 / 100 * t / s > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return (-1 * 5 * arg1 / 100 * t / s)
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not 5 * arg1 / 100:
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * t / s)
        require 5 * arg1 / 100
        if 5 * arg1 / 100 * t / s / 5 * arg1 / 100 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if 5 * arg1 / 100 * t / s > arg1 * t / s:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((arg1 * t / s) - (5 * arg1 / 100 * t / s))
    if not arg1:
        mem[96] = 26
        mem[128] = 'SafeMath: division by zero'
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 0 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 100 * 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _636 = mem[64]
                mem[64] = mem[64] + 64
                mem[_636] = 26
                mem[_636 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _807 = mem[64]
                mem[64] = mem[64] + 64
                mem[_807] = 30
                mem[_807 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= arg1 * stor6 / 100 * 10^18:
                    return (arg1 * stor6 / 100 * 10^18)
                _851 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_851 + idx + 68] = mem[_807 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_851 + 68] = mem[_851 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _851 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _646 = mem[64]
                mem[64] = mem[64] + 64
                mem[_646] = 26
                mem[_646 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _854 = mem[64]
                mem[64] = mem[64] + 64
                mem[_854] = 30
                mem[_854 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= arg1 * stor6 / 100 * 10^18:
                    return (arg1 * stor6 / 100 * 10^18)
                _904 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_904 + idx + 68] = mem[_854 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_904 + 68] = mem[_904 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _904 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _642 = mem[64]
            mem[64] = mem[64] + 64
            mem[_642] = 30
            mem[_642 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _656 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_656 + idx + 68] = mem[_642 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_656 + 68] = mem[_656 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _656 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _705 = mem[64]
            mem[64] = mem[64] + 64
            mem[_705] = 30
            mem[_705 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _728 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_728 + idx + 68] = mem[_705 + idx + 32]
                idx = idx + 32
                continue 
            mem[_728 + 68] = mem[_728 + 70 len 30]
            revert with memory
              from mem[64]
               len _728 + -mem[64] + 100
        _610 = mem[64]
        mem[64] = mem[64] + 64
        mem[_610] = 26
        mem[_610 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 100 * 10^18:
            _666 = mem[64]
            mem[64] = mem[64] + 64
            mem[_666] = 26
            mem[_666 + 32] = 'SafeMath: division by zero'
            if not arg1:
                return 0
            require arg1
            if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 0 > arg1 * stor6 / 100 * 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * stor6 / 100 * 10^18)
        _665 = mem[64]
        mem[64] = mem[64] + 64
        mem[_665] = 26
        mem[_665 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            return 0
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if 0 > arg1 * t / s:
            revert with 0, 'SafeMath: subtraction overflow'
    else:
        require arg1
        if 5 * arg1 / arg1 != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        mem[96] = 26
        mem[128] = 'SafeMath: division by zero'
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 5 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 100 * 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _633 = mem[64]
                mem[64] = mem[64] + 64
                mem[_633] = 26
                mem[_633 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 5 * arg1 / 100:
                        return 0
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _805 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_805] = 30
                    mem[_805 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= 0:
                        return 0
                    _844 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_844 + idx + 68] = mem[_805 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_844 + 68] = mem[_844 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _844 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    _804 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_804] = 30
                    mem[_804 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 100 * 10^18:
                        return (arg1 * stor6 / 100 * 10^18)
                    _841 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_841 + idx + 68] = mem[_804 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_841 + 68] = mem[_841 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _841 + -mem[64] + 100
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _840 = mem[64]
                mem[64] = mem[64] + 64
                mem[_840] = 30
                mem[_840 + 32] = 'SafeMath: subtraction overflow'
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= arg1 * stor6 / 100 * 10^18:
                    return (arg1 * stor6 / 100 * 10^18)
                _889 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_889 + idx + 68] = mem[_840 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_889 + 68] = mem[_889 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _889 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _645 = mem[64]
                mem[64] = mem[64] + 64
                mem[_645] = 26
                mem[_645 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 5 * arg1 / 100:
                        return 0
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _848 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_848] = 30
                    mem[_848 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= 0:
                        return 0
                    _898 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_898 + idx + 68] = mem[_848 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_898 + 68] = mem[_898 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _898 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    _847 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_847] = 30
                    mem[_847 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 100 * 10^18:
                        return (arg1 * stor6 / 100 * 10^18)
                    _895 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_895 + idx + 68] = mem[_847 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_895 + 68] = mem[_895 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _895 + -mem[64] + 100
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _894 = mem[64]
                mem[64] = mem[64] + 64
                mem[_894] = 30
                mem[_894 + 32] = 'SafeMath: subtraction overflow'
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 <= arg1 * stor6 / 100 * 10^18:
                    return (arg1 * stor6 / 100 * 10^18)
                _972 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_972 + idx + 68] = mem[_894 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_972 + 68] = mem[_972 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _972 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _641 = mem[64]
            mem[64] = mem[64] + 64
            mem[_641] = 30
            mem[_641 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _653 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_653 + idx + 68] = mem[_641 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_653 + 68] = mem[_653 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _653 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _703 = mem[64]
            mem[64] = mem[64] + 64
            mem[_703] = 30
            mem[_703 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _723 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_723 + idx + 68] = mem[_703 + idx + 32]
                idx = idx + 32
                continue 
            mem[_723 + 68] = mem[_723 + 70 len 30]
            revert with memory
              from mem[64]
               len _723 + -mem[64] + 100
        _605 = mem[64]
        mem[64] = mem[64] + 64
        mem[_605] = 26
        mem[_605 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 100 * 10^18:
            _664 = mem[64]
            mem[64] = mem[64] + 64
            mem[_664] = 26
            mem[_664 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 5 * arg1 / 100:
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    else:
                        return 0
                else:
                    return 0
            require arg1
            if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 5 * arg1 / 100:
                if 0 > arg1 * stor6 / 100 * 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 > arg1 * stor6 / 100 * 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * stor6 / 100 * 10^18)
        _663 = mem[64]
        mem[64] = mem[64] + 64
        mem[_663] = 26
        mem[_663 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            if 5 * arg1 / 100:
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * t / s / 5 * arg1 / 100 != t / s:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 5 * arg1 / 100 * t / s > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                else:
                    return 0
            else:
                return 0
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not 5 * arg1 / 100:
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
        else:
            require 5 * arg1 / 100
            if 5 * arg1 / 100 * t / s / 5 * arg1 / 100 != t / s:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 5 * arg1 / 100 * t / s > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
    return (arg1 * t / s)
}

function reflect(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = msg.sender
    mem[32] = 4
    if stor4[address(msg.sender)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    44,
                    0x734578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f,
                    mem[208 len 20]
    if not arg1:
        mem[96] = 26
        mem[128] = 'SafeMath: division by zero'
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 0 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 100 * 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _751 = mem[64]
                mem[64] = mem[64] + 64
                mem[_751] = 26
                mem[_751 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    _829 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_829] = 30
                    mem[_829 + 32] = 'SafeMath: subtraction overflow'
                    mem[0] = msg.sender
                    mem[32] = 1
                    _897 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_897] = 30
                    mem[_897 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _946 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_946 + idx + 68] = mem[_897 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_946 + 68] = mem[_946 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _946 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1037 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1037] = 30
                    mem[_1037 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1106 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1106 + idx + 68] = mem[_1037 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1106 + 68] = mem[_1106 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1106 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _837 = mem[64]
                mem[64] = mem[64] + 64
                mem[_837] = 30
                mem[_837 + 32] = 'SafeMath: subtraction overflow'
                if 0 > arg1 * stor6 / 100 * 10^18:
                    _858 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_858 + idx + 68] = mem[_837 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_858 + 68] = mem[_858 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _858 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _945 = mem[64]
                mem[64] = mem[64] + 64
                mem[_945] = 30
                mem[_945 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                    _1009 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1009 + idx + 68] = mem[_945 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1009 + 68] = mem[_1009 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1009 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
                _1103 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1103] = 30
                mem[_1103 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 100 * 10^18
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1187 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1187 + idx + 68] = mem[_1103 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1187 + 68] = mem[_1187 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1187 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] <= s:
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _755 = mem[64]
                mem[64] = mem[64] + 64
                mem[_755] = 30
                mem[_755 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _761 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_761 + idx + 68] = mem[_755 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_761 + 68] = mem[_761 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _761 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _786 = mem[64]
                mem[64] = mem[64] + 64
                mem[_786] = 30
                mem[_786 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _797 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_797 + idx + 68] = mem[_786 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_797 + 68] = mem[_797 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _797 + -mem[64] + 100
            _757 = mem[64]
            mem[64] = mem[64] + 64
            mem[_757] = 26
            mem[_757 + 32] = 'SafeMath: division by zero'
            if not arg1:
                _838 = mem[64]
                mem[64] = mem[64] + 64
                mem[_838] = 30
                mem[_838 + 32] = 'SafeMath: subtraction overflow'
                mem[0] = msg.sender
                mem[32] = 1
                _951 = mem[64]
                mem[64] = mem[64] + 64
                mem[_951] = 30
                mem[_951 + 32] = 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    _1015 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1015 + idx + 68] = mem[_951 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1015 + 68] = mem[_1015 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1015 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _1109 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1109] = 30
                mem[_1109 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= stor6:
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1194 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1194 + idx + 68] = mem[_1109 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1194 + 68] = mem[_1194 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1194 + -mem[64] + 100
            require arg1
            if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _861 = mem[64]
            mem[64] = mem[64] + 64
            mem[_861] = 30
            mem[_861 + 32] = 'SafeMath: subtraction overflow'
            if 0 > arg1 * stor6 / 100 * 10^18:
                _887 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_887 + idx + 68] = mem[_861 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_887 + 68] = mem[_887 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _887 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            _1014 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1014] = 30
            mem[_1014 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                _1082 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1082 + idx + 68] = mem[_1014 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1082 + 68] = mem[_1082 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1082 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
            _1191 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1191] = 30
            mem[_1191 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 100 * 10^18 <= stor6:
                stor6 += -1 * arg1 * stor6 / 100 * 10^18
                if totalFees + arg1 < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += arg1
            _1281 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1281 + idx + 68] = mem[_1191 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1281 + 68] = mem[_1281 + 70 len 30]
            revert with memory
              from mem[64]
               len _1281 + -mem[64] + 100
        _737 = mem[64]
        mem[64] = mem[64] + 64
        mem[_737] = 26
        mem[_737 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 100 * 10^18:
            _767 = mem[64]
            mem[64] = mem[64] + 64
            mem[_767] = 26
            mem[_767 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * stor6 / 100 * 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
                if arg1 * stor6 / 100 * 10^18 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * stor6 / 100 * 10^18
        else:
            _766 = mem[64]
            mem[64] = mem[64] + 64
            mem[_766] = 26
            mem[_766 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * t / s / arg1 != t / s:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * t / s:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * t / s > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * t / s
                if arg1 * t / s > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * t / s
    else:
        require arg1
        if 5 * arg1 / arg1 != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        mem[96] = 26
        mem[128] = 'SafeMath: division by zero'
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 5 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 100 * 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _748 = mem[64]
                mem[64] = mem[64] + 64
                mem[_748] = 26
                mem[_748 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 5 * arg1 / 100:
                        _828 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_828] = 30
                        mem[_828 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 1
                        _894 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_894] = 30
                        mem[_894 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _937 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_937 + idx + 68] = mem[_894 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_937 + 68] = mem[_937 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _937 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _1028 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1028] = 30
                        mem[_1028 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees + arg1 < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += arg1
                        _1097 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_1097 + idx + 68] = mem[_1028 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1097 + 68] = mem[_1097 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _1097 + -mem[64] + 100
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _835 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_835] = 30
                    mem[_835 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 > 0:
                        _851 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_851 + idx + 68] = mem[_835 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_851 + 68] = mem[_851 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _851 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _936 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_936] = 30
                    mem[_936 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _991 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_991 + idx + 68] = mem[_936 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_991 + 68] = mem[_991 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _991 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1094 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1094] = 30
                    mem[_1094 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1168 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1168 + idx + 68] = mem[_1094 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1168 + 68] = mem[_1168 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1168 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    _834 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_834] = 30
                    mem[_834 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > arg1 * stor6 / 100 * 10^18:
                        _848 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_848 + idx + 68] = mem[_834 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_848 + 68] = mem[_848 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _848 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _935 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_935] = 30
                    mem[_935 + 32] = 'SafeMath: subtraction overflow'
                    if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                        _988 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_988 + idx + 68] = mem[_935 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_988 + 68] = mem[_988 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _988 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
                    _1091 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1091] = 30
                    mem[_1091 + 32] = 'SafeMath: subtraction overflow'
                    if arg1 * stor6 / 100 * 10^18 <= stor6:
                        stor6 += -1 * arg1 * stor6 / 100 * 10^18
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1165 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1165 + idx + 68] = mem[_1091 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1165 + 68] = mem[_1165 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1165 + -mem[64] + 100
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _847 = mem[64]
                mem[64] = mem[64] + 64
                mem[_847] = 30
                mem[_847 + 32] = 'SafeMath: subtraction overflow'
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 > arg1 * stor6 / 100 * 10^18:
                    _870 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_870 + idx + 68] = mem[_847 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_870 + 68] = mem[_870 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _870 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _987 = mem[64]
                mem[64] = mem[64] + 64
                mem[_987] = 30
                mem[_987 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                    _1054 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1054 + idx + 68] = mem[_987 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1054 + 68] = mem[_1054 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1054 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
                _1162 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1162] = 30
                mem[_1162 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 100 * 10^18
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1247 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1247 + idx + 68] = mem[_1162 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1247 + 68] = mem[_1247 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1247 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] <= s:
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _754 = mem[64]
                mem[64] = mem[64] + 64
                mem[_754] = 30
                mem[_754 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _758 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_758 + idx + 68] = mem[_754 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_758 + 68] = mem[_758 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _758 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _784 = mem[64]
                mem[64] = mem[64] + 64
                mem[_784] = 30
                mem[_784 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _792 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_792 + idx + 68] = mem[_784 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_792 + 68] = mem[_792 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _792 + -mem[64] + 100
            _756 = mem[64]
            mem[64] = mem[64] + 64
            mem[_756] = 26
            mem[_756 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if not 5 * arg1 / 100:
                    _836 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_836] = 30
                    mem[_836 + 32] = 'SafeMath: subtraction overflow'
                    mem[0] = msg.sender
                    mem[32] = 1
                    _944 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_944] = 30
                    mem[_944 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _1000 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_1000 + idx + 68] = mem[_944 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1000 + 68] = mem[_1000 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _1000 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1100 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1100] = 30
                    mem[_1100 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1178 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1178 + idx + 68] = mem[_1100 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1178 + 68] = mem[_1178 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1178 + -mem[64] + 100
                require 5 * arg1 / 100
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _855 = mem[64]
                mem[64] = mem[64] + 64
                mem[_855] = 30
                mem[_855 + 32] = 'SafeMath: subtraction overflow'
                if 5 * arg1 / 100 * stor6 / 100 * 10^18 > 0:
                    _880 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_880 + idx + 68] = mem[_855 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_880 + 68] = mem[_880 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _880 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _999 = mem[64]
                mem[64] = mem[64] + 64
                mem[_999] = 30
                mem[_999 + 32] = 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    _1066 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1066 + idx + 68] = mem[_999 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1066 + 68] = mem[_1066 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1066 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _1175 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1175] = 30
                mem[_1175 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= stor6:
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1261 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1261 + idx + 68] = mem[_1175 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1261 + 68] = mem[_1261 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1261 + -mem[64] + 100
            require arg1
            if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 5 * arg1 / 100:
                _854 = mem[64]
                mem[64] = mem[64] + 64
                mem[_854] = 30
                mem[_854 + 32] = 'SafeMath: subtraction overflow'
                if 0 > arg1 * stor6 / 100 * 10^18:
                    _877 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_877 + idx + 68] = mem[_854 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_877 + 68] = mem[_877 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _877 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _998 = mem[64]
                mem[64] = mem[64] + 64
                mem[_998] = 30
                mem[_998 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                    _1063 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1063 + idx + 68] = mem[_998 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1063 + 68] = mem[_1063 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1063 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
                _1172 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1172] = 30
                mem[_1172 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 100 * 10^18
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1258 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1258 + idx + 68] = mem[_1172 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1258 + 68] = mem[_1258 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1258 + -mem[64] + 100
            require 5 * arg1 / 100
            if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _876 = mem[64]
            mem[64] = mem[64] + 64
            mem[_876] = 30
            mem[_876 + 32] = 'SafeMath: subtraction overflow'
            if 5 * arg1 / 100 * stor6 / 100 * 10^18 > arg1 * stor6 / 100 * 10^18:
                _917 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_917 + idx + 68] = mem[_876 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_917 + 68] = mem[_917 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _917 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            _1062 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1062] = 30
            mem[_1062 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                _1134 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1134 + idx + 68] = mem[_1062 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1134 + 68] = mem[_1134 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1134 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
            _1255 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1255] = 30
            mem[_1255 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 100 * 10^18 <= stor6:
                stor6 += -1 * arg1 * stor6 / 100 * 10^18
                if totalFees + arg1 < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += arg1
            _1333 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1333 + idx + 68] = mem[_1255 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1333 + 68] = mem[_1333 + 70 len 30]
            revert with memory
              from mem[64]
               len _1333 + -mem[64] + 100
        _732 = mem[64]
        mem[64] = mem[64] + 64
        mem[_732] = 26
        mem[_732 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 100 * 10^18:
            _765 = mem[64]
            mem[64] = mem[64] + 64
            mem[_765] = 26
            mem[_765 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 5 * arg1 / 100:
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * stor6 / 100 * 10^18 / arg1 != stor6 / 100 * 10^18:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    if 0 > arg1 * stor6 / 100 * 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 / 5 * arg1 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 5 * arg1 / 100 * stor6 / 100 * 10^18 > arg1 * stor6 / 100 * 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 100 * 10^18
                if arg1 * stor6 / 100 * 10^18 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * stor6 / 100 * 10^18
        else:
            _764 = mem[64]
            mem[64] = mem[64] + 64
            mem[_764] = 26
            mem[_764 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                if 5 * arg1 / 100:
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * t / s / 5 * arg1 / 100 != t / s:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 5 * arg1 / 100 * t / s > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * t / s / arg1 != t / s:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 5 * arg1 / 100:
                    if 0 > arg1 * t / s:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    require 5 * arg1 / 100
                    if 5 * arg1 / 100 * t / s / 5 * arg1 / 100 != t / s:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 5 * arg1 / 100 * t / s > arg1 * t / s:
                        revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * t / s > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * t / s
                if arg1 * t / s > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * t / s
    if totalFees + arg1 < totalFees:
        revert with 0, 'SafeMath: addition overflow'
    totalFees += arg1
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x6f45524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg2 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    41,
                    0x655472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a6572,
                    mem[205 len 23]
    if not stor4[address(msg.sender)]:
        if stor4[address(msg.sender)]:
            if stor4[address(msg.sender)]:
                mem[0] = msg.sender
                mem[32] = 4
                if not stor4[address(msg.sender)]:
                    if not arg2:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 100 * 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32176 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32176] = 26
                                mem[_32176 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34654 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34654] = 30
                                    mem[_34654 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36582 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36582] = 30
                                    mem[_36582 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _37921 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37921 + idx + 68] = mem[_36582 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37921 + 68] = mem[_37921 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37921 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _45375 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45375] = 30
                                    mem[_45375 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _47786 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_47786 + idx + 68] = mem[_45375 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_47786 + 68] = mem[_47786 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _47786 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34842 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34842] = 30
                                mem[_34842 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35193 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35193 + idx + 68] = mem[_34842 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35193 + 68] = mem[_35193 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35193 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _37920 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37920] = 30
                                mem[_37920 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _39305 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39305 + idx + 68] = mem[_37920 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39305 + 68] = mem[_39305 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39305 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _47785 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_47785] = 30
                                mem[_47785 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _49969 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49969 + idx + 68] = mem[_47785 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49969 + 68] = mem[_49969 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49969 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32360 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32360] = 30
                                mem[_32360 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32486 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32486 + idx + 68] = mem[_32360 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32486 + 68] = mem[_32486 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32486 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33291 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33291] = 30
                                mem[_33291 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33482 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33482 + idx + 68] = mem[_33291 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33482 + 68] = mem[_33482 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33482 + -mem[64] + 100
                            _32422 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32422] = 26
                            mem[_32422 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34843 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34843] = 30
                                mem[_34843 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _37926 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37926] = 30
                                mem[_37926 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39312 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39312 + idx + 68] = mem[_37926 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39312 + 68] = mem[_39312 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39312 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _47790 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_47790] = 30
                                mem[_47790 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _49974 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49974 + idx + 68] = mem[_47790 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49974 + 68] = mem[_49974 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49974 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35196 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35196] = 30
                            mem[_35196 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                _35852 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35852 + idx + 68] = mem[_35196 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35852 + 68] = mem[_35852 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35852 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39311 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39311] = 30
                            mem[_39311 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _41293 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41293 + idx + 68] = mem[_39311 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41293 + 68] = mem[_41293 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41293 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            _49973 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49973] = 30
                            mem[_49973 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _51894 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_51894 + idx + 68] = mem[_49973 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_51894 + 68] = mem[_51894 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _51894 + -mem[64] + 100
                        _31682 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31682] = 26
                        mem[_31682 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 100 * 10^18:
                            _32672 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32672] = 26
                            mem[_32672 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                        else:
                            _32671 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32671] = 26
                            mem[_32671 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        require arg2
                        if 5 * arg2 / arg2 != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 100 * 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32173 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32173] = 26
                                mem[_32173 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34653 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34653] = 30
                                        mem[_34653 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36579 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36579] = 30
                                        mem[_36579 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37912 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37912 + idx + 68] = mem[_36579 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37912 + 68] = mem[_37912 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37912 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45364 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45364] = 30
                                        mem[_45364 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _47771 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47771 + idx + 68] = mem[_45364 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47771 + 68] = mem[_47771 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47771 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34840 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34840] = 30
                                    mem[_34840 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _35186 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35186 + idx + 68] = mem[_34840 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35186 + 68] = mem[_35186 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35186 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37911 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37911] = 30
                                    mem[_37911 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39286 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39286 + idx + 68] = mem[_37911 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39286 + 68] = mem[_39286 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39286 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _47770 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47770] = 30
                                    mem[_47770 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _49955 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49955 + idx + 68] = mem[_47770 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49955 + 68] = mem[_49955 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49955 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _34839 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34839] = 30
                                    mem[_34839 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35183 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35183 + idx + 68] = mem[_34839 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35183 + 68] = mem[_35183 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35183 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37910 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37910] = 30
                                    mem[_37910 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39283 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39283 + idx + 68] = mem[_37910 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39283 + 68] = mem[_39283 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39283 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _47769 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47769] = 30
                                    mem[_47769 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _49952 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49952 + idx + 68] = mem[_47769 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49952 + 68] = mem[_49952 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49952 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35182 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35182] = 30
                                mem[_35182 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _35835 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35835 + idx + 68] = mem[_35182 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35835 + 68] = mem[_35835 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35835 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39282 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39282] = 30
                                mem[_39282 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41257 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41257 + idx + 68] = mem[_39282 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41257 + 68] = mem[_41257 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41257 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _49951 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49951] = 30
                                mem[_49951 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51866 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51866 + idx + 68] = mem[_49951 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51866 + 68] = mem[_51866 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51866 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32359 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32359] = 30
                                mem[_32359 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32483 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32483 + idx + 68] = mem[_32359 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32483 + 68] = mem[_32483 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32483 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33289 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33289] = 30
                                mem[_33289 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33477 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33477 + idx + 68] = mem[_33289 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33477 + 68] = mem[_33477 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33477 + -mem[64] + 100
                            _32421 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32421] = 26
                            mem[_32421 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    _34841 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34841] = 30
                                    mem[_34841 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37919 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37919] = 30
                                    mem[_37919 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39296 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39296 + idx + 68] = mem[_37919 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39296 + 68] = mem[_39296 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39296 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47778 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47778] = 30
                                    mem[_47778 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _49962 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49962 + idx + 68] = mem[_47778 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49962 + 68] = mem[_49962 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49962 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35190 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35190] = 30
                                mem[_35190 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                    _35845 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35845 + idx + 68] = mem[_35190 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35845 + 68] = mem[_35845 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35845 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39295 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39295] = 30
                                mem[_39295 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41273 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41273 + idx + 68] = mem[_39295 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41273 + 68] = mem[_41273 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41273 + -mem[64] + 100
                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                _49961 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49961] = 30
                                mem[_49961 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51878 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51878 + idx + 68] = mem[_49961 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51878 + 68] = mem[_51878 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51878 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 5 * arg2 / 100:
                                _35189 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35189] = 30
                                mem[_35189 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35842 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35842 + idx + 68] = mem[_35189 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35842 + 68] = mem[_35842 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35842 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39294 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39294] = 30
                                mem[_39294 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41270 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41270 + idx + 68] = mem[_39294 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41270 + 68] = mem[_41270 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41270 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _49960 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49960] = 30
                                mem[_49960 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51875 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51875 + idx + 68] = mem[_49960 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51875 + 68] = mem[_51875 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51875 + -mem[64] + 100
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35841 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35841] = 30
                            mem[_35841 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                _36842 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36842 + idx + 68] = mem[_35841 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36842 + 68] = mem[_36842 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36842 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41269 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41269] = 30
                            mem[_41269 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _43553 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43553 + idx + 68] = mem[_41269 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43553 + 68] = mem[_43553 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43553 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                            _51874 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51874] = 30
                            mem[_51874 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _53887 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53887 + idx + 68] = mem[_51874 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53887 + 68] = mem[_53887 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53887 + -mem[64] + 100
                        _31677 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31677] = 26
                        mem[_31677 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 100 * 10^18:
                            _32670 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32670] = 26
                            mem[_32670 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                        else:
                            _32669 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32669] = 26
                            mem[_32669 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                    if 5 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                    if 5 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                        if totalFees + (5 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 5 * arg2 / 100
                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32182 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32182] = 26
                                    mem[_32182 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34656 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34656] = 30
                                        mem[_34656 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36590 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36590] = 30
                                        mem[_36590 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37940 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37940 + idx + 68] = mem[_36590 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37940 + 68] = mem[_37940 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37940 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45398 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45398] = 30
                                        mem[_45398 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _47819 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47819 + idx + 68] = mem[_45398 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47819 + 68] = mem[_47819 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47819 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34847 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34847] = 30
                                    mem[_34847 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35210 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35210 + idx + 68] = mem[_34847 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35210 + 68] = mem[_35210 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35210 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37939 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37939] = 30
                                    mem[_37939 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39348 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39348 + idx + 68] = mem[_37939 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39348 + 68] = mem[_39348 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39348 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _47818 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47818] = 30
                                    mem[_47818 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50005 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50005 + idx + 68] = mem[_47818 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50005 + 68] = mem[_50005 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50005 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32362 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32362] = 30
                                    mem[_32362 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32492 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32492 + idx + 68] = mem[_32362 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32492 + 68] = mem[_32492 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32492 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33295 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33295] = 30
                                    mem[_33295 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33492 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33492 + idx + 68] = mem[_33295 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33492 + 68] = mem[_33492 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33492 + -mem[64] + 100
                                _32424 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32424] = 26
                                mem[_32424 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34848 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34848] = 30
                                    mem[_34848 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37945 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37945] = 30
                                    mem[_37945 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39355 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39355 + idx + 68] = mem[_37945 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39355 + 68] = mem[_39355 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39355 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47823 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47823] = 30
                                    mem[_47823 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50010 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50010 + idx + 68] = mem[_47823 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50010 + 68] = mem[_50010 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50010 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35213 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35213] = 30
                                mem[_35213 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35876 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35876 + idx + 68] = mem[_35213 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35876 + 68] = mem[_35876 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35876 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39354 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39354] = 30
                                mem[_39354 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41349 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41349 + idx + 68] = mem[_39354 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41349 + 68] = mem[_41349 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41349 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50009 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50009] = 30
                                mem[_50009 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _51938 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51938 + idx + 68] = mem[_50009 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51938 + 68] = mem[_51938 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51938 + -mem[64] + 100
                            _31692 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31692] = 26
                            mem[_31692 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32676 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32676] = 26
                                mem[_32676 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32675 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32675] = 26
                                mem[_32675 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32179 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32179] = 26
                                    mem[_32179 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34655 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34655] = 30
                                            mem[_34655 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36587 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36587] = 30
                                            mem[_36587 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37931 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37931 + idx + 68] = mem[_36587 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37931 + 68] = mem[_37931 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37931 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45387 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45387] = 30
                                            mem[_45387 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _47804 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47804 + idx + 68] = mem[_45387 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47804 + 68] = mem[_47804 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47804 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34845 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34845] = 30
                                        mem[_34845 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35203 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35203 + idx + 68] = mem[_34845 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35203 + 68] = mem[_35203 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35203 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37930 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37930] = 30
                                        mem[_37930 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39329 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39329 + idx + 68] = mem[_37930 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39329 + 68] = mem[_39329 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39329 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _47803 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47803] = 30
                                        mem[_47803 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _49991 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49991 + idx + 68] = mem[_47803 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49991 + 68] = mem[_49991 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49991 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34844 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34844] = 30
                                        mem[_34844 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35200 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35200 + idx + 68] = mem[_34844 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35200 + 68] = mem[_35200 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35200 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37929 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37929] = 30
                                        mem[_37929 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39326 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39326 + idx + 68] = mem[_37929 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39326 + 68] = mem[_39326 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39326 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _47802 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47802] = 30
                                        mem[_47802 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _49988 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49988 + idx + 68] = mem[_47802 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49988 + 68] = mem[_49988 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49988 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35199 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35199] = 30
                                    mem[_35199 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _35859 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35859 + idx + 68] = mem[_35199 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35859 + 68] = mem[_35859 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35859 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39325 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39325] = 30
                                    mem[_39325 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41313 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41313 + idx + 68] = mem[_39325 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41313 + 68] = mem[_41313 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41313 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _49987 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49987] = 30
                                    mem[_49987 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51910 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51910 + idx + 68] = mem[_49987 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51910 + 68] = mem[_51910 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51910 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32361 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32361] = 30
                                    mem[_32361 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32489 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32489 + idx + 68] = mem[_32361 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32489 + 68] = mem[_32489 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32489 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33293 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33293] = 30
                                    mem[_33293 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33487 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33487 + idx + 68] = mem[_33293 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33487 + 68] = mem[_33487 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33487 + -mem[64] + 100
                                _32423 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32423] = 26
                                mem[_32423 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34846 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34846] = 30
                                        mem[_34846 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37938 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37938] = 30
                                        mem[_37938 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39339 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39339 + idx + 68] = mem[_37938 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39339 + 68] = mem[_39339 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39339 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47811 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47811] = 30
                                        mem[_47811 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _49998 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49998 + idx + 68] = mem[_47811 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49998 + 68] = mem[_49998 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49998 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35207 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35207] = 30
                                    mem[_35207 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _35869 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35869 + idx + 68] = mem[_35207 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35869 + 68] = mem[_35869 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35869 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39338 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39338] = 30
                                    mem[_39338 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41329 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41329 + idx + 68] = mem[_39338 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41329 + 68] = mem[_41329 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41329 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _49997 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49997] = 30
                                    mem[_49997 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51922 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51922 + idx + 68] = mem[_49997 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51922 + 68] = mem[_51922 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51922 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35206 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35206] = 30
                                    mem[_35206 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35866 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35866 + idx + 68] = mem[_35206 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35866 + 68] = mem[_35866 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35866 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39337 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39337] = 30
                                    mem[_39337 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41326 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41326 + idx + 68] = mem[_39337 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41326 + 68] = mem[_41326 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41326 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _49996 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49996] = 30
                                    mem[_49996 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51919 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51919 + idx + 68] = mem[_49996 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51919 + 68] = mem[_51919 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51919 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35865 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35865] = 30
                                mem[_35865 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _36877 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36877 + idx + 68] = mem[_35865 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36877 + 68] = mem[_36877 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36877 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41325 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41325] = 30
                                mem[_41325 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _43615 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43615 + idx + 68] = mem[_41325 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43615 + 68] = mem[_43615 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43615 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _51918 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51918] = 30
                                mem[_51918 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53937 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53937 + idx + 68] = mem[_51918 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53937 + 68] = mem[_53937 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53937 + -mem[64] + 100
                            _31687 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31687] = 26
                            mem[_31687 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32674 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32674] = 26
                                mem[_32674 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32673 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32673] = 26
                                mem[_32673 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32188 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32188] = 26
                                    mem[_32188 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34658 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34658] = 30
                                        mem[_34658 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _36598 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36598] = 30
                                        mem[_36598 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _37959 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37959 + idx + 68] = mem[_36598 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37959 + 68] = mem[_37959 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37959 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40664 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40664] = 30
                                        mem[_40664 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42994 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42994 + idx + 68] = mem[_40664 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42994 + 68] = mem[_42994 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42994 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _53994 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53994] = 30
                                        mem[_53994 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _56007 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_56007 + idx + 68] = mem[_53994 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_56007 + 68] = mem[_56007 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _56007 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34852 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34852] = 30
                                    mem[_34852 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35227 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35227 + idx + 68] = mem[_34852 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35227 + 68] = mem[_35227 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35227 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _37958 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37958] = 30
                                    mem[_37958 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _39391 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39391 + idx + 68] = mem[_37958 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39391 + 68] = mem[_39391 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39391 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42991 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42991] = 30
                                    mem[_42991 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _45435 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45435 + idx + 68] = mem[_42991 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45435 + 68] = mem[_45435 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45435 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _56006 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_56006] = 30
                                    mem[_56006 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _57733 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_57733 + idx + 68] = mem[_56006 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_57733 + 68] = mem[_57733 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _57733 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32364 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32364] = 30
                                    mem[_32364 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32498 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32498 + idx + 68] = mem[_32364 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32498 + 68] = mem[_32498 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32498 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33299 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33299] = 30
                                    mem[_33299 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33502 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33502 + idx + 68] = mem[_33299 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33502 + 68] = mem[_33502 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33502 + -mem[64] + 100
                                _32426 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32426] = 26
                                mem[_32426 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34853 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34853] = 30
                                    mem[_34853 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _37964 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37964] = 30
                                    mem[_37964 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _39398 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39398 + idx + 68] = mem[_37964 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39398 + 68] = mem[_39398 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39398 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42997 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42997] = 30
                                    mem[_42997 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _45444 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45444 + idx + 68] = mem[_42997 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45444 + 68] = mem[_45444 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45444 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _56011 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_56011] = 30
                                    mem[_56011 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _57738 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_57738 + idx + 68] = mem[_56011 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_57738 + 68] = mem[_57738 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _57738 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35230 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35230] = 30
                                mem[_35230 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35900 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35900 + idx + 68] = mem[_35230 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35900 + 68] = mem[_35900 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35900 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 2
                                _39397 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39397] = 30
                                mem[_39397 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _41401 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41401 + idx + 68] = mem[_39397 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41401 + 68] = mem[_41401 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41401 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                mem[0] = msg.sender
                                mem[32] = 1
                                _45441 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_45441] = 30
                                mem[_45441 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _47884 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_47884 + idx + 68] = mem[_45441 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_47884 + 68] = mem[_47884 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _47884 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _57737 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_57737] = 30
                                mem[_57737 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _59077 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_59077 + idx + 68] = mem[_57737 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_59077 + 68] = mem[_59077 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _59077 + -mem[64] + 100
                            _31702 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31702] = 26
                            mem[_31702 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32680 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32680] = 26
                                mem[_32680 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32679 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32679] = 26
                                mem[_32679 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32185 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32185] = 26
                                    mem[_32185 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34657 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34657] = 30
                                            mem[_34657 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _36595 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36595] = 30
                                            mem[_36595 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _37950 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37950 + idx + 68] = mem[_36595 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37950 + 68] = mem[_37950 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37950 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40655 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40655] = 30
                                            mem[_40655 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42985 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42985 + idx + 68] = mem[_40655 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42985 + 68] = mem[_42985 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42985 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _53982 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53982] = 30
                                            mem[_53982 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _55998 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_55998 + idx + 68] = mem[_53982 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_55998 + 68] = mem[_55998 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _55998 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34850 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34850] = 30
                                        mem[_34850 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35220 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35220 + idx + 68] = mem[_34850 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35220 + 68] = mem[_35220 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35220 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _37949 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37949] = 30
                                        mem[_37949 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39372 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39372 + idx + 68] = mem[_37949 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39372 + 68] = mem[_39372 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39372 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42982] = 30
                                        mem[_42982 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _45414 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45414 + idx + 68] = mem[_42982 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45414 + 68] = mem[_45414 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45414 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _55997 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55997] = 30
                                        mem[_55997 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _57719 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57719 + idx + 68] = mem[_55997 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57719 + 68] = mem[_57719 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57719 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34849 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34849] = 30
                                        mem[_34849 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35217 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35217 + idx + 68] = mem[_34849 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35217 + 68] = mem[_35217 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35217 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _37948 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37948] = 30
                                        mem[_37948 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39369 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39369 + idx + 68] = mem[_37948 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39369 + 68] = mem[_39369 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39369 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42979 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42979] = 30
                                        mem[_42979 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _45411 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45411 + idx + 68] = mem[_42979 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45411 + 68] = mem[_45411 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45411 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _55996 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55996] = 30
                                        mem[_55996 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _57716 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57716 + idx + 68] = mem[_55996 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57716 + 68] = mem[_57716 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57716 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35216 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35216] = 30
                                    mem[_35216 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _35883 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35883 + idx + 68] = mem[_35216 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35883 + 68] = mem[_35883 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35883 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39368 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39368] = 30
                                    mem[_39368 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _41369 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41369 + idx + 68] = mem[_39368 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41369 + 68] = mem[_41369 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41369 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45408 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45408] = 30
                                    mem[_45408 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _47842 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47842 + idx + 68] = mem[_45408 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47842 + 68] = mem[_47842 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47842 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _57715 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57715] = 30
                                    mem[_57715 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _59049 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59049 + idx + 68] = mem[_57715 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59049 + 68] = mem[_59049 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59049 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32363 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32363] = 30
                                    mem[_32363 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32495 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32495 + idx + 68] = mem[_32363 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32495 + 68] = mem[_32495 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32495 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33297 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33297] = 30
                                    mem[_33297 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33497 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33497 + idx + 68] = mem[_33297 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33497 + 68] = mem[_33497 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33497 + -mem[64] + 100
                                _32425 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32425] = 26
                                mem[_32425 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34851 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34851] = 30
                                        mem[_34851 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _37957 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37957] = 30
                                        mem[_37957 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39382 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39382 + idx + 68] = mem[_37957 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39382 + 68] = mem[_39382 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39382 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42988 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42988] = 30
                                        mem[_42988 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _45426 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45426 + idx + 68] = mem[_42988 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45426 + 68] = mem[_45426 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45426 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _56003 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56003] = 30
                                        mem[_56003 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _57726 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57726 + idx + 68] = mem[_56003 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57726 + 68] = mem[_57726 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57726 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35224 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35224] = 30
                                    mem[_35224 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _35893 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35893 + idx + 68] = mem[_35224 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35893 + 68] = mem[_35893 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35893 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39381 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39381] = 30
                                    mem[_39381 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _41383 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41383 + idx + 68] = mem[_39381 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41383 + 68] = mem[_41383 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41383 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45423 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45423] = 30
                                    mem[_45423 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _47860 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47860 + idx + 68] = mem[_45423 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47860 + 68] = mem[_47860 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47860 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _57725 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57725] = 30
                                    mem[_57725 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _59061 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59061 + idx + 68] = mem[_57725 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59061 + 68] = mem[_59061 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59061 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35223 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35223] = 30
                                    mem[_35223 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35890 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35890 + idx + 68] = mem[_35223 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35890 + 68] = mem[_35890 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35890 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39380 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39380] = 30
                                    mem[_39380 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _41380 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41380 + idx + 68] = mem[_39380 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41380 + 68] = mem[_41380 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41380 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45420 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45420] = 30
                                    mem[_45420 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _47857 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47857 + idx + 68] = mem[_45420 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47857 + 68] = mem[_47857 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47857 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _57724 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57724] = 30
                                    mem[_57724 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _59058 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59058 + idx + 68] = mem[_57724 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59058 + 68] = mem[_59058 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59058 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35889 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35889] = 30
                                mem[_35889 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _36912 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36912 + idx + 68] = mem[_35889 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36912 + 68] = mem[_36912 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36912 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 2
                                _41379 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41379] = 30
                                mem[_41379 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _43673 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43673 + idx + 68] = mem[_41379 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43673 + 68] = mem[_43673 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43673 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                mem[0] = msg.sender
                                mem[32] = 1
                                _47854 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_47854] = 30
                                mem[_47854 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _50046 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50046 + idx + 68] = mem[_47854 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50046 + 68] = mem[_50046 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50046 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _59057 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_59057] = 30
                                mem[_59057 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _60111 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_60111 + idx + 68] = mem[_59057 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_60111 + 68] = mem[_60111 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _60111 + -mem[64] + 100
                            _31697 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31697] = 26
                            mem[_31697 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32678 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32678] = 26
                                mem[_32678 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32677 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32677] = 26
                                mem[_32677 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
            else:
                mem[0] = arg1
                mem[32] = 4
                if not stor4[address(arg1)]:
                    if not arg2:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 100 * 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32212 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32212] = 26
                                mem[_32212 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34666 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34666] = 30
                                    mem[_34666 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36630 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36630] = 30
                                    mem[_36630 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _38035 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38035 + idx + 68] = mem[_36630 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38035 + 68] = mem[_38035 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38035 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _45557 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45557] = 30
                                    mem[_45557 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _48050 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_48050 + idx + 68] = mem[_45557 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_48050 + 68] = mem[_48050 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _48050 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34872 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34872] = 30
                                mem[_34872 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35295 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35295 + idx + 68] = mem[_34872 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35295 + 68] = mem[_35295 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35295 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38034 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38034] = 30
                                mem[_38034 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _39563 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39563 + idx + 68] = mem[_38034 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39563 + 68] = mem[_39563 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39563 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _48049 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_48049] = 30
                                mem[_48049 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _50245 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_50245 + idx + 68] = mem[_48049 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_50245 + 68] = mem[_50245 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _50245 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32372 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32372] = 30
                                mem[_32372 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32522 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32522 + idx + 68] = mem[_32372 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32522 + 68] = mem[_32522 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32522 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33315 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33315] = 30
                                mem[_33315 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33542 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33542 + idx + 68] = mem[_33315 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33542 + 68] = mem[_33542 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33542 + -mem[64] + 100
                            _32434 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32434] = 26
                            mem[_32434 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34873 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34873] = 30
                                mem[_34873 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38040 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38040] = 30
                                mem[_38040 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39570 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39570 + idx + 68] = mem[_38040 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39570 + 68] = mem[_39570 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39570 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _48054 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_48054] = 30
                                mem[_48054 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _50250 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_50250 + idx + 68] = mem[_48054 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_50250 + 68] = mem[_50250 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _50250 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35298 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35298] = 30
                            mem[_35298 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                _35996 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35996 + idx + 68] = mem[_35298 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35996 + 68] = mem[_35996 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35996 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39569 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39569] = 30
                            mem[_39569 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _41621 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41621 + idx + 68] = mem[_39569 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41621 + 68] = mem[_41621 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41621 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            _50249 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_50249] = 30
                            mem[_50249 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _52176 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_52176 + idx + 68] = mem[_50249 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_52176 + 68] = mem[_52176 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _52176 + -mem[64] + 100
                        _31742 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31742] = 26
                        mem[_31742 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 100 * 10^18:
                            _32696 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32696] = 26
                            mem[_32696 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                        else:
                            _32695 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32695] = 26
                            mem[_32695 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        require arg2
                        if 5 * arg2 / arg2 != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 100 * 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32209 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32209] = 26
                                mem[_32209 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34665 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34665] = 30
                                        mem[_34665 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36627 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36627] = 30
                                        mem[_36627 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38026 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38026 + idx + 68] = mem[_36627 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38026 + 68] = mem[_38026 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38026 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45546 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45546] = 30
                                        mem[_45546 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _48035 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48035 + idx + 68] = mem[_45546 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48035 + 68] = mem[_48035 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48035 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34870 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34870] = 30
                                    mem[_34870 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _35288 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35288 + idx + 68] = mem[_34870 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35288 + 68] = mem[_35288 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35288 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38025 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38025] = 30
                                    mem[_38025 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39544 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39544 + idx + 68] = mem[_38025 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39544 + 68] = mem[_39544 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39544 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _48034 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48034] = 30
                                    mem[_48034 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _50231 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50231 + idx + 68] = mem[_48034 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50231 + 68] = mem[_50231 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50231 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _34869 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34869] = 30
                                    mem[_34869 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35285 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35285 + idx + 68] = mem[_34869 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35285 + 68] = mem[_35285 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35285 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38024 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38024] = 30
                                    mem[_38024 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39541 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39541 + idx + 68] = mem[_38024 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39541 + 68] = mem[_39541 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39541 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _48033 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48033] = 30
                                    mem[_48033 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _50228 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50228 + idx + 68] = mem[_48033 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50228 + 68] = mem[_50228 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50228 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35284 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35284] = 30
                                mem[_35284 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _35979 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35979 + idx + 68] = mem[_35284 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35979 + 68] = mem[_35979 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35979 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39540 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39540] = 30
                                mem[_39540 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41585 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41585 + idx + 68] = mem[_39540 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41585 + 68] = mem[_41585 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41585 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _50227 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50227] = 30
                                mem[_50227 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _52148 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52148 + idx + 68] = mem[_50227 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52148 + 68] = mem[_52148 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52148 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32371 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32371] = 30
                                mem[_32371 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32519 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32519 + idx + 68] = mem[_32371 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32519 + 68] = mem[_32519 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32519 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33313 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33313] = 30
                                mem[_33313 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33537 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33537 + idx + 68] = mem[_33313 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33537 + 68] = mem[_33537 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33537 + -mem[64] + 100
                            _32433 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32433] = 26
                            mem[_32433 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    _34871 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34871] = 30
                                    mem[_34871 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38033 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38033] = 30
                                    mem[_38033 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39554 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39554 + idx + 68] = mem[_38033 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39554 + 68] = mem[_39554 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39554 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48042 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48042] = 30
                                    mem[_48042 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _50238 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50238 + idx + 68] = mem[_48042 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50238 + 68] = mem[_50238 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50238 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35292 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35292] = 30
                                mem[_35292 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                    _35989 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35989 + idx + 68] = mem[_35292 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35989 + 68] = mem[_35989 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35989 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39553 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39553] = 30
                                mem[_39553 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41601 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41601 + idx + 68] = mem[_39553 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41601 + 68] = mem[_41601 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41601 + -mem[64] + 100
                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                _50237 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50237] = 30
                                mem[_50237 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _52160 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52160 + idx + 68] = mem[_50237 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52160 + 68] = mem[_52160 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52160 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 5 * arg2 / 100:
                                _35291 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35291] = 30
                                mem[_35291 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35986 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35986 + idx + 68] = mem[_35291 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35986 + 68] = mem[_35986 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35986 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39552 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39552] = 30
                                mem[_39552 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41598 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41598 + idx + 68] = mem[_39552 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41598 + 68] = mem[_41598 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41598 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50236 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50236] = 30
                                mem[_50236 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _52157 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52157 + idx + 68] = mem[_50236 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52157 + 68] = mem[_52157 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52157 + -mem[64] + 100
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35985 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35985] = 30
                            mem[_35985 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                _37052 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37052 + idx + 68] = mem[_35985 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37052 + 68] = mem[_37052 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37052 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41597 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41597] = 30
                            mem[_41597 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _43905 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43905 + idx + 68] = mem[_41597 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43905 + 68] = mem[_43905 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43905 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                            _52156 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_52156] = 30
                            mem[_52156 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _54155 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_54155 + idx + 68] = mem[_52156 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_54155 + 68] = mem[_54155 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _54155 + -mem[64] + 100
                        _31737 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31737] = 26
                        mem[_31737 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 100 * 10^18:
                            _32694 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32694] = 26
                            mem[_32694 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                        else:
                            _32693 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32693] = 26
                            mem[_32693 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                    if 5 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                    if 5 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                        if totalFees + (5 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 5 * arg2 / 100
                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32194 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32194] = 26
                                    mem[_32194 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34660 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34660] = 30
                                        mem[_34660 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36606 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36606] = 30
                                        mem[_36606 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37978 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37978 + idx + 68] = mem[_36606 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37978 + 68] = mem[_37978 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37978 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45466 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45466] = 30
                                        mem[_45466 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _47918 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47918 + idx + 68] = mem[_45466 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47918 + 68] = mem[_47918 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47918 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34857 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34857] = 30
                                    mem[_34857 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35244 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35244 + idx + 68] = mem[_34857 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35244 + 68] = mem[_35244 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35244 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37977 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37977] = 30
                                    mem[_37977 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39434 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39434 + idx + 68] = mem[_37977 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39434 + 68] = mem[_39434 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39434 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _47917 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47917] = 30
                                    mem[_47917 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50107 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50107 + idx + 68] = mem[_47917 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50107 + 68] = mem[_50107 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50107 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32366 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32366] = 30
                                    mem[_32366 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32504 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32504 + idx + 68] = mem[_32366 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32504 + 68] = mem[_32504 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32504 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33303 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33303] = 30
                                    mem[_33303 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33512 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33512 + idx + 68] = mem[_33303 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33512 + 68] = mem[_33512 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33512 + -mem[64] + 100
                                _32428 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32428] = 26
                                mem[_32428 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34858 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34858] = 30
                                    mem[_34858 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37983 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37983] = 30
                                    mem[_37983 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39441 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39441 + idx + 68] = mem[_37983 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39441 + 68] = mem[_39441 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39441 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47922 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47922] = 30
                                    mem[_47922 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50112 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50112 + idx + 68] = mem[_47922 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50112 + 68] = mem[_50112 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50112 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35247 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35247] = 30
                                mem[_35247 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35924 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35924 + idx + 68] = mem[_35247 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35924 + 68] = mem[_35924 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35924 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39440 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39440] = 30
                                mem[_39440 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41457 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41457 + idx + 68] = mem[_39440 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41457 + 68] = mem[_41457 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41457 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50111 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50111] = 30
                                mem[_50111 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52035 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52035 + idx + 68] = mem[_50111 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52035 + 68] = mem[_52035 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52035 + -mem[64] + 100
                            _31712 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31712] = 26
                            mem[_31712 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32684 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32684] = 26
                                mem[_32684 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32683 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32683] = 26
                                mem[_32683 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32191 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32191] = 26
                                    mem[_32191 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34659 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34659] = 30
                                            mem[_34659 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36603 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36603] = 30
                                            mem[_36603 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37969 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37969 + idx + 68] = mem[_36603 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37969 + 68] = mem[_37969 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37969 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45455 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45455] = 30
                                            mem[_45455 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _47903 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47903 + idx + 68] = mem[_45455 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47903 + 68] = mem[_47903 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47903 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34855 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34855] = 30
                                        mem[_34855 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35237 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35237 + idx + 68] = mem[_34855 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35237 + 68] = mem[_35237 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35237 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37968 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37968] = 30
                                        mem[_37968 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39415 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39415 + idx + 68] = mem[_37968 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39415 + 68] = mem[_39415 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39415 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _47902 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47902] = 30
                                        mem[_47902 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50093 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50093 + idx + 68] = mem[_47902 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50093 + 68] = mem[_50093 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50093 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34854 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34854] = 30
                                        mem[_34854 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35234 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35234 + idx + 68] = mem[_34854 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35234 + 68] = mem[_35234 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35234 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37967 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37967] = 30
                                        mem[_37967 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39412 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39412 + idx + 68] = mem[_37967 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39412 + 68] = mem[_39412 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39412 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _47901 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47901] = 30
                                        mem[_47901 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50090 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50090 + idx + 68] = mem[_47901 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50090 + 68] = mem[_50090 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50090 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35233 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35233] = 30
                                    mem[_35233 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _35907 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35907 + idx + 68] = mem[_35233 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35907 + 68] = mem[_35907 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35907 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39411 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39411] = 30
                                    mem[_39411 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41421 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41421 + idx + 68] = mem[_39411 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41421 + 68] = mem[_41421 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41421 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _50089 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50089] = 30
                                    mem[_50089 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52007 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52007 + idx + 68] = mem[_50089 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52007 + 68] = mem[_52007 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52007 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32365 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32365] = 30
                                    mem[_32365 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32501 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32501 + idx + 68] = mem[_32365 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32501 + 68] = mem[_32501 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32501 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33301 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33301] = 30
                                    mem[_33301 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33507 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33507 + idx + 68] = mem[_33301 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33507 + 68] = mem[_33507 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33507 + -mem[64] + 100
                                _32427 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32427] = 26
                                mem[_32427 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34856 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34856] = 30
                                        mem[_34856 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37976 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37976] = 30
                                        mem[_37976 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39425 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39425 + idx + 68] = mem[_37976 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39425 + 68] = mem[_39425 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39425 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47910 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47910] = 30
                                        mem[_47910 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50100 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50100 + idx + 68] = mem[_47910 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50100 + 68] = mem[_50100 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50100 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35241 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35241] = 30
                                    mem[_35241 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _35917 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35917 + idx + 68] = mem[_35241 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35917 + 68] = mem[_35917 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35917 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39424 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39424] = 30
                                    mem[_39424 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41437 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41437 + idx + 68] = mem[_39424 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41437 + 68] = mem[_41437 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41437 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _50099 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50099] = 30
                                    mem[_50099 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52019 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52019 + idx + 68] = mem[_50099 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52019 + 68] = mem[_52019 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52019 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35240 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35240] = 30
                                    mem[_35240 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35914 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35914 + idx + 68] = mem[_35240 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35914 + 68] = mem[_35914 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35914 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39423 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39423] = 30
                                    mem[_39423 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41434 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41434 + idx + 68] = mem[_39423 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41434 + 68] = mem[_41434 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41434 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50098 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50098] = 30
                                    mem[_50098 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52016 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52016 + idx + 68] = mem[_50098 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52016 + 68] = mem[_52016 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52016 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35913 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35913] = 30
                                mem[_35913 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _36947 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36947 + idx + 68] = mem[_35913 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36947 + 68] = mem[_36947 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36947 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41433 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41433] = 30
                                mem[_41433 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _43729 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43729 + idx + 68] = mem[_41433 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43729 + 68] = mem[_43729 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43729 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _52015 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52015] = 30
                                mem[_52015 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54021 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54021 + idx + 68] = mem[_52015 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54021 + 68] = mem[_54021 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54021 + -mem[64] + 100
                            _31707 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31707] = 26
                            mem[_31707 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32682 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32682] = 26
                                mem[_32682 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32681 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32681] = 26
                                mem[_32681 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        if not stor4[address(arg1)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32200 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32200] = 26
                                        mem[_32200 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34662 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34662] = 30
                                            mem[_34662 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36614 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36614] = 30
                                            mem[_36614 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37997 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37997 + idx + 68] = mem[_36614 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37997 + 68] = mem[_37997 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37997 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45489 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45489] = 30
                                            mem[_45489 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _47951 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47951 + idx + 68] = mem[_45489 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47951 + 68] = mem[_47951 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47951 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34862 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34862] = 30
                                        mem[_34862 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35261 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35261 + idx + 68] = mem[_34862 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35261 + 68] = mem[_35261 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35261 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37996 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37996] = 30
                                        mem[_37996 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39477 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39477 + idx + 68] = mem[_37996 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39477 + 68] = mem[_39477 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39477 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _47950 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47950] = 30
                                        mem[_47950 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50143 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50143 + idx + 68] = mem[_47950 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50143 + 68] = mem[_50143 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50143 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32368 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32368] = 30
                                        mem[_32368 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32510 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32510 + idx + 68] = mem[_32368 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32510 + 68] = mem[_32510 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32510 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33307 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33307] = 30
                                        mem[_33307 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33522 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33522 + idx + 68] = mem[_33307 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33522 + 68] = mem[_33522 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33522 + -mem[64] + 100
                                    _32430 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32430] = 26
                                    mem[_32430 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34863 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34863] = 30
                                        mem[_34863 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38002 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38002] = 30
                                        mem[_38002 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39484 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39484 + idx + 68] = mem[_38002 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39484 + 68] = mem[_39484 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39484 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47955 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47955] = 30
                                        mem[_47955 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50148 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50148 + idx + 68] = mem[_47955 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50148 + 68] = mem[_50148 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50148 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35264 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35264] = 30
                                    mem[_35264 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35948 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35948 + idx + 68] = mem[_35264 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35948 + 68] = mem[_35948 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35948 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39483 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39483] = 30
                                    mem[_39483 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41513 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41513 + idx + 68] = mem[_39483 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41513 + 68] = mem[_41513 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41513 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50147 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50147] = 30
                                    mem[_50147 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52079 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52079 + idx + 68] = mem[_50147 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52079 + 68] = mem[_52079 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52079 + -mem[64] + 100
                                _31722 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31722] = 26
                                mem[_31722 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32688 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32688] = 26
                                    mem[_32688 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32687 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32687] = 26
                                    mem[_32687 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32197] = 26
                                        mem[_32197 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34661 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34661] = 30
                                                mem[_34661 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36611 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36611] = 30
                                                mem[_36611 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _37988 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37988 + idx + 68] = mem[_36611 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37988 + 68] = mem[_37988 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37988 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45478 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45478] = 30
                                                mem[_45478 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _47936 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47936 + idx + 68] = mem[_45478 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47936 + 68] = mem[_47936 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47936 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34860 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34860] = 30
                                            mem[_34860 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35254 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35254 + idx + 68] = mem[_34860 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35254 + 68] = mem[_35254 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35254 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37987 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37987] = 30
                                            mem[_37987 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39458 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39458 + idx + 68] = mem[_37987 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39458 + 68] = mem[_39458 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39458 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _47935 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47935] = 30
                                            mem[_47935 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50129 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50129 + idx + 68] = mem[_47935 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50129 + 68] = mem[_50129 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50129 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34859 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34859] = 30
                                            mem[_34859 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35251 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35251 + idx + 68] = mem[_34859 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35251 + 68] = mem[_35251 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35251 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37986 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37986] = 30
                                            mem[_37986 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _39455 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39455 + idx + 68] = mem[_37986 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39455 + 68] = mem[_39455 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39455 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _47934 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47934] = 30
                                            mem[_47934 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50126 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50126 + idx + 68] = mem[_47934 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50126 + 68] = mem[_50126 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50126 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35250 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35250] = 30
                                        mem[_35250 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _35931 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35931 + idx + 68] = mem[_35250 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35931 + 68] = mem[_35931 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35931 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39454 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39454] = 30
                                        mem[_39454 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41477 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41477 + idx + 68] = mem[_39454 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41477 + 68] = mem[_41477 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41477 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _50125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50125] = 30
                                        mem[_50125 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52051 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52051 + idx + 68] = mem[_50125 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52051 + 68] = mem[_52051 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52051 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32367 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32367] = 30
                                        mem[_32367 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32507 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32507 + idx + 68] = mem[_32367 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32507 + 68] = mem[_32507 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32507 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33305 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33305] = 30
                                        mem[_33305 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33517 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33517 + idx + 68] = mem[_33305 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33517 + 68] = mem[_33517 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33517 + -mem[64] + 100
                                    _32429 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32429] = 26
                                    mem[_32429 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34861 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34861] = 30
                                            mem[_34861 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37995 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37995] = 30
                                            mem[_37995 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39468 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39468 + idx + 68] = mem[_37995 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39468 + 68] = mem[_39468 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39468 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47943 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47943] = 30
                                            mem[_47943 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50136 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50136 + idx + 68] = mem[_47943 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50136 + 68] = mem[_50136 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50136 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35258 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35258] = 30
                                        mem[_35258 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35941 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35941 + idx + 68] = mem[_35258 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35941 + 68] = mem[_35941 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35941 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39467 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39467] = 30
                                        mem[_39467 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41493 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41493 + idx + 68] = mem[_39467 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41493 + 68] = mem[_41493 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41493 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _50135 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50135] = 30
                                        mem[_50135 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52063 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52063 + idx + 68] = mem[_50135 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52063 + 68] = mem[_52063 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52063 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35257 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35257] = 30
                                        mem[_35257 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35938 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35938 + idx + 68] = mem[_35257 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35938 + 68] = mem[_35938 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35938 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39466 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39466] = 30
                                        mem[_39466 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41490 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41490 + idx + 68] = mem[_39466 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41490 + 68] = mem[_41490 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41490 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50134 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50134] = 30
                                        mem[_50134 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52060 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52060 + idx + 68] = mem[_50134 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52060 + 68] = mem[_52060 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52060 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35937 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35937] = 30
                                    mem[_35937 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _36982 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36982 + idx + 68] = mem[_35937 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36982 + 68] = mem[_36982 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36982 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41489 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41489] = 30
                                    mem[_41489 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _43791 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43791 + idx + 68] = mem[_41489 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43791 + 68] = mem[_43791 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43791 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _52059 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52059] = 30
                                    mem[_52059 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54071 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54071 + idx + 68] = mem[_52059 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54071 + 68] = mem[_54071 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54071 + -mem[64] + 100
                                _31717 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31717] = 26
                                mem[_31717 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32686 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32686] = 26
                                    mem[_32686 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32685 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32685] = 26
                                    mem[_32685 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32206 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32206] = 26
                                        mem[_32206 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34664 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34664] = 30
                                            mem[_34664 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _36622 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36622] = 30
                                            mem[_36622 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _38016 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38016 + idx + 68] = mem[_36622 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38016 + 68] = mem[_38016 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38016 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40726 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40726] = 30
                                            mem[_40726 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _43051 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43051 + idx + 68] = mem[_40726 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43051 + 68] = mem[_43051 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43051 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _54128 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54128] = 30
                                            mem[_54128 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _56126 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_56126 + idx + 68] = mem[_54128 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_56126 + 68] = mem[_56126 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _56126 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34867 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34867] = 30
                                        mem[_34867 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35278 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35278 + idx + 68] = mem[_34867 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35278 + 68] = mem[_35278 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35278 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38015 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38015] = 30
                                        mem[_38015 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39520 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39520 + idx + 68] = mem[_38015 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39520 + 68] = mem[_39520 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39520 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43048 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43048] = 30
                                        mem[_43048 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _45526 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45526 + idx + 68] = mem[_43048 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45526 + 68] = mem[_45526 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45526 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _56125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56125] = 30
                                        mem[_56125 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57843 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57843 + idx + 68] = mem[_56125 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57843 + 68] = mem[_57843 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57843 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32370 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32370] = 30
                                        mem[_32370 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32516 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32516 + idx + 68] = mem[_32370 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32516 + 68] = mem[_32516 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32516 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33311 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33311] = 30
                                        mem[_33311 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33532 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33532 + idx + 68] = mem[_33311 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33532 + 68] = mem[_33532 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33532 + -mem[64] + 100
                                    _32432 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32432] = 26
                                    mem[_32432 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34868 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34868] = 30
                                        mem[_34868 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38021 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38021] = 30
                                        mem[_38021 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39527 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39527 + idx + 68] = mem[_38021 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39527 + 68] = mem[_39527 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39527 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43054 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43054] = 30
                                        mem[_43054 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _45535 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45535 + idx + 68] = mem[_43054 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45535 + 68] = mem[_45535 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45535 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _56130 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56130] = 30
                                        mem[_56130 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57848 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57848 + idx + 68] = mem[_56130 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57848 + 68] = mem[_57848 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57848 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35281 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35281] = 30
                                    mem[_35281 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35972 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35972 + idx + 68] = mem[_35281 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35972 + 68] = mem[_35972 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35972 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39526 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39526] = 30
                                    mem[_39526 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _41565 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41565 + idx + 68] = mem[_39526 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41565 + 68] = mem[_41565 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41565 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45532 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45532] = 30
                                    mem[_45532 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _48016 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48016 + idx + 68] = mem[_45532 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48016 + 68] = mem[_48016 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48016 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _57847 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57847] = 30
                                    mem[_57847 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _59161 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59161 + idx + 68] = mem[_57847 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59161 + 68] = mem[_59161 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59161 + -mem[64] + 100
                                _31732 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31732] = 26
                                mem[_31732 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32692 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32692] = 26
                                    mem[_32692 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32691 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32691] = 26
                                    mem[_32691 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32203 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32203] = 26
                                        mem[_32203 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34663 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34663] = 30
                                                mem[_34663 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _36619 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36619] = 30
                                                mem[_36619 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _38007 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38007 + idx + 68] = mem[_36619 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38007 + 68] = mem[_38007 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38007 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40717 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40717] = 30
                                                mem[_40717 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _43042 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_43042 + idx + 68] = mem[_40717 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_43042 + 68] = mem[_43042 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _43042 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _54116 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54116] = 30
                                                mem[_54116 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _56117 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56117 + idx + 68] = mem[_54116 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56117 + 68] = mem[_56117 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56117 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34865 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34865] = 30
                                            mem[_34865 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35271 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35271 + idx + 68] = mem[_34865 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35271 + 68] = mem[_35271 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35271 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38006 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38006] = 30
                                            mem[_38006 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39501 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39501 + idx + 68] = mem[_38006 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39501 + 68] = mem[_39501 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39501 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43039 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43039] = 30
                                            mem[_43039 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45505 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45505 + idx + 68] = mem[_43039 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45505 + 68] = mem[_45505 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45505 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _56116 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56116] = 30
                                            mem[_56116 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57829 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57829 + idx + 68] = mem[_56116 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57829 + 68] = mem[_57829 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57829 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34864 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34864] = 30
                                            mem[_34864 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35268 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35268 + idx + 68] = mem[_34864 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35268 + 68] = mem[_35268 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35268 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38005 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38005] = 30
                                            mem[_38005 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39498 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39498 + idx + 68] = mem[_38005 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39498 + 68] = mem[_39498 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39498 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43036 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43036] = 30
                                            mem[_43036 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _45502 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45502 + idx + 68] = mem[_43036 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45502 + 68] = mem[_45502 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45502 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _56115 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56115] = 30
                                            mem[_56115 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57826 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57826 + idx + 68] = mem[_56115 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57826 + 68] = mem[_57826 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57826 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35267 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35267] = 30
                                        mem[_35267 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _35955 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35955 + idx + 68] = mem[_35267 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35955 + 68] = mem[_35955 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35955 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39497 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39497] = 30
                                        mem[_39497 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41533 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41533 + idx + 68] = mem[_39497 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41533 + 68] = mem[_41533 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41533 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45499 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45499] = 30
                                        mem[_45499 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _47974 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47974 + idx + 68] = mem[_45499 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47974 + 68] = mem[_47974 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47974 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _57825 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57825] = 30
                                        mem[_57825 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59133 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59133 + idx + 68] = mem[_57825 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59133 + 68] = mem[_59133 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59133 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32369 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32369] = 30
                                        mem[_32369 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32513 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32513 + idx + 68] = mem[_32369 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32513 + 68] = mem[_32513 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32513 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33309 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33309] = 30
                                        mem[_33309 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33527 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33527 + idx + 68] = mem[_33309 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33527 + 68] = mem[_33527 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33527 + -mem[64] + 100
                                    _32431 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32431] = 26
                                    mem[_32431 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34866 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34866] = 30
                                            mem[_34866 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38014 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38014] = 30
                                            mem[_38014 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39511 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39511 + idx + 68] = mem[_38014 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39511 + 68] = mem[_39511 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39511 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43045 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43045] = 30
                                            mem[_43045 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45517 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45517 + idx + 68] = mem[_43045 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45517 + 68] = mem[_45517 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45517 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56122 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56122] = 30
                                            mem[_56122 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57836 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57836 + idx + 68] = mem[_56122 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57836 + 68] = mem[_57836 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57836 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35275 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35275] = 30
                                        mem[_35275 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35965 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35965 + idx + 68] = mem[_35275 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35965 + 68] = mem[_35965 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35965 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39510 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39510] = 30
                                        mem[_39510 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41547 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41547 + idx + 68] = mem[_39510 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41547 + 68] = mem[_41547 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41547 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45514 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45514] = 30
                                        mem[_45514 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _47992 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47992 + idx + 68] = mem[_45514 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47992 + 68] = mem[_47992 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47992 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _57835 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57835] = 30
                                        mem[_57835 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59145 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59145 + idx + 68] = mem[_57835 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59145 + 68] = mem[_59145 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59145 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35274 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35274] = 30
                                        mem[_35274 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35962 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35962 + idx + 68] = mem[_35274 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35962 + 68] = mem[_35962 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35962 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39509 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39509] = 30
                                        mem[_39509 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41544 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41544 + idx + 68] = mem[_39509 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41544 + 68] = mem[_41544 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41544 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45511 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45511] = 30
                                        mem[_45511 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _47989 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47989 + idx + 68] = mem[_45511 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47989 + 68] = mem[_47989 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47989 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _57834 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57834] = 30
                                        mem[_57834 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59142 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59142 + idx + 68] = mem[_57834 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59142 + 68] = mem[_59142 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59142 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35961 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35961] = 30
                                    mem[_35961 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37017 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37017 + idx + 68] = mem[_35961 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37017 + 68] = mem[_37017 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37017 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _41543 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41543] = 30
                                    mem[_41543 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _43849 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43849 + idx + 68] = mem[_41543 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43849 + 68] = mem[_43849 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43849 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _47986 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47986] = 30
                                    mem[_47986 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _50184 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50184 + idx + 68] = mem[_47986 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50184 + 68] = mem[_50184 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50184 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _59141 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59141] = 30
                                    mem[_59141 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _60169 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_60169 + idx + 68] = mem[_59141 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_60169 + 68] = mem[_60169 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _60169 + -mem[64] + 100
                                _31727 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31727] = 26
                                mem[_31727 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32690 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32690] = 26
                                    mem[_32690 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32689 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32689] = 26
                                    mem[_32689 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
        else:
            mem[0] = arg1
            mem[32] = 4
            if stor4[address(arg1)]:
                if not arg2:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    mem[64] = 224
                    mem[160] = 30
                    mem[192] = 'SafeMath: subtraction overflow'
                    if 0 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow'
                    idx = 0
                    s = 100 * 10^18
                    t = stor6
                    while idx < stor5.length:
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        if stor1[stor5[idx]] > t:
                            _32260 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32260] = 26
                            mem[_32260 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34682 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34682] = 30
                                mem[_34682 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _36694 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36694] = 30
                                mem[_36694 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _38187 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38187 + idx + 68] = mem[_36694 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38187 + 68] = mem[_38187 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38187 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _49502 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49502] = 30
                                mem[_49502 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _51571 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51571 + idx + 68] = mem[_49502 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51571 + 68] = mem[_51571 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51571 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _34912 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34912] = 30
                            mem[_34912 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                _35431 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35431 + idx + 68] = mem[_34912 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35431 + 68] = mem[_35431 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35431 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38186 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38186] = 30
                            mem[_38186 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _39907 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_39907 + idx + 68] = mem[_38186 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_39907 + 68] = mem[_39907 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _39907 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            _51570 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51570] = 30
                            mem[_51570 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _53529 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53529 + idx + 68] = mem[_51570 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53529 + 68] = mem[_53529 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53529 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        if stor2[stor5[idx]] <= s:
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            _32388 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32388] = 30
                            mem[_32388 + 32] = 'SafeMath: subtraction overflow'
                            if stor1[stor5[idx]] > t:
                                _32570 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_32570 + idx + 68] = mem[_32388 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_32570 + 68] = mem[_32570 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _32570 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            _33347 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33347] = 30
                            mem[_33347 + 32] = 'SafeMath: subtraction overflow'
                            if stor2[stor5[idx]] <= s:
                                idx = idx + 1
                                s = s - stor2[stor5[idx]]
                                t = t - stor1[stor5[idx]]
                                continue 
                            _33622 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_33622 + idx + 68] = mem[_33347 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_33622 + 68] = mem[_33622 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _33622 + -mem[64] + 100
                        _32450 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32450] = 26
                        mem[_32450 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _34913 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34913] = 30
                            mem[_34913 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38192 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38192] = 30
                            mem[_38192 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _39914 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_39914 + idx + 68] = mem[_38192 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_39914 + 68] = mem[_39914 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _39914 + -mem[64] + 100
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _51575 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51575] = 30
                            mem[_51575 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _53534 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53534 + idx + 68] = mem[_51575 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53534 + 68] = mem[_53534 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53534 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _35434 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35434] = 30
                        mem[_35434 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 100 * 10^18:
                            _36188 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36188 + idx + 68] = mem[_35434 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36188 + 68] = mem[_36188 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36188 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _39913 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_39913] = 30
                        mem[_39913 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                            _42061 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42061 + idx + 68] = mem[_39913 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42061 + 68] = mem[_42061 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42061 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor2[address(arg1)] += arg2
                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                        _53533 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_53533] = 30
                        mem[_53533 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            return 1
                        _55513 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_55513 + idx + 68] = mem[_53533 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_55513 + 68] = mem[_55513 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _55513 + -mem[64] + 100
                    _31822 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_31822] = 26
                    mem[_31822 + 32] = 'SafeMath: division by zero'
                    if t < stor6 / 100 * 10^18:
                        _32728 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32728] = 26
                        mem[_32728 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                    else:
                        _32727 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32727] = 26
                        mem[_32727 + 32] = 'SafeMath: division by zero'
                        if s <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require s
                        if not arg2:
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require arg2
                            if arg2 * t / s / arg2 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 0 > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * t / s
                    if 0 > stor6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if totalFees < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    require arg2
                    if 5 * arg2 / arg2 != 5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    mem[64] = 224
                    mem[160] = 30
                    mem[192] = 'SafeMath: subtraction overflow'
                    if 5 * arg2 / 100 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow'
                    idx = 0
                    s = 100 * 10^18
                    t = stor6
                    while idx < stor5.length:
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        if stor1[stor5[idx]] > t:
                            _32257 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32257] = 26
                            mem[_32257 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    _34681 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34681] = 30
                                    mem[_34681 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36691 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36691] = 30
                                    mem[_36691 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _38178 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38178 + idx + 68] = mem[_36691 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38178 + 68] = mem[_38178 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38178 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49490 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49490] = 30
                                    mem[_49490 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51562 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51562 + idx + 68] = mem[_49490 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51562 + 68] = mem[_51562 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51562 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34910 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34910] = 30
                                mem[_34910 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                    _35424 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35424 + idx + 68] = mem[_34910 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35424 + 68] = mem[_35424 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35424 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38177 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38177] = 30
                                mem[_38177 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39888 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39888 + idx + 68] = mem[_38177 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39888 + 68] = mem[_39888 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39888 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                _51561 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51561] = 30
                                mem[_51561 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53515 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53515 + idx + 68] = mem[_51561 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53515 + 68] = mem[_53515 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53515 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 5 * arg2 / 100:
                                _34909 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34909] = 30
                                mem[_34909 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35421 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35421 + idx + 68] = mem[_34909 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35421 + 68] = mem[_35421 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35421 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38176 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38176] = 30
                                mem[_38176 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _39885 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39885 + idx + 68] = mem[_38176 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39885 + 68] = mem[_39885 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39885 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _51560 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51560] = 30
                                mem[_51560 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53512 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53512 + idx + 68] = mem[_51560 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53512 + 68] = mem[_53512 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53512 + -mem[64] + 100
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35420 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35420] = 30
                            mem[_35420 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                _36171 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36171 + idx + 68] = mem[_35420 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36171 + 68] = mem[_36171 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36171 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39884 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39884] = 30
                            mem[_39884 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _42025 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42025 + idx + 68] = mem[_39884 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42025 + 68] = mem[_42025 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42025 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                            _53511 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53511] = 30
                            mem[_53511 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55485 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55485 + idx + 68] = mem[_53511 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55485 + 68] = mem[_55485 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55485 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        if stor2[stor5[idx]] <= s:
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            _32387 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32387] = 30
                            mem[_32387 + 32] = 'SafeMath: subtraction overflow'
                            if stor1[stor5[idx]] > t:
                                _32567 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_32567 + idx + 68] = mem[_32387 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_32567 + 68] = mem[_32567 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _32567 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            _33345 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33345] = 30
                            mem[_33345 + 32] = 'SafeMath: subtraction overflow'
                            if stor2[stor5[idx]] <= s:
                                idx = idx + 1
                                s = s - stor2[stor5[idx]]
                                t = t - stor1[stor5[idx]]
                                continue 
                            _33617 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_33617 + idx + 68] = mem[_33345 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_33617 + 68] = mem[_33617 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _33617 + -mem[64] + 100
                        _32449 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32449] = 26
                        mem[_32449 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 5 * arg2 / 100:
                                _34911 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34911] = 30
                                mem[_34911 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38185 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38185] = 30
                                mem[_38185 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39898 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39898 + idx + 68] = mem[_38185 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39898 + 68] = mem[_39898 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39898 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51567 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51567] = 30
                                mem[_51567 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53522 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53522 + idx + 68] = mem[_51567 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53522 + 68] = mem[_53522 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53522 + -mem[64] + 100
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35428 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35428] = 30
                            mem[_35428 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                _36181 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36181 + idx + 68] = mem[_35428 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36181 + 68] = mem[_36181 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36181 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39897 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39897] = 30
                            mem[_39897 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _42041 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42041 + idx + 68] = mem[_39897 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42041 + 68] = mem[_42041 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42041 + -mem[64] + 100
                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            _53521 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53521] = 30
                            mem[_53521 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55497 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55497 + idx + 68] = mem[_53521 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55497 + 68] = mem[_55497 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55497 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 5 * arg2 / 100:
                            _35427 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35427] = 30
                            mem[_35427 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                _36178 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36178 + idx + 68] = mem[_35427 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36178 + 68] = mem[_36178 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36178 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39896 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39896] = 30
                            mem[_39896 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _42038 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42038 + idx + 68] = mem[_39896 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42038 + 68] = mem[_42038 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42038 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            _53520 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53520] = 30
                            mem[_53520 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55494 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55494 + idx + 68] = mem[_53520 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55494 + 68] = mem[_55494 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55494 + -mem[64] + 100
                        require 5 * arg2 / 100
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _36177 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_36177] = 30
                        mem[_36177 + 32] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                            _37332 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37332 + idx + 68] = mem[_36177 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37332 + 68] = mem[_37332 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37332 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _42037 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42037] = 30
                        mem[_42037 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                            _44381 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_44381 + idx + 68] = mem[_42037 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_44381 + 68] = mem[_44381 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _44381 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                        _55493 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55493] = 30
                        mem[_55493 + 32] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57300 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57300 + idx + 68] = mem[_55493 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57300 + 68] = mem[_57300 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57300 + -mem[64] + 100
                    _31817 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_31817] = 26
                    mem[_31817 + 32] = 'SafeMath: division by zero'
                    if t < stor6 / 100 * 10^18:
                        _32726 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32726] = 26
                        mem[_32726 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 5 * arg2 / 100:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                        else:
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 5 * arg2 / 100:
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                    else:
                        _32725 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32725] = 26
                        mem[_32725 + 32] = 'SafeMath: division by zero'
                        if s <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require s
                        if not arg2:
                            if not 5 * arg2 / 100:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 5 * arg2 / 100 * t / s > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                if 5 * arg2 / 100 * t / s > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -1 * 5 * arg2 / 100 * t / s
                        else:
                            require arg2
                            if arg2 * t / s / arg2 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 5 * arg2 / 100:
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                if 5 * arg2 / 100 * t / s > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -1 * 5 * arg2 / 100 * t / s
                    if totalFees + (5 * arg2 / 100) < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += 5 * arg2 / 100
                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
            else:
                if stor4[address(msg.sender)]:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32218 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32218] = 26
                                    mem[_32218 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34668 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34668] = 30
                                        mem[_34668 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36638 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36638] = 30
                                        mem[_36638 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38054 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38054 + idx + 68] = mem[_36638 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38054 + 68] = mem[_38054 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38054 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45580 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45580] = 30
                                        mem[_45580 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48083 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48083 + idx + 68] = mem[_45580 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48083 + 68] = mem[_48083 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48083 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34877 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34877] = 30
                                    mem[_34877 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35312 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35312 + idx + 68] = mem[_34877 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35312 + 68] = mem[_35312 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35312 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38053 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38053] = 30
                                    mem[_38053 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39606 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39606 + idx + 68] = mem[_38053 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39606 + 68] = mem[_39606 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39606 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _48082 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48082] = 30
                                    mem[_48082 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50281 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50281 + idx + 68] = mem[_48082 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50281 + 68] = mem[_50281 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50281 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32374 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32374] = 30
                                    mem[_32374 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32528 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32528 + idx + 68] = mem[_32374 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32528 + 68] = mem[_32528 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32528 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33319 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33319] = 30
                                    mem[_33319 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33552 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33552 + idx + 68] = mem[_33319 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33552 + 68] = mem[_33552 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33552 + -mem[64] + 100
                                _32436 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32436] = 26
                                mem[_32436 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34878 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34878] = 30
                                    mem[_34878 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38059 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38059] = 30
                                    mem[_38059 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39613 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39613 + idx + 68] = mem[_38059 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39613 + 68] = mem[_39613 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39613 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48087 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48087] = 30
                                    mem[_48087 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50286 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50286 + idx + 68] = mem[_48087 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50286 + 68] = mem[_50286 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50286 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35315 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35315] = 30
                                mem[_35315 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _36020 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36020 + idx + 68] = mem[_35315 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36020 + 68] = mem[_36020 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36020 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39612 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39612] = 30
                                mem[_39612 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _41677 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41677 + idx + 68] = mem[_39612 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41677 + 68] = mem[_41677 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41677 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50285 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50285] = 30
                                mem[_50285 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52220 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52220 + idx + 68] = mem[_50285 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52220 + 68] = mem[_52220 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52220 + -mem[64] + 100
                            _31752 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31752] = 26
                            mem[_31752 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32700 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32700] = 26
                                mem[_32700 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32699 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32699] = 26
                                mem[_32699 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32215 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32215] = 26
                                    mem[_32215 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34667 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34667] = 30
                                            mem[_34667 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36635 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36635] = 30
                                            mem[_36635 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38045 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38045 + idx + 68] = mem[_36635 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38045 + 68] = mem[_38045 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38045 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45569 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45569] = 30
                                            mem[_45569 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48068 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48068 + idx + 68] = mem[_45569 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48068 + 68] = mem[_48068 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48068 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34875 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34875] = 30
                                        mem[_34875 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35305 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35305 + idx + 68] = mem[_34875 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35305 + 68] = mem[_35305 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35305 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38044 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38044] = 30
                                        mem[_38044 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39587 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39587 + idx + 68] = mem[_38044 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39587 + 68] = mem[_39587 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39587 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _48067 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48067] = 30
                                        mem[_48067 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50267 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50267 + idx + 68] = mem[_48067 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50267 + 68] = mem[_50267 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50267 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34874 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34874] = 30
                                        mem[_34874 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35302 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35302 + idx + 68] = mem[_34874 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35302 + 68] = mem[_35302 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35302 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38043 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38043] = 30
                                        mem[_38043 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39584 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39584 + idx + 68] = mem[_38043 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39584 + 68] = mem[_39584 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39584 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48066 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48066] = 30
                                        mem[_48066 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50264 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50264 + idx + 68] = mem[_48066 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50264 + 68] = mem[_50264 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50264 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35301 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35301] = 30
                                    mem[_35301 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _36003 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36003 + idx + 68] = mem[_35301 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36003 + 68] = mem[_36003 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36003 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39583 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39583] = 30
                                    mem[_39583 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41641 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41641 + idx + 68] = mem[_39583 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41641 + 68] = mem[_41641 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41641 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _50263 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50263] = 30
                                    mem[_50263 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52192 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52192 + idx + 68] = mem[_50263 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52192 + 68] = mem[_52192 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52192 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32373 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32373] = 30
                                    mem[_32373 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32525 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32525 + idx + 68] = mem[_32373 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32525 + 68] = mem[_32525 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32525 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33317 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33317] = 30
                                    mem[_33317 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33547 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33547 + idx + 68] = mem[_33317 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33547 + 68] = mem[_33547 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33547 + -mem[64] + 100
                                _32435 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32435] = 26
                                mem[_32435 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34876 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34876] = 30
                                        mem[_34876 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38052 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38052] = 30
                                        mem[_38052 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39597 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39597 + idx + 68] = mem[_38052 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39597 + 68] = mem[_39597 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39597 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48075 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48075] = 30
                                        mem[_48075 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50274 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50274 + idx + 68] = mem[_48075 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50274 + 68] = mem[_50274 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50274 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35309 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35309] = 30
                                    mem[_35309 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _36013 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36013 + idx + 68] = mem[_35309 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36013 + 68] = mem[_36013 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36013 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39596 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39596] = 30
                                    mem[_39596 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41657 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41657 + idx + 68] = mem[_39596 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41657 + 68] = mem[_41657 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41657 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _50273 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50273] = 30
                                    mem[_50273 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52204 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52204 + idx + 68] = mem[_50273 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52204 + 68] = mem[_52204 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52204 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35308 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35308] = 30
                                    mem[_35308 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36010 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36010 + idx + 68] = mem[_35308 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36010 + 68] = mem[_36010 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36010 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39595 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39595] = 30
                                    mem[_39595 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41654 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41654 + idx + 68] = mem[_39595 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41654 + 68] = mem[_41654 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41654 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50272 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50272] = 30
                                    mem[_50272 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52201 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52201 + idx + 68] = mem[_50272 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52201 + 68] = mem[_52201 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52201 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36009 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36009] = 30
                                mem[_36009 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _37087 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37087 + idx + 68] = mem[_36009 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37087 + 68] = mem[_37087 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37087 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41653 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41653] = 30
                                mem[_41653 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _43967 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43967 + idx + 68] = mem[_41653 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43967 + 68] = mem[_43967 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43967 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _52200 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52200] = 30
                                mem[_52200 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54205 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54205 + idx + 68] = mem[_52200 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54205 + 68] = mem[_54205 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54205 + -mem[64] + 100
                            _31747 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31747] = 26
                            mem[_31747 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32698 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32698] = 26
                                mem[_32698 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32697 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32697] = 26
                                mem[_32697 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        if not stor4[address(arg1)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32224 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32224] = 26
                                        mem[_32224 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34670 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34670] = 30
                                            mem[_34670 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36646 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36646] = 30
                                            mem[_36646 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38073 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38073 + idx + 68] = mem[_36646 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38073 + 68] = mem[_38073 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38073 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45603 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45603] = 30
                                            mem[_45603 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48116 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48116 + idx + 68] = mem[_45603 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48116 + 68] = mem[_48116 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48116 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34882 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34882] = 30
                                        mem[_34882 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35329 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35329 + idx + 68] = mem[_34882 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35329 + 68] = mem[_35329 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35329 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38072 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38072] = 30
                                        mem[_38072 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39649 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39649 + idx + 68] = mem[_38072 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39649 + 68] = mem[_39649 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39649 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48115 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48115] = 30
                                        mem[_48115 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50317 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50317 + idx + 68] = mem[_48115 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50317 + 68] = mem[_50317 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50317 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32376 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32376] = 30
                                        mem[_32376 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32534 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32534 + idx + 68] = mem[_32376 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32534 + 68] = mem[_32534 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32534 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33323 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33323] = 30
                                        mem[_33323 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33562 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33562 + idx + 68] = mem[_33323 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33562 + 68] = mem[_33562 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33562 + -mem[64] + 100
                                    _32438 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32438] = 26
                                    mem[_32438 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34883 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34883] = 30
                                        mem[_34883 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38078 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38078] = 30
                                        mem[_38078 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39656 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39656 + idx + 68] = mem[_38078 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39656 + 68] = mem[_39656 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39656 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48120 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48120] = 30
                                        mem[_48120 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50322 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50322 + idx + 68] = mem[_48120 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50322 + 68] = mem[_50322 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50322 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35332 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35332] = 30
                                    mem[_35332 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36044 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36044 + idx + 68] = mem[_35332 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36044 + 68] = mem[_36044 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36044 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39655 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39655] = 30
                                    mem[_39655 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41733 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41733 + idx + 68] = mem[_39655 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41733 + 68] = mem[_41733 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41733 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50321 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50321] = 30
                                    mem[_50321 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52264 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52264 + idx + 68] = mem[_50321 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52264 + 68] = mem[_52264 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52264 + -mem[64] + 100
                                _31762 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31762] = 26
                                mem[_31762 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32704 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32704] = 26
                                    mem[_32704 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32703 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32703] = 26
                                    mem[_32703 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32221 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32221] = 26
                                        mem[_32221 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34669 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34669] = 30
                                                mem[_34669 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36643 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36643] = 30
                                                mem[_36643 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38064 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38064 + idx + 68] = mem[_36643 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38064 + 68] = mem[_38064 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38064 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45592 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45592] = 30
                                                mem[_45592 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48101 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48101 + idx + 68] = mem[_45592 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48101 + 68] = mem[_48101 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48101 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34880 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34880] = 30
                                            mem[_34880 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35322 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35322 + idx + 68] = mem[_34880 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35322 + 68] = mem[_35322 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35322 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38063 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38063] = 30
                                            mem[_38063 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39630 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39630 + idx + 68] = mem[_38063 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39630 + 68] = mem[_39630 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39630 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _48100 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48100] = 30
                                            mem[_48100 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50303 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50303 + idx + 68] = mem[_48100 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50303 + 68] = mem[_50303 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50303 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34879 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34879] = 30
                                            mem[_34879 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35319 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35319 + idx + 68] = mem[_34879 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35319 + 68] = mem[_35319 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35319 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38062 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38062] = 30
                                            mem[_38062 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _39627 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39627 + idx + 68] = mem[_38062 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39627 + 68] = mem[_39627 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39627 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48099 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48099] = 30
                                            mem[_48099 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50300 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50300 + idx + 68] = mem[_48099 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50300 + 68] = mem[_50300 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50300 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35318 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35318] = 30
                                        mem[_35318 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36027 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36027 + idx + 68] = mem[_35318 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36027 + 68] = mem[_36027 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36027 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39626 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39626] = 30
                                        mem[_39626 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41697 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41697 + idx + 68] = mem[_39626 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41697 + 68] = mem[_41697 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41697 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _50299 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50299] = 30
                                        mem[_50299 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52236 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52236 + idx + 68] = mem[_50299 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52236 + 68] = mem[_52236 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52236 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32375 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32375] = 30
                                        mem[_32375 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32531 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32531 + idx + 68] = mem[_32375 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32531 + 68] = mem[_32531 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32531 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33321 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33321] = 30
                                        mem[_33321 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33557 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33557 + idx + 68] = mem[_33321 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33557 + 68] = mem[_33557 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33557 + -mem[64] + 100
                                    _32437 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32437] = 26
                                    mem[_32437 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34881 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34881] = 30
                                            mem[_34881 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38071 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38071] = 30
                                            mem[_38071 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39640 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39640 + idx + 68] = mem[_38071 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39640 + 68] = mem[_39640 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39640 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48108 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48108] = 30
                                            mem[_48108 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50310 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50310 + idx + 68] = mem[_48108 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50310 + 68] = mem[_50310 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50310 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35326 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35326] = 30
                                        mem[_35326 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36037 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36037 + idx + 68] = mem[_35326 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36037 + 68] = mem[_36037 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36037 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39639 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39639] = 30
                                        mem[_39639 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41713 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41713 + idx + 68] = mem[_39639 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41713 + 68] = mem[_41713 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41713 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _50309 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50309] = 30
                                        mem[_50309 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52248 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52248 + idx + 68] = mem[_50309 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52248 + 68] = mem[_52248 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52248 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35325 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35325] = 30
                                        mem[_35325 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36034 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36034 + idx + 68] = mem[_35325 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36034 + 68] = mem[_36034 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36034 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39638 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39638] = 30
                                        mem[_39638 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41710 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41710 + idx + 68] = mem[_39638 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41710 + 68] = mem[_41710 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41710 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50308 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50308] = 30
                                        mem[_50308 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52245 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52245 + idx + 68] = mem[_50308 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52245 + 68] = mem[_52245 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52245 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36033 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36033] = 30
                                    mem[_36033 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37122 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37122 + idx + 68] = mem[_36033 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37122 + 68] = mem[_37122 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37122 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41709 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41709] = 30
                                    mem[_41709 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _44029 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44029 + idx + 68] = mem[_41709 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44029 + 68] = mem[_44029 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44029 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _52244 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52244] = 30
                                    mem[_52244 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54255 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54255 + idx + 68] = mem[_52244 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54255 + 68] = mem[_54255 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54255 + -mem[64] + 100
                                _31757 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31757] = 26
                                mem[_31757 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32702 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32702] = 26
                                    mem[_32702 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32701 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32701] = 26
                                    mem[_32701 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32230 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32230] = 26
                                        mem[_32230 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34672 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34672] = 30
                                            mem[_34672 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _36654 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36654] = 30
                                            mem[_36654 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _38092 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38092 + idx + 68] = mem[_36654 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38092 + 68] = mem[_38092 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38092 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40808 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40808] = 30
                                            mem[_40808 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _43124 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43124 + idx + 68] = mem[_40808 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43124 + 68] = mem[_43124 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43124 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _54312 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54312] = 30
                                            mem[_54312 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _56292 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_56292 + idx + 68] = mem[_54312 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_56292 + 68] = mem[_56292 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _56292 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34887 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34887] = 30
                                        mem[_34887 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35346 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35346 + idx + 68] = mem[_34887 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35346 + 68] = mem[_35346 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35346 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38091 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38091] = 30
                                        mem[_38091 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39692 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39692 + idx + 68] = mem[_38091 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39692 + 68] = mem[_39692 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39692 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43121 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43121] = 30
                                        mem[_43121 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _45640 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45640 + idx + 68] = mem[_43121 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45640 + 68] = mem[_45640 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45640 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _56291 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56291] = 30
                                        mem[_56291 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57992 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57992 + idx + 68] = mem[_56291 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57992 + 68] = mem[_57992 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57992 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32378 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32378] = 30
                                        mem[_32378 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32540 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32540 + idx + 68] = mem[_32378 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32540 + 68] = mem[_32540 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32540 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33327 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33327] = 30
                                        mem[_33327 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33572 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33572 + idx + 68] = mem[_33327 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33572 + 68] = mem[_33572 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33572 + -mem[64] + 100
                                    _32440 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32440] = 26
                                    mem[_32440 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34888 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34888] = 30
                                        mem[_34888 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38097 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38097] = 30
                                        mem[_38097 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39699 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39699 + idx + 68] = mem[_38097 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39699 + 68] = mem[_39699 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39699 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43127 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43127] = 30
                                        mem[_43127 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _45649 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45649 + idx + 68] = mem[_43127 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45649 + 68] = mem[_45649 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45649 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _56296 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56296] = 30
                                        mem[_56296 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57997 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57997 + idx + 68] = mem[_56296 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57997 + 68] = mem[_57997 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57997 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35349 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35349] = 30
                                    mem[_35349 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36068 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36068 + idx + 68] = mem[_35349 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36068 + 68] = mem[_36068 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36068 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39698 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39698] = 30
                                    mem[_39698 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _41785 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41785 + idx + 68] = mem[_39698 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41785 + 68] = mem[_41785 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41785 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45646 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45646] = 30
                                    mem[_45646 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _48181 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48181 + idx + 68] = mem[_45646 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48181 + 68] = mem[_48181 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48181 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _57996 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57996] = 30
                                    mem[_57996 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _59269 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59269 + idx + 68] = mem[_57996 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59269 + 68] = mem[_59269 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59269 + -mem[64] + 100
                                _31772 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31772] = 26
                                mem[_31772 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32708 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32708] = 26
                                    mem[_32708 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32707 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32707] = 26
                                    mem[_32707 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32227 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32227] = 26
                                        mem[_32227 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34671 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34671] = 30
                                                mem[_34671 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _36651 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36651] = 30
                                                mem[_36651 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _38083 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38083 + idx + 68] = mem[_36651 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38083 + 68] = mem[_38083 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38083 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40799 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40799] = 30
                                                mem[_40799 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _43115 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_43115 + idx + 68] = mem[_40799 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_43115 + 68] = mem[_43115 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _43115 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _54300 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54300] = 30
                                                mem[_54300 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _56283 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56283 + idx + 68] = mem[_54300 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56283 + 68] = mem[_56283 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56283 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34885 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34885] = 30
                                            mem[_34885 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35339 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35339 + idx + 68] = mem[_34885 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35339 + 68] = mem[_35339 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35339 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38082 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38082] = 30
                                            mem[_38082 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39673 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39673 + idx + 68] = mem[_38082 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39673 + 68] = mem[_39673 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39673 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43112] = 30
                                            mem[_43112 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45619 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45619 + idx + 68] = mem[_43112 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45619 + 68] = mem[_45619 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45619 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _56282 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56282] = 30
                                            mem[_56282 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57978 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57978 + idx + 68] = mem[_56282 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57978 + 68] = mem[_57978 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57978 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34884 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34884] = 30
                                            mem[_34884 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35336 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35336 + idx + 68] = mem[_34884 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35336 + 68] = mem[_35336 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35336 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38081 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38081] = 30
                                            mem[_38081 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39670 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39670 + idx + 68] = mem[_38081 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39670 + 68] = mem[_39670 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39670 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43109 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43109] = 30
                                            mem[_43109 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _45616 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45616 + idx + 68] = mem[_43109 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45616 + 68] = mem[_45616 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45616 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _56281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56281] = 30
                                            mem[_56281 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57975 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57975 + idx + 68] = mem[_56281 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57975 + 68] = mem[_57975 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57975 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35335 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35335] = 30
                                        mem[_35335 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36051 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36051 + idx + 68] = mem[_35335 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36051 + 68] = mem[_36051 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36051 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39669 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39669] = 30
                                        mem[_39669 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41753 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41753 + idx + 68] = mem[_39669 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41753 + 68] = mem[_41753 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41753 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45613 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45613] = 30
                                        mem[_45613 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48139 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48139 + idx + 68] = mem[_45613 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48139 + 68] = mem[_48139 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48139 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _57974 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57974] = 30
                                        mem[_57974 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59241 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59241 + idx + 68] = mem[_57974 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59241 + 68] = mem[_59241 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59241 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32377 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32377] = 30
                                        mem[_32377 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32537 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32537 + idx + 68] = mem[_32377 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32537 + 68] = mem[_32537 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32537 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33325 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33325] = 30
                                        mem[_33325 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33567 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33567 + idx + 68] = mem[_33325 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33567 + 68] = mem[_33567 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33567 + -mem[64] + 100
                                    _32439 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32439] = 26
                                    mem[_32439 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34886 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34886] = 30
                                            mem[_34886 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38090 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38090] = 30
                                            mem[_38090 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39683 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39683 + idx + 68] = mem[_38090 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39683 + 68] = mem[_39683 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39683 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43118 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43118] = 30
                                            mem[_43118 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45631 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45631 + idx + 68] = mem[_43118 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45631 + 68] = mem[_45631 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45631 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56288 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56288] = 30
                                            mem[_56288 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57985 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57985 + idx + 68] = mem[_56288 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57985 + 68] = mem[_57985 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57985 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35343 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35343] = 30
                                        mem[_35343 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36061 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36061 + idx + 68] = mem[_35343 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36061 + 68] = mem[_36061 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36061 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39682 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39682] = 30
                                        mem[_39682 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41767 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41767 + idx + 68] = mem[_39682 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41767 + 68] = mem[_41767 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41767 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45628 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45628] = 30
                                        mem[_45628 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _48157 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48157 + idx + 68] = mem[_45628 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48157 + 68] = mem[_48157 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48157 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _57984 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57984] = 30
                                        mem[_57984 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59253 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59253 + idx + 68] = mem[_57984 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59253 + 68] = mem[_59253 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59253 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35342 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35342] = 30
                                        mem[_35342 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36058 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36058 + idx + 68] = mem[_35342 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36058 + 68] = mem[_36058 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36058 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39681 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39681] = 30
                                        mem[_39681 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41764 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41764 + idx + 68] = mem[_39681 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41764 + 68] = mem[_41764 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41764 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45625 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45625] = 30
                                        mem[_45625 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48154 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48154 + idx + 68] = mem[_45625 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48154 + 68] = mem[_48154 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48154 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _57983 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57983] = 30
                                        mem[_57983 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59250 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59250 + idx + 68] = mem[_57983 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59250 + 68] = mem[_59250 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59250 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36057 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36057] = 30
                                    mem[_36057 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37157 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37157 + idx + 68] = mem[_36057 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37157 + 68] = mem[_37157 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37157 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _41763 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41763] = 30
                                    mem[_41763 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _44087 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44087 + idx + 68] = mem[_41763 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44087 + 68] = mem[_44087 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44087 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _48151 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48151] = 30
                                    mem[_48151 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _50358 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50358 + idx + 68] = mem[_48151 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50358 + 68] = mem[_50358 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50358 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _59249 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59249] = 30
                                    mem[_59249 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _60241 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_60241 + idx + 68] = mem[_59249 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_60241 + 68] = mem[_60241 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _60241 + -mem[64] + 100
                                _31767 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31767] = 26
                                mem[_31767 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32706 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32706] = 26
                                    mem[_32706 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32705 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32705] = 26
                                    mem[_32705 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32254 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32254] = 26
                                    mem[_32254 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34680 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34680] = 30
                                        mem[_34680 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36686 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36686] = 30
                                        mem[_36686 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38168 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38168 + idx + 68] = mem[_36686 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38168 + 68] = mem[_38168 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38168 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45762 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45762] = 30
                                        mem[_45762 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48347 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48347 + idx + 68] = mem[_45762 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48347 + 68] = mem[_48347 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48347 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34907 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34907] = 30
                                    mem[_34907 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35414 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35414 + idx + 68] = mem[_34907 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35414 + 68] = mem[_35414 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35414 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38167 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38167] = 30
                                    mem[_38167 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39864 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39864 + idx + 68] = mem[_38167 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39864 + 68] = mem[_39864 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39864 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _48346 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48346] = 30
                                    mem[_48346 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50557 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50557 + idx + 68] = mem[_48346 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50557 + 68] = mem[_50557 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50557 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32386 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32386] = 30
                                    mem[_32386 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32564 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32564 + idx + 68] = mem[_32386 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32564 + 68] = mem[_32564 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32564 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33343] = 30
                                    mem[_33343 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33612 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33612 + idx + 68] = mem[_33343 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33612 + 68] = mem[_33612 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33612 + -mem[64] + 100
                                _32448 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32448] = 26
                                mem[_32448 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34908 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34908] = 30
                                    mem[_34908 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38173 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38173] = 30
                                    mem[_38173 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39871 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39871 + idx + 68] = mem[_38173 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39871 + 68] = mem[_39871 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39871 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48351 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48351] = 30
                                    mem[_48351 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50562 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50562 + idx + 68] = mem[_48351 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50562 + 68] = mem[_50562 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50562 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35417 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35417] = 30
                                mem[_35417 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _36164 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36164 + idx + 68] = mem[_35417 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36164 + 68] = mem[_36164 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36164 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39870 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39870] = 30
                                mem[_39870 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _42005 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42005 + idx + 68] = mem[_39870 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42005 + 68] = mem[_42005 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42005 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50561 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50561] = 30
                                mem[_50561 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52502 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52502 + idx + 68] = mem[_50561 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52502 + 68] = mem[_52502 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52502 + -mem[64] + 100
                            _31812 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31812] = 26
                            mem[_31812 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32724 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32724] = 26
                                mem[_32724 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32723 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32723] = 26
                                mem[_32723 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32251 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32251] = 26
                                    mem[_32251 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34679 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34679] = 30
                                            mem[_34679 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36683 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36683] = 30
                                            mem[_36683 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38159 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38159 + idx + 68] = mem[_36683 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38159 + 68] = mem[_38159 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38159 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45751 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45751] = 30
                                            mem[_45751 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48332 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48332 + idx + 68] = mem[_45751 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48332 + 68] = mem[_48332 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48332 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34905 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34905] = 30
                                        mem[_34905 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35407 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35407 + idx + 68] = mem[_34905 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35407 + 68] = mem[_35407 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35407 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38158 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38158] = 30
                                        mem[_38158 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39845 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39845 + idx + 68] = mem[_38158 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39845 + 68] = mem[_39845 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39845 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _48331 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48331] = 30
                                        mem[_48331 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50543 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50543 + idx + 68] = mem[_48331 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50543 + 68] = mem[_50543 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50543 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34904 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34904] = 30
                                        mem[_34904 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35404 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35404 + idx + 68] = mem[_34904 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35404 + 68] = mem[_35404 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35404 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38157 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38157] = 30
                                        mem[_38157 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39842 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39842 + idx + 68] = mem[_38157 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39842 + 68] = mem[_39842 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39842 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48330 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48330] = 30
                                        mem[_48330 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50540 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50540 + idx + 68] = mem[_48330 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50540 + 68] = mem[_50540 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50540 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35403 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35403] = 30
                                    mem[_35403 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _36147 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36147 + idx + 68] = mem[_35403 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36147 + 68] = mem[_36147 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36147 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39841 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39841] = 30
                                    mem[_39841 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41969 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41969 + idx + 68] = mem[_39841 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41969 + 68] = mem[_41969 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41969 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _50539 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50539] = 30
                                    mem[_50539 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52474 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52474 + idx + 68] = mem[_50539 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52474 + 68] = mem[_52474 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52474 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32385 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32385] = 30
                                    mem[_32385 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32561 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32561 + idx + 68] = mem[_32385 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32561 + 68] = mem[_32561 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32561 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33341 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33341] = 30
                                    mem[_33341 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33607 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33607 + idx + 68] = mem[_33341 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33607 + 68] = mem[_33607 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33607 + -mem[64] + 100
                                _32447 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32447] = 26
                                mem[_32447 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34906 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34906] = 30
                                        mem[_34906 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38166 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38166] = 30
                                        mem[_38166 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39855 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39855 + idx + 68] = mem[_38166 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39855 + 68] = mem[_39855 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39855 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48339 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48339] = 30
                                        mem[_48339 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50550 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50550 + idx + 68] = mem[_48339 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50550 + 68] = mem[_50550 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50550 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35411 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35411] = 30
                                    mem[_35411 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _36157 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36157 + idx + 68] = mem[_35411 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36157 + 68] = mem[_36157 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36157 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39854 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39854] = 30
                                    mem[_39854 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41985 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41985 + idx + 68] = mem[_39854 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41985 + 68] = mem[_41985 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41985 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _50549 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50549] = 30
                                    mem[_50549 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52486 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52486 + idx + 68] = mem[_50549 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52486 + 68] = mem[_52486 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52486 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35410 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35410] = 30
                                    mem[_35410 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36154 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36154 + idx + 68] = mem[_35410 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36154 + 68] = mem[_36154 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36154 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39853 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39853] = 30
                                    mem[_39853 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41982 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41982 + idx + 68] = mem[_39853 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41982 + 68] = mem[_41982 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41982 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50548 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50548] = 30
                                    mem[_50548 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52483 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52483 + idx + 68] = mem[_50548 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52483 + 68] = mem[_52483 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52483 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36153 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36153] = 30
                                mem[_36153 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _37297 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37297 + idx + 68] = mem[_36153 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37297 + 68] = mem[_37297 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37297 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41981 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41981] = 30
                                mem[_41981 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _44319 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44319 + idx + 68] = mem[_41981 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44319 + 68] = mem[_44319 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44319 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _52482 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52482] = 30
                                mem[_52482 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54473 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54473 + idx + 68] = mem[_52482 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54473 + 68] = mem[_54473 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54473 + -mem[64] + 100
                            _31807 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31807] = 26
                            mem[_31807 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32722 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32722] = 26
                                mem[_32722 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32721 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32721] = 26
                                mem[_32721 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32236 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32236] = 26
                                        mem[_32236 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34674 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34674] = 30
                                            mem[_34674 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36662 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36662] = 30
                                            mem[_36662 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38111 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38111 + idx + 68] = mem[_36662 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38111 + 68] = mem[_38111 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38111 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45671 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45671] = 30
                                            mem[_45671 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48215 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48215 + idx + 68] = mem[_45671 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48215 + 68] = mem[_48215 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48215 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34892 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34892] = 30
                                        mem[_34892 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35363 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35363 + idx + 68] = mem[_34892 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35363 + 68] = mem[_35363 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35363 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38110 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38110] = 30
                                        mem[_38110 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39735 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39735 + idx + 68] = mem[_38110 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39735 + 68] = mem[_39735 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39735 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48214 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48214] = 30
                                        mem[_48214 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50419 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50419 + idx + 68] = mem[_48214 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50419 + 68] = mem[_50419 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50419 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32380 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32380] = 30
                                        mem[_32380 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32546 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32546 + idx + 68] = mem[_32380 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32546 + 68] = mem[_32546 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32546 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33331 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33331] = 30
                                        mem[_33331 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33582 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33582 + idx + 68] = mem[_33331 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33582 + 68] = mem[_33582 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33582 + -mem[64] + 100
                                    _32442 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32442] = 26
                                    mem[_32442 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34893 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34893] = 30
                                        mem[_34893 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38116 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38116] = 30
                                        mem[_38116 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39742 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39742 + idx + 68] = mem[_38116 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39742 + 68] = mem[_39742 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39742 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48219 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48219] = 30
                                        mem[_48219 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50424 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50424 + idx + 68] = mem[_48219 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50424 + 68] = mem[_50424 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50424 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35366 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35366] = 30
                                    mem[_35366 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36092 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36092 + idx + 68] = mem[_35366 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36092 + 68] = mem[_36092 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36092 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39741 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39741] = 30
                                    mem[_39741 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _41841 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41841 + idx + 68] = mem[_39741 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41841 + 68] = mem[_41841 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41841 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50423 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50423] = 30
                                    mem[_50423 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52361 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52361 + idx + 68] = mem[_50423 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52361 + 68] = mem[_52361 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52361 + -mem[64] + 100
                                _31782 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31782] = 26
                                mem[_31782 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32712 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32712] = 26
                                    mem[_32712 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32711 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32711] = 26
                                    mem[_32711 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32233 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32233] = 26
                                        mem[_32233 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34673 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34673] = 30
                                                mem[_34673 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36659 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36659] = 30
                                                mem[_36659 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38102 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38102 + idx + 68] = mem[_36659 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38102 + 68] = mem[_38102 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38102 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45660 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45660] = 30
                                                mem[_45660 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48200 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48200 + idx + 68] = mem[_45660 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48200 + 68] = mem[_48200 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48200 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34890 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34890] = 30
                                            mem[_34890 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35356 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35356 + idx + 68] = mem[_34890 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35356 + 68] = mem[_35356 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35356 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38101 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38101] = 30
                                            mem[_38101 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39716 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39716 + idx + 68] = mem[_38101 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39716 + 68] = mem[_39716 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39716 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _48199 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48199] = 30
                                            mem[_48199 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50405 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50405 + idx + 68] = mem[_48199 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50405 + 68] = mem[_50405 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50405 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34889 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34889] = 30
                                            mem[_34889 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35353 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35353 + idx + 68] = mem[_34889 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35353 + 68] = mem[_35353 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35353 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38100 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38100] = 30
                                            mem[_38100 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _39713 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39713 + idx + 68] = mem[_38100 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39713 + 68] = mem[_39713 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39713 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48198 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48198] = 30
                                            mem[_48198 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50402 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50402 + idx + 68] = mem[_48198 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50402 + 68] = mem[_50402 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50402 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35352 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35352] = 30
                                        mem[_35352 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36075 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36075 + idx + 68] = mem[_35352 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36075 + 68] = mem[_36075 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36075 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39712 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39712] = 30
                                        mem[_39712 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41805 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41805 + idx + 68] = mem[_39712 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41805 + 68] = mem[_41805 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41805 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _50401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50401] = 30
                                        mem[_50401 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52333 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52333 + idx + 68] = mem[_50401 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52333 + 68] = mem[_52333 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52333 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32379 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32379] = 30
                                        mem[_32379 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32543 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32543 + idx + 68] = mem[_32379 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32543 + 68] = mem[_32543 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32543 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33329 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33329] = 30
                                        mem[_33329 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33577 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33577 + idx + 68] = mem[_33329 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33577 + 68] = mem[_33577 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33577 + -mem[64] + 100
                                    _32441 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32441] = 26
                                    mem[_32441 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34891 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34891] = 30
                                            mem[_34891 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38109 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38109] = 30
                                            mem[_38109 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39726 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39726 + idx + 68] = mem[_38109 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39726 + 68] = mem[_39726 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39726 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48207 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48207] = 30
                                            mem[_48207 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50412 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50412 + idx + 68] = mem[_48207 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50412 + 68] = mem[_50412 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50412 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35360 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35360] = 30
                                        mem[_35360 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36085 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36085 + idx + 68] = mem[_35360 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36085 + 68] = mem[_36085 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36085 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39725 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39725] = 30
                                        mem[_39725 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41821 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41821 + idx + 68] = mem[_39725 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41821 + 68] = mem[_41821 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41821 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _50411 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50411] = 30
                                        mem[_50411 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52345 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52345 + idx + 68] = mem[_50411 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52345 + 68] = mem[_52345 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52345 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35359 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35359] = 30
                                        mem[_35359 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36082 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36082 + idx + 68] = mem[_35359 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36082 + 68] = mem[_36082 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36082 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39724 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39724] = 30
                                        mem[_39724 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41818 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41818 + idx + 68] = mem[_39724 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41818 + 68] = mem[_41818 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41818 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50410 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50410] = 30
                                        mem[_50410 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52342 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52342 + idx + 68] = mem[_50410 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52342 + 68] = mem[_52342 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52342 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36081 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36081] = 30
                                    mem[_36081 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37192 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37192 + idx + 68] = mem[_36081 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37192 + 68] = mem[_37192 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37192 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41817 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41817] = 30
                                    mem[_41817 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _44143 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44143 + idx + 68] = mem[_41817 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44143 + 68] = mem[_44143 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44143 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _52341 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52341] = 30
                                    mem[_52341 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54339 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54339 + idx + 68] = mem[_52341 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54339 + 68] = mem[_54339 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54339 + -mem[64] + 100
                                _31777 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31777] = 26
                                mem[_31777 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32710 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32710] = 26
                                    mem[_32710 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32709 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32709] = 26
                                    mem[_32709 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            if not stor4[address(arg1)]:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32242 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32242] = 26
                                            mem[_32242 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34676 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34676] = 30
                                                mem[_34676 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36670 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36670] = 30
                                                mem[_36670 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38130 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38130 + idx + 68] = mem[_36670 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38130 + 68] = mem[_38130 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38130 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45694 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45694] = 30
                                                mem[_45694 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48248 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48248 + idx + 68] = mem[_45694 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48248 + 68] = mem[_48248 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48248 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34897 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34897] = 30
                                            mem[_34897 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35380 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35380 + idx + 68] = mem[_34897 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35380 + 68] = mem[_35380 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35380 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38129 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38129] = 30
                                            mem[_38129 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _39778 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39778 + idx + 68] = mem[_38129 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39778 + 68] = mem[_39778 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39778 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48247 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48247] = 30
                                            mem[_48247 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50455 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50455 + idx + 68] = mem[_48247 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50455 + 68] = mem[_50455 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50455 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32382 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32382] = 30
                                            mem[_32382 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32552 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32552 + idx + 68] = mem[_32382 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32552 + 68] = mem[_32552 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32552 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33335 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33335] = 30
                                            mem[_33335 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33592 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33592 + idx + 68] = mem[_33335 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33592 + 68] = mem[_33592 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33592 + -mem[64] + 100
                                        _32444 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32444] = 26
                                        mem[_32444 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34898 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34898] = 30
                                            mem[_34898 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38135 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38135] = 30
                                            mem[_38135 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39785 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39785 + idx + 68] = mem[_38135 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39785 + 68] = mem[_39785 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39785 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48252 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48252] = 30
                                            mem[_48252 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50460 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50460 + idx + 68] = mem[_48252 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50460 + 68] = mem[_50460 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50460 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35383 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35383] = 30
                                        mem[_35383 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36116 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36116 + idx + 68] = mem[_35383 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36116 + 68] = mem[_36116 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36116 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39784 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39784] = 30
                                        mem[_39784 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _41897 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41897 + idx + 68] = mem[_39784 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41897 + 68] = mem[_41897 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41897 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50459 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50459] = 30
                                        mem[_50459 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52405 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52405 + idx + 68] = mem[_50459 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52405 + 68] = mem[_52405 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52405 + -mem[64] + 100
                                    _31792 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31792] = 26
                                    mem[_31792 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32716 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32716] = 26
                                        mem[_32716 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32715 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32715] = 26
                                        mem[_32715 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32239 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32239] = 26
                                            mem[_32239 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34675 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34675] = 30
                                                    mem[_34675 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36667 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36667] = 30
                                                    mem[_36667 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38121 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38121 + idx + 68] = mem[_36667 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38121 + 68] = mem[_38121 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38121 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _45683 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45683] = 30
                                                    mem[_45683 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48233 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48233 + idx + 68] = mem[_45683 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48233 + 68] = mem[_48233 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48233 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34895 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34895] = 30
                                                mem[_34895 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35373 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35373 + idx + 68] = mem[_34895 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35373 + 68] = mem[_35373 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35373 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38120 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38120] = 30
                                                mem[_38120 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39759 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39759 + idx + 68] = mem[_38120 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39759 + 68] = mem[_39759 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39759 + -mem[64] + 100
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _48232 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48232] = 30
                                                mem[_48232 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50441 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50441 + idx + 68] = mem[_48232 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50441 + 68] = mem[_50441 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50441 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34894 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34894] = 30
                                                mem[_34894 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35370 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35370 + idx + 68] = mem[_34894 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35370 + 68] = mem[_35370 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35370 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38119 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38119] = 30
                                                mem[_38119 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _39756 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39756 + idx + 68] = mem[_38119 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39756 + 68] = mem[_39756 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39756 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _48231 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48231] = 30
                                                mem[_48231 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50438 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50438 + idx + 68] = mem[_48231 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50438 + 68] = mem[_50438 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50438 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35369 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35369] = 30
                                            mem[_35369 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36099 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36099 + idx + 68] = mem[_35369 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36099 + 68] = mem[_36099 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36099 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39755 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39755] = 30
                                            mem[_39755 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _41861 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41861 + idx + 68] = mem[_39755 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41861 + 68] = mem[_41861 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41861 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _50437 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50437] = 30
                                            mem[_50437 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52377 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52377 + idx + 68] = mem[_50437 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52377 + 68] = mem[_52377 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52377 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32381] = 30
                                            mem[_32381 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32549 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32549 + idx + 68] = mem[_32381 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32549 + 68] = mem[_32549 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32549 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33333 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33333] = 30
                                            mem[_33333 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33587 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33587 + idx + 68] = mem[_33333 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33587 + 68] = mem[_33587 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33587 + -mem[64] + 100
                                        _32443 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32443] = 26
                                        mem[_32443 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34896 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34896] = 30
                                                mem[_34896 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38128 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38128] = 30
                                                mem[_38128 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39769 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39769 + idx + 68] = mem[_38128 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39769 + 68] = mem[_39769 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39769 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48240 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48240] = 30
                                                mem[_48240 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50448 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50448 + idx + 68] = mem[_48240 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50448 + 68] = mem[_50448 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50448 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35377 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35377] = 30
                                            mem[_35377 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36109 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36109 + idx + 68] = mem[_35377 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36109 + 68] = mem[_36109 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36109 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39768 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39768] = 30
                                            mem[_39768 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41877 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41877 + idx + 68] = mem[_39768 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41877 + 68] = mem[_41877 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41877 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _50447 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50447] = 30
                                            mem[_50447 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52389 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52389 + idx + 68] = mem[_50447 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52389 + 68] = mem[_52389 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52389 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35376 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35376] = 30
                                            mem[_35376 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36106 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36106 + idx + 68] = mem[_35376 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36106 + 68] = mem[_36106 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36106 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39767 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39767] = 30
                                            mem[_39767 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _41874 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41874 + idx + 68] = mem[_39767 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41874 + 68] = mem[_41874 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41874 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _50446 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50446] = 30
                                            mem[_50446 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52386 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52386 + idx + 68] = mem[_50446 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52386 + 68] = mem[_52386 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52386 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36105 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36105] = 30
                                        mem[_36105 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37227 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37227 + idx + 68] = mem[_36105 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37227 + 68] = mem[_37227 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37227 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41873 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41873] = 30
                                        mem[_41873 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _44205 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44205 + idx + 68] = mem[_41873 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44205 + 68] = mem[_44205 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44205 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _52385 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52385] = 30
                                        mem[_52385 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54389 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54389 + idx + 68] = mem[_52385 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54389 + 68] = mem[_54389 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54389 + -mem[64] + 100
                                    _31787 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31787] = 26
                                    mem[_31787 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32714 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32714] = 26
                                        mem[_32714 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32713 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32713] = 26
                                        mem[_32713 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            else:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32248 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32248] = 26
                                            mem[_32248 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34678 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34678] = 30
                                                mem[_34678 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _36678 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36678] = 30
                                                mem[_36678 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _38149 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38149 + idx + 68] = mem[_36678 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38149 + 68] = mem[_38149 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38149 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40870 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40870] = 30
                                                mem[_40870 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _43181 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_43181 + idx + 68] = mem[_40870 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_43181 + 68] = mem[_43181 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _43181 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _54446 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54446] = 30
                                                mem[_54446 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _56411 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56411 + idx + 68] = mem[_54446 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56411 + 68] = mem[_56411 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56411 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34902 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34902] = 30
                                            mem[_34902 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35397 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35397 + idx + 68] = mem[_34902 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35397 + 68] = mem[_35397 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35397 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38148 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38148] = 30
                                            mem[_38148 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39821 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39821 + idx + 68] = mem[_38148 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39821 + 68] = mem[_39821 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39821 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43178 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43178] = 30
                                            mem[_43178 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _45731 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45731 + idx + 68] = mem[_43178 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45731 + 68] = mem[_45731 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45731 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _56410 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56410] = 30
                                            mem[_56410 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58102 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58102 + idx + 68] = mem[_56410 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58102 + 68] = mem[_58102 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58102 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32384 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32384] = 30
                                            mem[_32384 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32558 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32558 + idx + 68] = mem[_32384 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32558 + 68] = mem[_32558 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32558 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33339 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33339] = 30
                                            mem[_33339 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33602 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33602 + idx + 68] = mem[_33339 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33602 + 68] = mem[_33602 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33602 + -mem[64] + 100
                                        _32446 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32446] = 26
                                        mem[_32446 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34903 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34903] = 30
                                            mem[_34903 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38154 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38154] = 30
                                            mem[_38154 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39828 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39828 + idx + 68] = mem[_38154 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39828 + 68] = mem[_39828 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39828 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43184 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43184] = 30
                                            mem[_43184 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45740 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45740 + idx + 68] = mem[_43184 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45740 + 68] = mem[_45740 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45740 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56415 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56415] = 30
                                            mem[_56415 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58107 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58107 + idx + 68] = mem[_56415 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58107 + 68] = mem[_58107 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58107 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35400 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35400] = 30
                                        mem[_35400 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36140 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36140 + idx + 68] = mem[_35400 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36140 + 68] = mem[_36140 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36140 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39827 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39827] = 30
                                        mem[_39827 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41949 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41949 + idx + 68] = mem[_39827 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41949 + 68] = mem[_41949 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41949 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45737 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45737] = 30
                                        mem[_45737 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48313 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48313 + idx + 68] = mem[_45737 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48313 + 68] = mem[_48313 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48313 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _58106 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58106] = 30
                                        mem[_58106 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _59353 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59353 + idx + 68] = mem[_58106 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59353 + 68] = mem[_59353 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59353 + -mem[64] + 100
                                    _31802 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31802] = 26
                                    mem[_31802 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32720 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32720] = 26
                                        mem[_32720 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32719 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32719] = 26
                                        mem[_32719 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32245 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32245] = 26
                                            mem[_32245 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34677 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34677] = 30
                                                    mem[_34677 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _36675 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36675] = 30
                                                    mem[_36675 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _38140 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38140 + idx + 68] = mem[_36675 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38140 + 68] = mem[_38140 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38140 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _40861 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_40861] = 30
                                                    mem[_40861 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _43172 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_43172 + idx + 68] = mem[_40861 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_43172 + 68] = mem[_43172 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _43172 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _54434 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54434] = 30
                                                    mem[_54434 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _56402 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56402 + idx + 68] = mem[_54434 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56402 + 68] = mem[_56402 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56402 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34900 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34900] = 30
                                                mem[_34900 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35390 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35390 + idx + 68] = mem[_34900 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35390 + 68] = mem[_35390 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35390 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38139 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38139] = 30
                                                mem[_38139 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39802 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39802 + idx + 68] = mem[_38139 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39802 + 68] = mem[_39802 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39802 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43169 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43169] = 30
                                                mem[_43169 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _45710 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_45710 + idx + 68] = mem[_43169 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_45710 + 68] = mem[_45710 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _45710 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _56401 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56401] = 30
                                                mem[_56401 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58088 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58088 + idx + 68] = mem[_56401 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58088 + 68] = mem[_58088 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58088 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34899 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34899] = 30
                                                mem[_34899 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35387 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35387 + idx + 68] = mem[_34899 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35387 + 68] = mem[_35387 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35387 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38138 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38138] = 30
                                                mem[_38138 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39799 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39799 + idx + 68] = mem[_38138 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39799 + 68] = mem[_39799 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39799 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43166 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43166] = 30
                                                mem[_43166 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _45707 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_45707 + idx + 68] = mem[_43166 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_45707 + 68] = mem[_45707 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _45707 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _56400 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56400] = 30
                                                mem[_56400 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58085 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58085 + idx + 68] = mem[_56400 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58085 + 68] = mem[_58085 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58085 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35386 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35386] = 30
                                            mem[_35386 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36123 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36123 + idx + 68] = mem[_35386 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36123 + 68] = mem[_36123 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36123 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39798 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39798] = 30
                                            mem[_39798 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41917 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41917 + idx + 68] = mem[_39798 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41917 + 68] = mem[_41917 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41917 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45704 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45704] = 30
                                            mem[_45704 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48271 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48271 + idx + 68] = mem[_45704 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48271 + 68] = mem[_48271 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48271 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _58084 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58084] = 30
                                            mem[_58084 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59325 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59325 + idx + 68] = mem[_58084 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59325 + 68] = mem[_59325 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59325 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32383 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32383] = 30
                                            mem[_32383 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32555 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32555 + idx + 68] = mem[_32383 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32555 + 68] = mem[_32555 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32555 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33337 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33337] = 30
                                            mem[_33337 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33597 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33597 + idx + 68] = mem[_33337 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33597 + 68] = mem[_33597 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33597 + -mem[64] + 100
                                        _32445 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32445] = 26
                                        mem[_32445 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34901 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34901] = 30
                                                mem[_34901 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38147 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38147] = 30
                                                mem[_38147 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39812 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39812 + idx + 68] = mem[_38147 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39812 + 68] = mem[_39812 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39812 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43175 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43175] = 30
                                                mem[_43175 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _45722 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_45722 + idx + 68] = mem[_43175 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_45722 + 68] = mem[_45722 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _45722 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56407 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56407] = 30
                                                mem[_56407 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58095 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58095 + idx + 68] = mem[_56407 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58095 + 68] = mem[_58095 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58095 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35394 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35394] = 30
                                            mem[_35394 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36133 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36133 + idx + 68] = mem[_35394 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36133 + 68] = mem[_36133 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36133 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39811 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39811] = 30
                                            mem[_39811 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41931 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41931 + idx + 68] = mem[_39811 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41931 + 68] = mem[_41931 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41931 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45719 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45719] = 30
                                            mem[_45719 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _48289 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48289 + idx + 68] = mem[_45719 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48289 + 68] = mem[_48289 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48289 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _58094 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58094] = 30
                                            mem[_58094 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59337 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59337 + idx + 68] = mem[_58094 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59337 + 68] = mem[_59337 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59337 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35393 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35393] = 30
                                            mem[_35393 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36130 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36130 + idx + 68] = mem[_35393 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36130 + 68] = mem[_36130 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36130 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39810 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39810] = 30
                                            mem[_39810 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41928 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41928 + idx + 68] = mem[_39810 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41928 + 68] = mem[_41928 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41928 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45716 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45716] = 30
                                            mem[_45716 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48286 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48286 + idx + 68] = mem[_45716 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48286 + 68] = mem[_48286 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48286 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _58093 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58093] = 30
                                            mem[_58093 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59334 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59334 + idx + 68] = mem[_58093 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59334 + 68] = mem[_59334 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59334 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36129 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36129] = 30
                                        mem[_36129 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37262 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37262 + idx + 68] = mem[_36129 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37262 + 68] = mem[_37262 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37262 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41927 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41927] = 30
                                        mem[_41927 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _44263 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44263 + idx + 68] = mem[_41927 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44263 + 68] = mem[_44263 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44263 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _48283 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48283] = 30
                                        mem[_48283 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _50496 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50496 + idx + 68] = mem[_48283 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50496 + 68] = mem[_50496 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50496 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _59333 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59333] = 30
                                        mem[_59333 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _60299 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60299 + idx + 68] = mem[_59333 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60299 + 68] = mem[_60299 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60299 + -mem[64] + 100
                                    _31797 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31797] = 26
                                    mem[_31797 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32718 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32718] = 26
                                        mem[_32718 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32717 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32717] = 26
                                        mem[_32717 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
    else:
        mem[0] = arg1
        mem[32] = 4
        if not stor4[address(arg1)]:
            if not arg2:
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                mem[64] = 224
                mem[160] = 30
                mem[192] = 'SafeMath: subtraction overflow'
                if 0 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                idx = 0
                s = 100 * 10^18
                t = stor6
                while idx < stor5.length:
                    mem[0] = stor5[idx]
                    mem[32] = 1
                    if stor1[stor5[idx]] > t:
                        _32356 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32356] = 26
                        mem[_32356 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _34714 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34714] = 30
                            mem[_34714 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _36822 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36822] = 30
                            mem[_36822 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _38491 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_38491 + idx + 68] = mem[_36822 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_38491 + 68] = mem[_38491 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _38491 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41240 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41240] = 30
                            mem[_41240 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _43518 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43518 + idx + 68] = mem[_41240 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43518 + 68] = mem[_43518 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43518 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _51850 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51850] = 30
                            mem[_51850 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _53857 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53857 + idx + 68] = mem[_51850 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53857 + 68] = mem[_53857 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53857 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _34992 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34992] = 30
                        mem[_34992 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 100 * 10^18:
                            _35703 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_35703 + idx + 68] = mem[_34992 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_35703 + 68] = mem[_35703 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _35703 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _38490 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_38490] = 30
                        mem[_38490 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _40595 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_40595 + idx + 68] = mem[_38490 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_40595 + 68] = mem[_40595 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _40595 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _43515 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_43515] = 30
                        mem[_43515 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                            _46269 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_46269 + idx + 68] = mem[_43515 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_46269 + 68] = mem[_46269 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _46269 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                        _53856 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_53856] = 30
                        mem[_53856 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            return 1
                        _55885 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_55885 + idx + 68] = mem[_53856 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_55885 + 68] = mem[_55885 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _55885 + -mem[64] + 100
                    require idx < stor5.length
                    mem[0] = stor5[idx]
                    mem[32] = 2
                    if stor2[stor5[idx]] <= s:
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        _32420 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32420] = 30
                        mem[_32420 + 32] = 'SafeMath: subtraction overflow'
                        if stor1[stor5[idx]] > t:
                            _32666 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_32666 + idx + 68] = mem[_32420 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_32666 + 68] = mem[_32666 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _32666 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        _33411 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33411] = 30
                        mem[_33411 + 32] = 'SafeMath: subtraction overflow'
                        if stor2[stor5[idx]] <= s:
                            idx = idx + 1
                            s = s - stor2[stor5[idx]]
                            t = t - stor1[stor5[idx]]
                            continue 
                        _33782 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_33782 + idx + 68] = mem[_33411 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_33782 + 68] = mem[_33782 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _33782 + -mem[64] + 100
                    _32482 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32482] = 26
                    mem[_32482 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        _34993 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34993] = 30
                        mem[_34993 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _38496 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_38496] = 30
                        mem[_38496 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _40602 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_40602 + idx + 68] = mem[_38496 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_40602 + 68] = mem[_40602 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _40602 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _43521 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_43521] = 30
                        mem[_43521 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _46278 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_46278 + idx + 68] = mem[_43521 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_46278 + 68] = mem[_46278 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _46278 + -mem[64] + 100
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        _53861 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_53861] = 30
                        mem[_53861 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            return 1
                        _55890 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_55890 + idx + 68] = mem[_53861 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_55890 + 68] = mem[_55890 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _55890 + -mem[64] + 100
                    require arg2
                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _35706 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_35706] = 30
                    mem[_35706 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > arg2 * stor6 / 100 * 10^18:
                        _36572 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_36572 + idx + 68] = mem[_35706 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_36572 + 68] = mem[_36572 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _36572 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 2
                    _40601 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_40601] = 30
                    mem[_40601 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 > stor2[address(msg.sender)]:
                        _42937 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_42937 + idx + 68] = mem[_40601 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_42937 + 68] = mem[_42937 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _42937 + -mem[64] + 100
                    stor2[address(msg.sender)] -= arg2
                    mem[0] = msg.sender
                    mem[32] = 1
                    _46275 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_46275] = 30
                    mem[_46275 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                        _49086 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_49086 + idx + 68] = mem[_46275 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_49086 + 68] = mem[_49086 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _49086 + -mem[64] + 100
                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[0] = arg1
                    mem[32] = 1
                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                    _55889 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_55889] = 30
                    mem[_55889 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        return 1
                    _57627 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_57627 + idx + 68] = mem[_55889 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_57627 + 68] = mem[_57627 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _57627 + -mem[64] + 100
                _31982 = mem[64]
                mem[64] = mem[64] + 64
                mem[_31982] = 26
                mem[_31982 + 32] = 'SafeMath: division by zero'
                if t < stor6 / 100 * 10^18:
                    _32792 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32792] = 26
                    mem[_32792 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        if 0 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require arg2
                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if 0 > arg2 * stor6 / 100 * 10^18:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                else:
                    _32791 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32791] = 26
                    mem[_32791 + 32] = 'SafeMath: division by zero'
                    if s <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require s
                    if not arg2:
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        if 0 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require arg2
                        if arg2 * t / s / arg2 != t / s:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if 0 > arg2 * t / s:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        if arg2 * t / s > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * t / s
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                if totalFees < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                emit Transfer(arg2, msg.sender, arg1);
            else:
                require arg2
                if 5 * arg2 / arg2 != 5:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                mem[64] = 224
                mem[160] = 30
                mem[192] = 'SafeMath: subtraction overflow'
                if 5 * arg2 / 100 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                idx = 0
                s = 100 * 10^18
                t = stor6
                while idx < stor5.length:
                    mem[0] = stor5[idx]
                    mem[32] = 1
                    if stor1[stor5[idx]] > t:
                        _32353 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32353] = 26
                        mem[_32353 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 5 * arg2 / 100:
                                _34713 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34713] = 30
                                mem[_34713 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 2
                                _36819 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36819] = 30
                                mem[_36819 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _38482 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38482 + idx + 68] = mem[_36819 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38482 + 68] = mem[_38482 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38482 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41231 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41231] = 30
                                mem[_41231 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _43509 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43509 + idx + 68] = mem[_41231 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43509 + 68] = mem[_43509 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43509 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51839 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51839] = 30
                                mem[_51839 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53842 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53842 + idx + 68] = mem[_51839 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53842 + 68] = mem[_53842 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53842 + -mem[64] + 100
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _34990 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34990] = 30
                            mem[_34990 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                _35696 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35696 + idx + 68] = mem[_34990 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35696 + 68] = mem[_35696 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35696 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            _38481 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38481] = 30
                            mem[_38481 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _40576 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_40576 + idx + 68] = mem[_38481 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_40576 + 68] = mem[_40576 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _40576 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _43506 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_43506] = 30
                            mem[_43506 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _46248 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_46248 + idx + 68] = mem[_43506 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_46248 + 68] = mem[_46248 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _46248 + -mem[64] + 100
                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            _53841 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53841] = 30
                            mem[_53841 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55871 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55871 + idx + 68] = mem[_53841 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55871 + 68] = mem[_55871 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55871 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 5 * arg2 / 100:
                            _34989 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34989] = 30
                            mem[_34989 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                _35693 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35693 + idx + 68] = mem[_34989 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35693 + 68] = mem[_35693 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35693 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            _38480 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38480] = 30
                            mem[_38480 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _40573 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_40573 + idx + 68] = mem[_38480 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_40573 + 68] = mem[_40573 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _40573 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _43503 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_43503] = 30
                            mem[_43503 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _46245 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_46245 + idx + 68] = mem[_43503 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_46245 + 68] = mem[_46245 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _46245 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            _53840 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53840] = 30
                            mem[_53840 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55868 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55868 + idx + 68] = mem[_53840 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55868 + 68] = mem[_55868 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55868 + -mem[64] + 100
                        require 5 * arg2 / 100
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _35692 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35692] = 30
                        mem[_35692 + 32] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                            _36555 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36555 + idx + 68] = mem[_35692 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36555 + 68] = mem[_36555 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36555 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _40572 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_40572] = 30
                        mem[_40572 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _42905 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42905 + idx + 68] = mem[_40572 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42905 + 68] = mem[_42905 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42905 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _46242 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_46242] = 30
                        mem[_46242 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                            _49044 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_49044 + idx + 68] = mem[_46242 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_49044 + 68] = mem[_49044 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _49044 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                        _55867 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55867] = 30
                        mem[_55867 + 32] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57599 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57599 + idx + 68] = mem[_55867 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57599 + 68] = mem[_57599 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57599 + -mem[64] + 100
                    require idx < stor5.length
                    mem[0] = stor5[idx]
                    mem[32] = 2
                    if stor2[stor5[idx]] <= s:
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        _32419 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32419] = 30
                        mem[_32419 + 32] = 'SafeMath: subtraction overflow'
                        if stor1[stor5[idx]] > t:
                            _32663 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_32663 + idx + 68] = mem[_32419 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_32663 + 68] = mem[_32663 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _32663 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        _33409 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33409] = 30
                        mem[_33409 + 32] = 'SafeMath: subtraction overflow'
                        if stor2[stor5[idx]] <= s:
                            idx = idx + 1
                            s = s - stor2[stor5[idx]]
                            t = t - stor1[stor5[idx]]
                            continue 
                        _33777 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_33777 + idx + 68] = mem[_33409 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_33777 + 68] = mem[_33777 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _33777 + -mem[64] + 100
                    _32481 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32481] = 26
                    mem[_32481 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if not 5 * arg2 / 100:
                            _34991 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34991] = 30
                            mem[_34991 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _38489 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38489] = 30
                            mem[_38489 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _40586 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_40586 + idx + 68] = mem[_38489 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_40586 + 68] = mem[_40586 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _40586 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _43512 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_43512] = 30
                            mem[_43512 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _46260 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_46260 + idx + 68] = mem[_43512 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_46260 + 68] = mem[_46260 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _46260 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _53849 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53849] = 30
                            mem[_53849 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55878 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55878 + idx + 68] = mem[_53849 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55878 + 68] = mem[_55878 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55878 + -mem[64] + 100
                        require 5 * arg2 / 100
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _35700 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35700] = 30
                        mem[_35700 + 32] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                            _36565 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36565 + idx + 68] = mem[_35700 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36565 + 68] = mem[_36565 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36565 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _40585 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_40585] = 30
                        mem[_40585 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _42919 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42919 + idx + 68] = mem[_40585 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42919 + 68] = mem[_42919 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42919 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _46257 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_46257] = 30
                        mem[_46257 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _49062 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_49062 + idx + 68] = mem[_46257 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_49062 + 68] = mem[_49062 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _49062 + -mem[64] + 100
                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                        _55877 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55877] = 30
                        mem[_55877 + 32] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57611 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57611 + idx + 68] = mem[_55877 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57611 + 68] = mem[_57611 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57611 + -mem[64] + 100
                    require arg2
                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if not 5 * arg2 / 100:
                        _35699 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35699] = 30
                        mem[_35699 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 100 * 10^18:
                            _36562 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36562 + idx + 68] = mem[_35699 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36562 + 68] = mem[_36562 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36562 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _40584 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_40584] = 30
                        mem[_40584 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _42916 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42916 + idx + 68] = mem[_40584 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42916 + 68] = mem[_42916 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42916 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _46254 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_46254] = 30
                        mem[_46254 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                            _49059 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_49059 + idx + 68] = mem[_46254 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_49059 + 68] = mem[_49059 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _49059 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                        _55876 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55876] = 30
                        mem[_55876 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57608 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57608 + idx + 68] = mem[_55876 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57608 + 68] = mem[_57608 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57608 + -mem[64] + 100
                    require 5 * arg2 / 100
                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _36561 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_36561] = 30
                    mem[_36561 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                        _37892 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_37892 + idx + 68] = mem[_36561 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37892 + 68] = mem[_37892 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _37892 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 2
                    _42915 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_42915] = 30
                    mem[_42915 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 > stor2[address(msg.sender)]:
                        _45329 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_45329 + idx + 68] = mem[_42915 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_45329 + 68] = mem[_45329 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _45329 + -mem[64] + 100
                    stor2[address(msg.sender)] -= arg2
                    mem[0] = msg.sender
                    mem[32] = 1
                    _49056 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49056] = 30
                    mem[_49056 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                        _51290 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_51290 + idx + 68] = mem[_49056 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_51290 + 68] = mem[_51290 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _51290 + -mem[64] + 100
                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[0] = arg1
                    mem[32] = 1
                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                    _57607 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_57607] = 30
                    mem[_57607 + 32] = 'SafeMath: subtraction overflow'
                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                        if totalFees + (5 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 5 * arg2 / 100
                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        return 1
                    _58972 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_58972 + idx + 68] = mem[_57607 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_58972 + 68] = mem[_58972 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _58972 + -mem[64] + 100
                _31977 = mem[64]
                mem[64] = mem[64] + 64
                mem[_31977] = 26
                mem[_31977 + 32] = 'SafeMath: division by zero'
                if t < stor6 / 100 * 10^18:
                    _32790 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32790] = 26
                    mem[_32790 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if not 5 * arg2 / 100:
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                    else:
                        require arg2
                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 5 * arg2 / 100:
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                else:
                    _32789 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32789] = 26
                    mem[_32789 + 32] = 'SafeMath: division by zero'
                    if s <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require s
                    if not arg2:
                        if not 5 * arg2 / 100:
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 5 * arg2 / 100 * t / s > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                            if 5 * arg2 / 100 * t / s > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -1 * 5 * arg2 / 100 * t / s
                    else:
                        require arg2
                        if arg2 * t / s / arg2 != t / s:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 5 * arg2 / 100:
                            if 0 > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                            if 5 * arg2 / 100 * t / s > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -1 * 5 * arg2 / 100 * t / s
                if totalFees + (5 * arg2 / 100) < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += 5 * arg2 / 100
                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
        else:
            if stor4[address(msg.sender)]:
                if stor4[address(msg.sender)]:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32266 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32266] = 26
                                    mem[_32266 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34684 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34684] = 30
                                        mem[_34684 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36702 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36702] = 30
                                        mem[_36702 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38206 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38206 + idx + 68] = mem[_36702 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38206 + 68] = mem[_38206 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38206 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45815 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45815] = 30
                                        mem[_45815 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48420 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48420 + idx + 68] = mem[_45815 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48420 + 68] = mem[_48420 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48420 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34917 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34917] = 30
                                    mem[_34917 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35448 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35448 + idx + 68] = mem[_34917 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35448 + 68] = mem[_35448 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35448 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38205 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38205] = 30
                                    mem[_38205 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _39950 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39950 + idx + 68] = mem[_38205 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39950 + 68] = mem[_39950 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39950 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _48419 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48419] = 30
                                    mem[_48419 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50627 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50627 + idx + 68] = mem[_48419 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50627 + 68] = mem[_50627 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50627 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32390 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32390] = 30
                                    mem[_32390 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32576 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32576 + idx + 68] = mem[_32390 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32576 + 68] = mem[_32576 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32576 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33351 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33351] = 30
                                    mem[_33351 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33632 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33632 + idx + 68] = mem[_33351 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33632 + 68] = mem[_33632 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33632 + -mem[64] + 100
                                _32452 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32452] = 26
                                mem[_32452 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34918 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34918] = 30
                                    mem[_34918 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38211 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38211] = 30
                                    mem[_38211 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39957 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39957 + idx + 68] = mem[_38211 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39957 + 68] = mem[_39957 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39957 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48424 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48424] = 30
                                    mem[_48424 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50632 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50632 + idx + 68] = mem[_48424 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50632 + 68] = mem[_50632 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50632 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35451 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35451] = 30
                                mem[_35451 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _36212 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36212 + idx + 68] = mem[_35451 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36212 + 68] = mem[_36212 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36212 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39956 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39956] = 30
                                mem[_39956 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _42117 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42117 + idx + 68] = mem[_39956 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42117 + 68] = mem[_42117 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42117 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50631 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50631] = 30
                                mem[_50631 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52564 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52564 + idx + 68] = mem[_50631 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52564 + 68] = mem[_52564 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52564 + -mem[64] + 100
                            _31832 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31832] = 26
                            mem[_31832 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32732 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32732] = 26
                                mem[_32732 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32731 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32731] = 26
                                mem[_32731 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32263 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32263] = 26
                                    mem[_32263 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34683 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34683] = 30
                                            mem[_34683 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36699] = 30
                                            mem[_36699 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38197 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38197 + idx + 68] = mem[_36699 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38197 + 68] = mem[_38197 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38197 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45804 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45804] = 30
                                            mem[_45804 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48405 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48405 + idx + 68] = mem[_45804 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48405 + 68] = mem[_48405 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48405 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34915] = 30
                                        mem[_34915 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35441 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35441 + idx + 68] = mem[_34915 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35441 + 68] = mem[_35441 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35441 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38196 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38196] = 30
                                        mem[_38196 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39931 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39931 + idx + 68] = mem[_38196 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39931 + 68] = mem[_39931 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39931 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _48404 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48404] = 30
                                        mem[_48404 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50613 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50613 + idx + 68] = mem[_48404 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50613 + 68] = mem[_50613 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50613 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34914 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34914] = 30
                                        mem[_34914 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35438 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35438 + idx + 68] = mem[_34914 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35438 + 68] = mem[_35438 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35438 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38195 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38195] = 30
                                        mem[_38195 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39928 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39928 + idx + 68] = mem[_38195 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39928 + 68] = mem[_39928 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39928 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48403 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48403] = 30
                                        mem[_48403 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50610 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50610 + idx + 68] = mem[_48403 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50610 + 68] = mem[_50610 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50610 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35437 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35437] = 30
                                    mem[_35437 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _36195 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36195 + idx + 68] = mem[_35437 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36195 + 68] = mem[_36195 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36195 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39927 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39927] = 30
                                    mem[_39927 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42081 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42081 + idx + 68] = mem[_39927 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42081 + 68] = mem[_42081 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42081 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _50609 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50609] = 30
                                    mem[_50609 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52536 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52536 + idx + 68] = mem[_50609 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52536 + 68] = mem[_52536 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52536 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32389 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32389] = 30
                                    mem[_32389 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32573 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32573 + idx + 68] = mem[_32389 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32573 + 68] = mem[_32573 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32573 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33349 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33349] = 30
                                    mem[_33349 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33627 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33627 + idx + 68] = mem[_33349 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33627 + 68] = mem[_33627 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33627 + -mem[64] + 100
                                _32451 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32451] = 26
                                mem[_32451 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34916 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34916] = 30
                                        mem[_34916 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38204 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38204] = 30
                                        mem[_38204 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39941 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39941 + idx + 68] = mem[_38204 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39941 + 68] = mem[_39941 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39941 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48412 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48412] = 30
                                        mem[_48412 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50620 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50620 + idx + 68] = mem[_48412 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50620 + 68] = mem[_50620 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50620 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35445 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35445] = 30
                                    mem[_35445 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _36205 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36205 + idx + 68] = mem[_35445 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36205 + 68] = mem[_36205 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36205 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39940 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39940] = 30
                                    mem[_39940 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42097 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42097 + idx + 68] = mem[_39940 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42097 + 68] = mem[_42097 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42097 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _50619 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50619] = 30
                                    mem[_50619 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52548 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52548 + idx + 68] = mem[_50619 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52548 + 68] = mem[_52548 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52548 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35444 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35444] = 30
                                    mem[_35444 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36202 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36202 + idx + 68] = mem[_35444 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36202 + 68] = mem[_36202 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36202 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39939 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39939] = 30
                                    mem[_39939 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42094 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42094 + idx + 68] = mem[_39939 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42094 + 68] = mem[_42094 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42094 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50618] = 30
                                    mem[_50618 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52545 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52545 + idx + 68] = mem[_50618 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52545 + 68] = mem[_52545 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52545 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36201 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36201] = 30
                                mem[_36201 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _37367 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37367 + idx + 68] = mem[_36201 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37367 + 68] = mem[_37367 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37367 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42093 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42093] = 30
                                mem[_42093 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _44443 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44443 + idx + 68] = mem[_42093 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44443 + 68] = mem[_44443 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44443 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _52544 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52544] = 30
                                mem[_52544 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54531 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54531 + idx + 68] = mem[_52544 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54531 + 68] = mem[_54531 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54531 + -mem[64] + 100
                            _31827 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31827] = 26
                            mem[_31827 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32730 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32730] = 26
                                mem[_32730 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32729 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32729] = 26
                                mem[_32729 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        if not stor4[address(arg1)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32272 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32272] = 26
                                        mem[_32272 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34686 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34686] = 30
                                            mem[_34686 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36710 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36710] = 30
                                            mem[_36710 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38225 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38225 + idx + 68] = mem[_36710 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38225 + 68] = mem[_38225 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38225 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45838 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45838] = 30
                                            mem[_45838 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48453 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48453 + idx + 68] = mem[_45838 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48453 + 68] = mem[_48453 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48453 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34922 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34922] = 30
                                        mem[_34922 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35465 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35465 + idx + 68] = mem[_34922 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35465 + 68] = mem[_35465 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35465 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38224 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38224] = 30
                                        mem[_38224 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _39993 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39993 + idx + 68] = mem[_38224 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39993 + 68] = mem[_39993 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39993 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48452 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48452] = 30
                                        mem[_48452 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50663 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50663 + idx + 68] = mem[_48452 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50663 + 68] = mem[_50663 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50663 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32392 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32392] = 30
                                        mem[_32392 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32582 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32582 + idx + 68] = mem[_32392 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32582 + 68] = mem[_32582 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32582 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33355 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33355] = 30
                                        mem[_33355 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33642 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33642 + idx + 68] = mem[_33355 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33642 + 68] = mem[_33642 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33642 + -mem[64] + 100
                                    _32454 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32454] = 26
                                    mem[_32454 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34923 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34923] = 30
                                        mem[_34923 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38230 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38230] = 30
                                        mem[_38230 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40000 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40000 + idx + 68] = mem[_38230 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40000 + 68] = mem[_40000 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40000 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48457 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48457] = 30
                                        mem[_48457 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50668 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50668 + idx + 68] = mem[_48457 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50668 + 68] = mem[_50668 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50668 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35468 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35468] = 30
                                    mem[_35468 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36236 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36236 + idx + 68] = mem[_35468 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36236 + 68] = mem[_36236 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36236 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39999 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39999] = 30
                                    mem[_39999 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42173 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42173 + idx + 68] = mem[_39999 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42173 + 68] = mem[_42173 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42173 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50667 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50667] = 30
                                    mem[_50667 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52608 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52608 + idx + 68] = mem[_50667 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52608 + 68] = mem[_52608 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52608 + -mem[64] + 100
                                _31842 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31842] = 26
                                mem[_31842 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32736 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32736] = 26
                                    mem[_32736 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32735 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32735] = 26
                                    mem[_32735 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32269 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32269] = 26
                                        mem[_32269 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34685 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34685] = 30
                                                mem[_34685 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36707 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36707] = 30
                                                mem[_36707 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38216 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38216 + idx + 68] = mem[_36707 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38216 + 68] = mem[_38216 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38216 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45827 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45827] = 30
                                                mem[_45827 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48438 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48438 + idx + 68] = mem[_45827 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48438 + 68] = mem[_48438 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48438 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34920 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34920] = 30
                                            mem[_34920 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35458 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35458 + idx + 68] = mem[_34920 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35458 + 68] = mem[_35458 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35458 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38215 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38215] = 30
                                            mem[_38215 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39974 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39974 + idx + 68] = mem[_38215 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39974 + 68] = mem[_39974 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39974 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _48437 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48437] = 30
                                            mem[_48437 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50649 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50649 + idx + 68] = mem[_48437 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50649 + 68] = mem[_50649 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50649 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34919 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34919] = 30
                                            mem[_34919 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35455 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35455 + idx + 68] = mem[_34919 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35455 + 68] = mem[_35455 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35455 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38214 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38214] = 30
                                            mem[_38214 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _39971 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39971 + idx + 68] = mem[_38214 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39971 + 68] = mem[_39971 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39971 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48436] = 30
                                            mem[_48436 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50646 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50646 + idx + 68] = mem[_48436 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50646 + 68] = mem[_50646 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50646 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35454 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35454] = 30
                                        mem[_35454 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36219 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36219 + idx + 68] = mem[_35454 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36219 + 68] = mem[_36219 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36219 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39970 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39970] = 30
                                        mem[_39970 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42137 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42137 + idx + 68] = mem[_39970 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42137 + 68] = mem[_42137 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42137 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _50645 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50645] = 30
                                        mem[_50645 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52580 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52580 + idx + 68] = mem[_50645 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52580 + 68] = mem[_52580 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52580 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32391 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32391] = 30
                                        mem[_32391 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32579 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32579 + idx + 68] = mem[_32391 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32579 + 68] = mem[_32579 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32579 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33353 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33353] = 30
                                        mem[_33353 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33637 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33637 + idx + 68] = mem[_33353 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33637 + 68] = mem[_33637 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33637 + -mem[64] + 100
                                    _32453 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32453] = 26
                                    mem[_32453 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34921 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34921] = 30
                                            mem[_34921 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38223 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38223] = 30
                                            mem[_38223 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39984 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39984 + idx + 68] = mem[_38223 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39984 + 68] = mem[_39984 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39984 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48445 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48445] = 30
                                            mem[_48445 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50656 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50656 + idx + 68] = mem[_48445 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50656 + 68] = mem[_50656 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50656 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35462 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35462] = 30
                                        mem[_35462 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36229 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36229 + idx + 68] = mem[_35462 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36229 + 68] = mem[_36229 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36229 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39983 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39983] = 30
                                        mem[_39983 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42153 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42153 + idx + 68] = mem[_39983 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42153 + 68] = mem[_42153 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42153 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _50655 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50655] = 30
                                        mem[_50655 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52592 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52592 + idx + 68] = mem[_50655 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52592 + 68] = mem[_52592 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52592 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35461 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35461] = 30
                                        mem[_35461 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36226 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36226 + idx + 68] = mem[_35461 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36226 + 68] = mem[_36226 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36226 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39982] = 30
                                        mem[_39982 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42150 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42150 + idx + 68] = mem[_39982 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42150 + 68] = mem[_42150 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42150 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50654 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50654] = 30
                                        mem[_50654 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52589 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52589 + idx + 68] = mem[_50654 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52589 + 68] = mem[_52589 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52589 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36225 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36225] = 30
                                    mem[_36225 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37402 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37402 + idx + 68] = mem[_36225 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37402 + 68] = mem[_37402 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37402 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42149 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42149] = 30
                                    mem[_42149 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _44505 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44505 + idx + 68] = mem[_42149 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44505 + 68] = mem[_44505 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44505 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _52588 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52588] = 30
                                    mem[_52588 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54581 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54581 + idx + 68] = mem[_52588 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54581 + 68] = mem[_54581 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54581 + -mem[64] + 100
                                _31837 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31837] = 26
                                mem[_31837 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32734 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32734] = 26
                                    mem[_32734 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32733 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32733] = 26
                                    mem[_32733 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32278 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32278] = 26
                                        mem[_32278 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34688 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34688] = 30
                                            mem[_34688 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _36718 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36718] = 30
                                            mem[_36718 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _38244 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38244 + idx + 68] = mem[_36718 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38244 + 68] = mem[_38244 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38244 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40972 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40972] = 30
                                            mem[_40972 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _43272 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43272 + idx + 68] = mem[_40972 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43272 + 68] = mem[_43272 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43272 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _54638 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54638] = 30
                                            mem[_54638 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _56587 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_56587 + idx + 68] = mem[_54638 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_56587 + 68] = mem[_56587 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _56587 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34927 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34927] = 30
                                        mem[_34927 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35482 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35482 + idx + 68] = mem[_34927 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35482 + 68] = mem[_35482 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35482 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38243 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38243] = 30
                                        mem[_38243 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40036 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40036 + idx + 68] = mem[_38243 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40036 + 68] = mem[_40036 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40036 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43269 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43269] = 30
                                        mem[_43269 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _45875 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45875 + idx + 68] = mem[_43269 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45875 + 68] = mem[_45875 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45875 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _56586 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56586] = 30
                                        mem[_56586 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _58267 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_58267 + idx + 68] = mem[_56586 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_58267 + 68] = mem[_58267 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _58267 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32394 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32394] = 30
                                        mem[_32394 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32588 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32588 + idx + 68] = mem[_32394 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32588 + 68] = mem[_32588 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32588 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33359 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33359] = 30
                                        mem[_33359 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33652 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33652 + idx + 68] = mem[_33359 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33652 + 68] = mem[_33652 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33652 + -mem[64] + 100
                                    _32456 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32456] = 26
                                    mem[_32456 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34928 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34928] = 30
                                        mem[_34928 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38249 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38249] = 30
                                        mem[_38249 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40043 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40043 + idx + 68] = mem[_38249 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40043 + 68] = mem[_40043 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40043 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43275 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43275] = 30
                                        mem[_43275 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _45884 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45884 + idx + 68] = mem[_43275 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45884 + 68] = mem[_45884 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45884 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _56591 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56591] = 30
                                        mem[_56591 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _58272 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_58272 + idx + 68] = mem[_56591 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_58272 + 68] = mem[_58272 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _58272 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35485 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35485] = 30
                                    mem[_35485 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36260 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36260 + idx + 68] = mem[_35485 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36260 + 68] = mem[_36260 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36260 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40042 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40042] = 30
                                    mem[_40042 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _42225 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42225 + idx + 68] = mem[_40042 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42225 + 68] = mem[_42225 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42225 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45881 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45881] = 30
                                    mem[_45881 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _48518 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48518 + idx + 68] = mem[_45881 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48518 + 68] = mem[_48518 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48518 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _58271 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_58271] = 30
                                    mem[_58271 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _59475 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59475 + idx + 68] = mem[_58271 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59475 + 68] = mem[_59475 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59475 + -mem[64] + 100
                                _31852 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31852] = 26
                                mem[_31852 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32740 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32740] = 26
                                    mem[_32740 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32739 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32739] = 26
                                    mem[_32739 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32275 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32275] = 26
                                        mem[_32275 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34687 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34687] = 30
                                                mem[_34687 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _36715 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36715] = 30
                                                mem[_36715 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _38235 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38235 + idx + 68] = mem[_36715 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38235 + 68] = mem[_38235 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38235 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40963 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40963] = 30
                                                mem[_40963 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _43263 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_43263 + idx + 68] = mem[_40963 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_43263 + 68] = mem[_43263 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _43263 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _54626 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54626] = 30
                                                mem[_54626 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _56578 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56578 + idx + 68] = mem[_54626 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56578 + 68] = mem[_56578 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56578 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34925 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34925] = 30
                                            mem[_34925 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35475 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35475 + idx + 68] = mem[_34925 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35475 + 68] = mem[_35475 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35475 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38234 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38234] = 30
                                            mem[_38234 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40017 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40017 + idx + 68] = mem[_38234 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40017 + 68] = mem[_40017 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40017 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43260 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43260] = 30
                                            mem[_43260 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45854 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45854 + idx + 68] = mem[_43260 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45854 + 68] = mem[_45854 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45854 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _56577 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56577] = 30
                                            mem[_56577 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _58253 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58253 + idx + 68] = mem[_56577 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58253 + 68] = mem[_58253 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58253 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34924 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34924] = 30
                                            mem[_34924 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35472 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35472 + idx + 68] = mem[_34924 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35472 + 68] = mem[_35472 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35472 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38233 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38233] = 30
                                            mem[_38233 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40014 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40014 + idx + 68] = mem[_38233 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40014 + 68] = mem[_40014 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40014 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43257 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43257] = 30
                                            mem[_43257 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _45851 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45851 + idx + 68] = mem[_43257 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45851 + 68] = mem[_45851 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45851 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _56576 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56576] = 30
                                            mem[_56576 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _58250 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58250 + idx + 68] = mem[_56576 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58250 + 68] = mem[_58250 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58250 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35471 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35471] = 30
                                        mem[_35471 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36243 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36243 + idx + 68] = mem[_35471 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36243 + 68] = mem[_36243 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36243 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40013 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40013] = 30
                                        mem[_40013 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _42193 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42193 + idx + 68] = mem[_40013 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42193 + 68] = mem[_42193 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42193 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45848 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45848] = 30
                                        mem[_45848 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48476 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48476 + idx + 68] = mem[_45848 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48476 + 68] = mem[_48476 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48476 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _58249 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58249] = 30
                                        mem[_58249 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59447 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59447 + idx + 68] = mem[_58249 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59447 + 68] = mem[_59447 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59447 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32393 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32393] = 30
                                        mem[_32393 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32585 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32585 + idx + 68] = mem[_32393 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32585 + 68] = mem[_32585 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32585 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33357 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33357] = 30
                                        mem[_33357 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33647 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33647 + idx + 68] = mem[_33357 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33647 + 68] = mem[_33647 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33647 + -mem[64] + 100
                                    _32455 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32455] = 26
                                    mem[_32455 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34926 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34926] = 30
                                            mem[_34926 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38242 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38242] = 30
                                            mem[_38242 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40027 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40027 + idx + 68] = mem[_38242 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40027 + 68] = mem[_40027 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40027 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43266 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43266] = 30
                                            mem[_43266 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45866 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45866 + idx + 68] = mem[_43266 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45866 + 68] = mem[_45866 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45866 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56583 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56583] = 30
                                            mem[_56583 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _58260 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58260 + idx + 68] = mem[_56583 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58260 + 68] = mem[_58260 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58260 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35479 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35479] = 30
                                        mem[_35479 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36253 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36253 + idx + 68] = mem[_35479 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36253 + 68] = mem[_36253 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36253 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40026 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40026] = 30
                                        mem[_40026 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _42207 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42207 + idx + 68] = mem[_40026 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42207 + 68] = mem[_42207 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42207 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45863 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45863] = 30
                                        mem[_45863 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _48494 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48494 + idx + 68] = mem[_45863 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48494 + 68] = mem[_48494 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48494 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _58259 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58259] = 30
                                        mem[_58259 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59459 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59459 + idx + 68] = mem[_58259 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59459 + 68] = mem[_59459 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59459 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35478 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35478] = 30
                                        mem[_35478 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36250 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36250 + idx + 68] = mem[_35478 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36250 + 68] = mem[_36250 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36250 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40025 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40025] = 30
                                        mem[_40025 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _42204 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42204 + idx + 68] = mem[_40025 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42204 + 68] = mem[_42204 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42204 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45860 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45860] = 30
                                        mem[_45860 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48491 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48491 + idx + 68] = mem[_45860 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48491 + 68] = mem[_48491 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48491 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _58258 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58258] = 30
                                        mem[_58258 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59456 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59456 + idx + 68] = mem[_58258 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59456 + 68] = mem[_59456 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59456 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36249 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36249] = 30
                                    mem[_36249 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37437 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37437 + idx + 68] = mem[_36249 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37437 + 68] = mem[_37437 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37437 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _42203 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42203] = 30
                                    mem[_42203 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _44563 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44563 + idx + 68] = mem[_42203 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44563 + 68] = mem[_44563 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44563 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _48488 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48488] = 30
                                    mem[_48488 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _50704 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50704 + idx + 68] = mem[_48488 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50704 + 68] = mem[_50704 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50704 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _59455 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59455] = 30
                                    mem[_59455 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _60379 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_60379 + idx + 68] = mem[_59455 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_60379 + 68] = mem[_60379 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _60379 + -mem[64] + 100
                                _31847 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31847] = 26
                                mem[_31847 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32738 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32738] = 26
                                    mem[_32738 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32737 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32737] = 26
                                    mem[_32737 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        if not arg2:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32302 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32302] = 26
                                    mem[_32302 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34696 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34696] = 30
                                        mem[_34696 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36750 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36750] = 30
                                        mem[_36750 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38320 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38320 + idx + 68] = mem[_36750 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38320 + 68] = mem[_38320 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38320 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45997 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45997] = 30
                                        mem[_45997 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48684 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48684 + idx + 68] = mem[_45997 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48684 + 68] = mem[_48684 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48684 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34947 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34947] = 30
                                    mem[_34947 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35550 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35550 + idx + 68] = mem[_34947 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35550 + 68] = mem[_35550 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35550 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38319 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38319] = 30
                                    mem[_38319 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _40208 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40208 + idx + 68] = mem[_38319 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40208 + 68] = mem[_40208 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40208 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _48683 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48683] = 30
                                    mem[_48683 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50903 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50903 + idx + 68] = mem[_48683 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50903 + 68] = mem[_50903 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50903 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32402 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32402] = 30
                                    mem[_32402 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32612 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32612 + idx + 68] = mem[_32402 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32612 + 68] = mem[_32612 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32612 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33375 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33375] = 30
                                    mem[_33375 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33692 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33692 + idx + 68] = mem[_33375 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33692 + 68] = mem[_33692 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33692 + -mem[64] + 100
                                _32464 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32464] = 26
                                mem[_32464 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34948 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34948] = 30
                                    mem[_34948 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38325 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38325] = 30
                                    mem[_38325 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40215 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40215 + idx + 68] = mem[_38325 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40215 + 68] = mem[_40215 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40215 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48688 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48688] = 30
                                    mem[_48688 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50908 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50908 + idx + 68] = mem[_48688 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50908 + 68] = mem[_50908 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50908 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35553 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35553] = 30
                                mem[_35553 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _36356 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36356 + idx + 68] = mem[_35553 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36356 + 68] = mem[_36356 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36356 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40214 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40214] = 30
                                mem[_40214 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _42445 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42445 + idx + 68] = mem[_40214 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42445 + 68] = mem[_42445 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42445 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _50907 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50907] = 30
                                mem[_50907 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52846 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52846 + idx + 68] = mem[_50907 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52846 + 68] = mem[_52846 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52846 + -mem[64] + 100
                            _31892 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31892] = 26
                            mem[_31892 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32756 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32756] = 26
                                mem[_32756 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            else:
                                _32755 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32755] = 26
                                mem[_32755 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2
                            if 5 * arg2 / arg2 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 100 * 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32299 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32299] = 26
                                    mem[_32299 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34695 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34695] = 30
                                            mem[_34695 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36747 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36747] = 30
                                            mem[_36747 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38311 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38311 + idx + 68] = mem[_36747 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38311 + 68] = mem[_38311 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38311 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45986 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45986] = 30
                                            mem[_45986 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48669 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48669 + idx + 68] = mem[_45986 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48669 + 68] = mem[_48669 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48669 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34945 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34945] = 30
                                        mem[_34945 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _35543 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35543 + idx + 68] = mem[_34945 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35543 + 68] = mem[_35543 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35543 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38310 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38310] = 30
                                        mem[_38310 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40189 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40189 + idx + 68] = mem[_38310 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40189 + 68] = mem[_40189 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40189 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _48668 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48668] = 30
                                        mem[_48668 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50889 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50889 + idx + 68] = mem[_48668 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50889 + 68] = mem[_50889 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50889 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _34944 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34944] = 30
                                        mem[_34944 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35540 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35540 + idx + 68] = mem[_34944 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35540 + 68] = mem[_35540 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35540 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38309 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38309] = 30
                                        mem[_38309 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _40186 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40186 + idx + 68] = mem[_38309 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40186 + 68] = mem[_40186 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40186 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48667 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48667] = 30
                                        mem[_48667 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50886 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50886 + idx + 68] = mem[_48667 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50886 + 68] = mem[_50886 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50886 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35539 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35539] = 30
                                    mem[_35539 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _36339 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36339 + idx + 68] = mem[_35539 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36339 + 68] = mem[_36339 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36339 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40185 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40185] = 30
                                    mem[_40185 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42409 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42409 + idx + 68] = mem[_40185 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42409 + 68] = mem[_42409 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42409 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _50885 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50885] = 30
                                    mem[_50885 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52818 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52818 + idx + 68] = mem[_50885 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52818 + 68] = mem[_52818 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52818 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32401 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32401] = 30
                                    mem[_32401 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32609 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32609 + idx + 68] = mem[_32401 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32609 + 68] = mem[_32609 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32609 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33373 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33373] = 30
                                    mem[_33373 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33687 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33687 + idx + 68] = mem[_33373 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33687 + 68] = mem[_33687 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33687 + -mem[64] + 100
                                _32463 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32463] = 26
                                mem[_32463 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34946 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34946] = 30
                                        mem[_34946 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38318 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38318] = 30
                                        mem[_38318 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40199 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40199 + idx + 68] = mem[_38318 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40199 + 68] = mem[_40199 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40199 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48676 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48676] = 30
                                        mem[_48676 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50896 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50896 + idx + 68] = mem[_48676 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50896 + 68] = mem[_50896 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50896 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35547 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35547] = 30
                                    mem[_35547 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _36349 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36349 + idx + 68] = mem[_35547 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36349 + 68] = mem[_36349 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36349 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40198 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40198] = 30
                                    mem[_40198 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42425 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42425 + idx + 68] = mem[_40198 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42425 + 68] = mem[_42425 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42425 + -mem[64] + 100
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _50895 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50895] = 30
                                    mem[_50895 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52830 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52830 + idx + 68] = mem[_50895 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52830 + 68] = mem[_52830 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52830 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _35546 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35546] = 30
                                    mem[_35546 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36346 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36346 + idx + 68] = mem[_35546 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36346 + 68] = mem[_36346 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36346 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40197 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40197] = 30
                                    mem[_40197 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42422 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42422 + idx + 68] = mem[_40197 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42422 + 68] = mem[_42422 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42422 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50894 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50894] = 30
                                    mem[_50894 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52827 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52827 + idx + 68] = mem[_50894 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52827 + 68] = mem[_52827 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52827 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36345 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36345] = 30
                                mem[_36345 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _37577 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37577 + idx + 68] = mem[_36345 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37577 + 68] = mem[_37577 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37577 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42421 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42421] = 30
                                mem[_42421 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _44795 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44795 + idx + 68] = mem[_42421 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44795 + 68] = mem[_44795 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44795 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _52826 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52826] = 30
                                mem[_52826 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54799 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54799 + idx + 68] = mem[_52826 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54799 + 68] = mem[_54799 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54799 + -mem[64] + 100
                            _31887 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31887] = 26
                            mem[_31887 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 100 * 10^18:
                                _32754 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32754] = 26
                                mem[_32754 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                _32753 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32753] = 26
                                mem[_32753 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                        if 5 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -1 * 5 * arg2 / 100 * t / s
                            if totalFees + (5 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 5 * arg2 / 100
                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32284 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32284] = 26
                                        mem[_32284 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34690 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34690] = 30
                                            mem[_34690 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36726 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36726] = 30
                                            mem[_36726 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38263 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38263 + idx + 68] = mem[_36726 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38263 + 68] = mem[_38263 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38263 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45906 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45906] = 30
                                            mem[_45906 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48552 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48552 + idx + 68] = mem[_45906 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48552 + 68] = mem[_48552 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48552 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34932 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34932] = 30
                                        mem[_34932 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35499 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35499 + idx + 68] = mem[_34932 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35499 + 68] = mem[_35499 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35499 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38262 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38262] = 30
                                        mem[_38262 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _40079 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40079 + idx + 68] = mem[_38262 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40079 + 68] = mem[_40079 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40079 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48551 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48551] = 30
                                        mem[_48551 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50765 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50765 + idx + 68] = mem[_48551 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50765 + 68] = mem[_50765 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50765 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32396 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32396] = 30
                                        mem[_32396 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32594 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32594 + idx + 68] = mem[_32396 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32594 + 68] = mem[_32594 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32594 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33363 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33363] = 30
                                        mem[_33363 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33662 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33662 + idx + 68] = mem[_33363 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33662 + 68] = mem[_33662 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33662 + -mem[64] + 100
                                    _32458 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32458] = 26
                                    mem[_32458 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34933 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34933] = 30
                                        mem[_34933 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38268 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38268] = 30
                                        mem[_38268 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40086 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40086 + idx + 68] = mem[_38268 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40086 + 68] = mem[_40086 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40086 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48556 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48556] = 30
                                        mem[_48556 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50770 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50770 + idx + 68] = mem[_48556 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50770 + 68] = mem[_50770 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50770 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35502 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35502] = 30
                                    mem[_35502 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36284 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36284 + idx + 68] = mem[_35502 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36284 + 68] = mem[_36284 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36284 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40085 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40085] = 30
                                    mem[_40085 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42281 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42281 + idx + 68] = mem[_40085 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42281 + 68] = mem[_42281 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42281 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50769 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50769] = 30
                                    mem[_50769 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52705 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52705 + idx + 68] = mem[_50769 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52705 + 68] = mem[_52705 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52705 + -mem[64] + 100
                                _31862 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31862] = 26
                                mem[_31862 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32744 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32744] = 26
                                    mem[_32744 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32743 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32743] = 26
                                    mem[_32743 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32281 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32281] = 26
                                        mem[_32281 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34689 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34689] = 30
                                                mem[_34689 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36723 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36723] = 30
                                                mem[_36723 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38254 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38254 + idx + 68] = mem[_36723 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38254 + 68] = mem[_38254 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38254 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45895 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45895] = 30
                                                mem[_45895 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48537 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48537 + idx + 68] = mem[_45895 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48537 + 68] = mem[_48537 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48537 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34930 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34930] = 30
                                            mem[_34930 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35492 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35492 + idx + 68] = mem[_34930 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35492 + 68] = mem[_35492 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35492 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38253 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38253] = 30
                                            mem[_38253 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40060 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40060 + idx + 68] = mem[_38253 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40060 + 68] = mem[_40060 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40060 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _48536 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48536] = 30
                                            mem[_48536 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50751 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50751 + idx + 68] = mem[_48536 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50751 + 68] = mem[_50751 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50751 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34929 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34929] = 30
                                            mem[_34929 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35489 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35489 + idx + 68] = mem[_34929 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35489 + 68] = mem[_35489 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35489 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38252 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38252] = 30
                                            mem[_38252 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _40057 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40057 + idx + 68] = mem[_38252 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40057 + 68] = mem[_40057 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40057 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48535 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48535] = 30
                                            mem[_48535 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50748 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50748 + idx + 68] = mem[_48535 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50748 + 68] = mem[_50748 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50748 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35488 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35488] = 30
                                        mem[_35488 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36267 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36267 + idx + 68] = mem[_35488 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36267 + 68] = mem[_36267 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36267 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40056 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40056] = 30
                                        mem[_40056 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42245 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42245 + idx + 68] = mem[_40056 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42245 + 68] = mem[_42245 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42245 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _50747 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50747] = 30
                                        mem[_50747 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52677 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52677 + idx + 68] = mem[_50747 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52677 + 68] = mem[_52677 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52677 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32395 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32395] = 30
                                        mem[_32395 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32591 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32591 + idx + 68] = mem[_32395 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32591 + 68] = mem[_32591 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32591 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33361 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33361] = 30
                                        mem[_33361 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33657 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33657 + idx + 68] = mem[_33361 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33657 + 68] = mem[_33657 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33657 + -mem[64] + 100
                                    _32457 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32457] = 26
                                    mem[_32457 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34931 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34931] = 30
                                            mem[_34931 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38261 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38261] = 30
                                            mem[_38261 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40070 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40070 + idx + 68] = mem[_38261 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40070 + 68] = mem[_40070 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40070 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48544 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48544] = 30
                                            mem[_48544 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50758 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50758 + idx + 68] = mem[_48544 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50758 + 68] = mem[_50758 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50758 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35496 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35496] = 30
                                        mem[_35496 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36277 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36277 + idx + 68] = mem[_35496 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36277 + 68] = mem[_36277 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36277 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40069 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40069] = 30
                                        mem[_40069 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42261 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42261 + idx + 68] = mem[_40069 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42261 + 68] = mem[_42261 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42261 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _50757 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50757] = 30
                                        mem[_50757 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52689 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52689 + idx + 68] = mem[_50757 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52689 + 68] = mem[_52689 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52689 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35495 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35495] = 30
                                        mem[_35495 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36274 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36274 + idx + 68] = mem[_35495 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36274 + 68] = mem[_36274 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36274 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40068 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40068] = 30
                                        mem[_40068 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42258 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42258 + idx + 68] = mem[_40068 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42258 + 68] = mem[_42258 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42258 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50756 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50756] = 30
                                        mem[_50756 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52686 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52686 + idx + 68] = mem[_50756 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52686 + 68] = mem[_52686 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52686 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36273 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36273] = 30
                                    mem[_36273 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37472 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37472 + idx + 68] = mem[_36273 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37472 + 68] = mem[_37472 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37472 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42257 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42257] = 30
                                    mem[_42257 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _44619 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44619 + idx + 68] = mem[_42257 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44619 + 68] = mem[_44619 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44619 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _52685 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52685] = 30
                                    mem[_52685 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54665 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54665 + idx + 68] = mem[_52685 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54665 + 68] = mem[_54665 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54665 + -mem[64] + 100
                                _31857 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31857] = 26
                                mem[_31857 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32742 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32742] = 26
                                    mem[_32742 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32741 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32741] = 26
                                    mem[_32741 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            if not stor4[address(arg1)]:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32290 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32290] = 26
                                            mem[_32290 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34692 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34692] = 30
                                                mem[_34692 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36734 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36734] = 30
                                                mem[_36734 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38282 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38282 + idx + 68] = mem[_36734 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38282 + 68] = mem[_38282 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38282 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45929 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45929] = 30
                                                mem[_45929 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48585 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48585 + idx + 68] = mem[_45929 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48585 + 68] = mem[_48585 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48585 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34937] = 30
                                            mem[_34937 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35516 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35516 + idx + 68] = mem[_34937 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35516 + 68] = mem[_35516 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35516 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38281] = 30
                                            mem[_38281 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _40122 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40122 + idx + 68] = mem[_38281 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40122 + 68] = mem[_40122 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40122 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48584 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48584] = 30
                                            mem[_48584 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50801 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50801 + idx + 68] = mem[_48584 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50801 + 68] = mem[_50801 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50801 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32398 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32398] = 30
                                            mem[_32398 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32600 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32600 + idx + 68] = mem[_32398 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32600 + 68] = mem[_32600 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32600 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33367 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33367] = 30
                                            mem[_33367 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33672 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33672 + idx + 68] = mem[_33367 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33672 + 68] = mem[_33672 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33672 + -mem[64] + 100
                                        _32460 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32460] = 26
                                        mem[_32460 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34938 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34938] = 30
                                            mem[_34938 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38287 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38287] = 30
                                            mem[_38287 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40129 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40129 + idx + 68] = mem[_38287 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40129 + 68] = mem[_40129 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40129 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48589 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48589] = 30
                                            mem[_48589 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50806 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50806 + idx + 68] = mem[_48589 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50806 + 68] = mem[_50806 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50806 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35519 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35519] = 30
                                        mem[_35519 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36308 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36308 + idx + 68] = mem[_35519 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36308 + 68] = mem[_36308 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36308 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40128 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40128] = 30
                                        mem[_40128 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42337 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42337 + idx + 68] = mem[_40128 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42337 + 68] = mem[_42337 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42337 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50805 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50805] = 30
                                        mem[_50805 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52749 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52749 + idx + 68] = mem[_50805 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52749 + 68] = mem[_52749 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52749 + -mem[64] + 100
                                    _31872 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31872] = 26
                                    mem[_31872 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32748 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32748] = 26
                                        mem[_32748 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32747 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32747] = 26
                                        mem[_32747 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32287 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32287] = 26
                                            mem[_32287 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34691 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34691] = 30
                                                    mem[_34691 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36731 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36731] = 30
                                                    mem[_36731 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38273 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38273 + idx + 68] = mem[_36731 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38273 + 68] = mem[_38273 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38273 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _45918 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45918] = 30
                                                    mem[_45918 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48570 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48570 + idx + 68] = mem[_45918 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48570 + 68] = mem[_48570 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48570 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34935 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34935] = 30
                                                mem[_34935 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35509 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35509 + idx + 68] = mem[_34935 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35509 + 68] = mem[_35509 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35509 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38272 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38272] = 30
                                                mem[_38272 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40103 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40103 + idx + 68] = mem[_38272 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40103 + 68] = mem[_40103 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40103 + -mem[64] + 100
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _48569 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48569] = 30
                                                mem[_48569 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50787 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50787 + idx + 68] = mem[_48569 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50787 + 68] = mem[_50787 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50787 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34934 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34934] = 30
                                                mem[_34934 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35506 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35506 + idx + 68] = mem[_34934 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35506 + 68] = mem[_35506 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35506 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38271 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38271] = 30
                                                mem[_38271 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _40100 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40100 + idx + 68] = mem[_38271 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40100 + 68] = mem[_40100 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40100 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _48568 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48568] = 30
                                                mem[_48568 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50784 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50784 + idx + 68] = mem[_48568 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50784 + 68] = mem[_50784 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50784 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35505 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35505] = 30
                                            mem[_35505 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36291 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36291 + idx + 68] = mem[_35505 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36291 + 68] = mem[_36291 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36291 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40099 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40099] = 30
                                            mem[_40099 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42301 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42301 + idx + 68] = mem[_40099 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42301 + 68] = mem[_42301 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42301 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _50783 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50783] = 30
                                            mem[_50783 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52721 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52721 + idx + 68] = mem[_50783 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52721 + 68] = mem[_52721 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52721 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32397 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32397] = 30
                                            mem[_32397 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32597 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32597 + idx + 68] = mem[_32397 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32597 + 68] = mem[_32597 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32597 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33365 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33365] = 30
                                            mem[_33365 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33667 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33667 + idx + 68] = mem[_33365 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33667 + 68] = mem[_33667 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33667 + -mem[64] + 100
                                        _32459 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32459] = 26
                                        mem[_32459 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34936 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34936] = 30
                                                mem[_34936 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38280 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38280] = 30
                                                mem[_38280 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40113 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40113 + idx + 68] = mem[_38280 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40113 + 68] = mem[_40113 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40113 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48577 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48577] = 30
                                                mem[_48577 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50794 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50794 + idx + 68] = mem[_48577 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50794 + 68] = mem[_50794 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50794 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35513 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35513] = 30
                                            mem[_35513 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36301 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36301 + idx + 68] = mem[_35513 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36301 + 68] = mem[_36301 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36301 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40112] = 30
                                            mem[_40112 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42317 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42317 + idx + 68] = mem[_40112 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42317 + 68] = mem[_42317 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42317 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _50793 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50793] = 30
                                            mem[_50793 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52733 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52733 + idx + 68] = mem[_50793 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52733 + 68] = mem[_52733 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52733 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35512 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35512] = 30
                                            mem[_35512 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36298 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36298 + idx + 68] = mem[_35512 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36298 + 68] = mem[_36298 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36298 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40111 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40111] = 30
                                            mem[_40111 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42314 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42314 + idx + 68] = mem[_40111 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42314 + 68] = mem[_42314 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42314 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _50792 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50792] = 30
                                            mem[_50792 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52730 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52730 + idx + 68] = mem[_50792 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52730 + 68] = mem[_52730 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52730 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36297 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36297] = 30
                                        mem[_36297 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37507 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37507 + idx + 68] = mem[_36297 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37507 + 68] = mem[_37507 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37507 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42313 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42313] = 30
                                        mem[_42313 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _44681 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44681 + idx + 68] = mem[_42313 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44681 + 68] = mem[_44681 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44681 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _52729 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52729] = 30
                                        mem[_52729 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54715 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54715 + idx + 68] = mem[_52729 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54715 + 68] = mem[_54715 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54715 + -mem[64] + 100
                                    _31867 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31867] = 26
                                    mem[_31867 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32746 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32746] = 26
                                        mem[_32746 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32745 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32745] = 26
                                        mem[_32745 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            else:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32296 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32296] = 26
                                            mem[_32296 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34694 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34694] = 30
                                                mem[_34694 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _36742 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36742] = 30
                                                mem[_36742 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _38301 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38301 + idx + 68] = mem[_36742 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38301 + 68] = mem[_38301 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38301 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41034 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41034] = 30
                                                mem[_41034 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _43329 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_43329 + idx + 68] = mem[_41034 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_43329 + 68] = mem[_43329 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _43329 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _54772 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54772] = 30
                                                mem[_54772 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _56706 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56706 + idx + 68] = mem[_54772 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56706 + 68] = mem[_56706 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56706 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34942 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34942] = 30
                                            mem[_34942 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35533 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35533 + idx + 68] = mem[_34942 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35533 + 68] = mem[_35533 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35533 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38300 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38300] = 30
                                            mem[_38300 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40165 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40165 + idx + 68] = mem[_38300 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40165 + 68] = mem[_40165 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40165 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43326 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43326] = 30
                                            mem[_43326 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _45966 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45966 + idx + 68] = mem[_43326 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45966 + 68] = mem[_45966 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45966 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _56705 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56705] = 30
                                            mem[_56705 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58377 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58377 + idx + 68] = mem[_56705 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58377 + 68] = mem[_58377 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58377 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32400 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32400] = 30
                                            mem[_32400 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32606 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32606 + idx + 68] = mem[_32400 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32606 + 68] = mem[_32606 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32606 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33371 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33371] = 30
                                            mem[_33371 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33682 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33682 + idx + 68] = mem[_33371 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33682 + 68] = mem[_33682 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33682 + -mem[64] + 100
                                        _32462 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32462] = 26
                                        mem[_32462 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34943 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34943] = 30
                                            mem[_34943 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38306 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38306] = 30
                                            mem[_38306 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40172 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40172 + idx + 68] = mem[_38306 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40172 + 68] = mem[_40172 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40172 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43332 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43332] = 30
                                            mem[_43332 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _45975 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45975 + idx + 68] = mem[_43332 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45975 + 68] = mem[_45975 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45975 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56710 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56710] = 30
                                            mem[_56710 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58382 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58382 + idx + 68] = mem[_56710 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58382 + 68] = mem[_58382 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58382 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35536 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35536] = 30
                                        mem[_35536 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36332 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36332 + idx + 68] = mem[_35536 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36332 + 68] = mem[_36332 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36332 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40171 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40171] = 30
                                        mem[_40171 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _42389 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42389 + idx + 68] = mem[_40171 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42389 + 68] = mem[_42389 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42389 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45972 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45972] = 30
                                        mem[_45972 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48650 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48650 + idx + 68] = mem[_45972 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48650 + 68] = mem[_48650 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48650 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _58381 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58381] = 30
                                        mem[_58381 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _59559 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59559 + idx + 68] = mem[_58381 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59559 + 68] = mem[_59559 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59559 + -mem[64] + 100
                                    _31882 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31882] = 26
                                    mem[_31882 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32752 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32752] = 26
                                        mem[_32752 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32751 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32751] = 26
                                        mem[_32751 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32293 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32293] = 26
                                            mem[_32293 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34693 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34693] = 30
                                                    mem[_34693 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _36739 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36739] = 30
                                                    mem[_36739 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _38292 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38292 + idx + 68] = mem[_36739 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38292 + 68] = mem[_38292 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38292 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _41025 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41025] = 30
                                                    mem[_41025 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _43320 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_43320 + idx + 68] = mem[_41025 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_43320 + 68] = mem[_43320 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _43320 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _54760 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54760] = 30
                                                    mem[_54760 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _56697 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56697 + idx + 68] = mem[_54760 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56697 + 68] = mem[_56697 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56697 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34940 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34940] = 30
                                                mem[_34940 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35526 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35526 + idx + 68] = mem[_34940 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35526 + 68] = mem[_35526 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35526 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38291 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38291] = 30
                                                mem[_38291 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40146 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40146 + idx + 68] = mem[_38291 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40146 + 68] = mem[_40146 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40146 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43317 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43317] = 30
                                                mem[_43317 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _45945 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_45945 + idx + 68] = mem[_43317 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_45945 + 68] = mem[_45945 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _45945 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _56696 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56696] = 30
                                                mem[_56696 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58363 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58363 + idx + 68] = mem[_56696 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58363 + 68] = mem[_58363 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58363 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34939 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34939] = 30
                                                mem[_34939 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35523 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35523 + idx + 68] = mem[_34939 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35523 + 68] = mem[_35523 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35523 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38290 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38290] = 30
                                                mem[_38290 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40143 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40143 + idx + 68] = mem[_38290 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40143 + 68] = mem[_40143 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40143 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43314 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43314] = 30
                                                mem[_43314 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _45942 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_45942 + idx + 68] = mem[_43314 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_45942 + 68] = mem[_45942 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _45942 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _56695 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56695] = 30
                                                mem[_56695 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58360 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58360 + idx + 68] = mem[_56695 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58360 + 68] = mem[_58360 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58360 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35522 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35522] = 30
                                            mem[_35522 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36315 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36315 + idx + 68] = mem[_35522 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36315 + 68] = mem[_36315 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36315 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40142 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40142] = 30
                                            mem[_40142 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42357 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42357 + idx + 68] = mem[_40142 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42357 + 68] = mem[_42357 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42357 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45939 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45939] = 30
                                            mem[_45939 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48608 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48608 + idx + 68] = mem[_45939 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48608 + 68] = mem[_48608 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48608 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _58359 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58359] = 30
                                            mem[_58359 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59531 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59531 + idx + 68] = mem[_58359 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59531 + 68] = mem[_59531 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59531 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32399 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32399] = 30
                                            mem[_32399 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32603 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32603 + idx + 68] = mem[_32399 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32603 + 68] = mem[_32603 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32603 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33369 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33369] = 30
                                            mem[_33369 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33677 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33677 + idx + 68] = mem[_33369 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33677 + 68] = mem[_33677 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33677 + -mem[64] + 100
                                        _32461 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32461] = 26
                                        mem[_32461 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34941 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34941] = 30
                                                mem[_34941 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38299 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38299] = 30
                                                mem[_38299 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40156 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40156 + idx + 68] = mem[_38299 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40156 + 68] = mem[_40156 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40156 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43323 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43323] = 30
                                                mem[_43323 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _45957 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_45957 + idx + 68] = mem[_43323 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_45957 + 68] = mem[_45957 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _45957 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56702 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56702] = 30
                                                mem[_56702 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58370 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58370 + idx + 68] = mem[_56702 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58370 + 68] = mem[_58370 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58370 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35530 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35530] = 30
                                            mem[_35530 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36325 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36325 + idx + 68] = mem[_35530 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36325 + 68] = mem[_36325 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36325 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40155 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40155] = 30
                                            mem[_40155 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42371 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42371 + idx + 68] = mem[_40155 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42371 + 68] = mem[_42371 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42371 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45954 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45954] = 30
                                            mem[_45954 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _48626 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48626 + idx + 68] = mem[_45954 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48626 + 68] = mem[_48626 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48626 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _58369 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58369] = 30
                                            mem[_58369 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59543 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59543 + idx + 68] = mem[_58369 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59543 + 68] = mem[_59543 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59543 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35529 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35529] = 30
                                            mem[_35529 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36322 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36322 + idx + 68] = mem[_35529 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36322 + 68] = mem[_36322 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36322 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40154 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40154] = 30
                                            mem[_40154 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42368 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42368 + idx + 68] = mem[_40154 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42368 + 68] = mem[_42368 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42368 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45951 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45951] = 30
                                            mem[_45951 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48623 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48623 + idx + 68] = mem[_45951 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48623 + 68] = mem[_48623 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48623 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _58368 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58368] = 30
                                            mem[_58368 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59540 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59540 + idx + 68] = mem[_58368 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59540 + 68] = mem[_59540 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59540 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36321 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36321] = 30
                                        mem[_36321 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37542 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37542 + idx + 68] = mem[_36321 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37542 + 68] = mem[_37542 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37542 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _42367 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42367] = 30
                                        mem[_42367 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _44739 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44739 + idx + 68] = mem[_42367 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44739 + 68] = mem[_44739 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44739 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _48620 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48620] = 30
                                        mem[_48620 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _50842 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50842 + idx + 68] = mem[_48620 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50842 + 68] = mem[_50842 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50842 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _59539 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59539] = 30
                                        mem[_59539 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _60437 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60437 + idx + 68] = mem[_59539 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60437 + 68] = mem[_60437 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60437 + -mem[64] + 100
                                    _31877 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31877] = 26
                                    mem[_31877 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32750 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32750] = 26
                                        mem[_32750 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32749 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32749] = 26
                                        mem[_32749 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
            else:
                mem[0] = arg1
                mem[32] = 4
                if stor4[address(arg1)]:
                    if not arg2:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 100 * 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32350 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32350] = 26
                                mem[_32350 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34712 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34712] = 30
                                    mem[_34712 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36814 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36814] = 30
                                    mem[_36814 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _38472 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38472 + idx + 68] = mem[_36814 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38472 + 68] = mem[_38472 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38472 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49914 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49914] = 30
                                    mem[_49914 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _51824 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51824 + idx + 68] = mem[_49914 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51824 + 68] = mem[_51824 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51824 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34987 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34987] = 30
                                mem[_34987 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _35686 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35686 + idx + 68] = mem[_34987 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35686 + 68] = mem[_35686 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35686 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38471 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38471] = 30
                                mem[_38471 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _40552 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_40552 + idx + 68] = mem[_38471 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_40552 + 68] = mem[_40552 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _40552 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _51823 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51823] = 30
                                mem[_51823 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _53821 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53821 + idx + 68] = mem[_51823 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53821 + 68] = mem[_53821 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53821 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32418 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32418] = 30
                                mem[_32418 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32660 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32660 + idx + 68] = mem[_32418 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32660 + 68] = mem[_32660 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32660 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33407 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33407] = 30
                                mem[_33407 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33772 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33772 + idx + 68] = mem[_33407 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33772 + 68] = mem[_33772 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33772 + -mem[64] + 100
                            _32480 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32480] = 26
                            mem[_32480 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34988 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34988] = 30
                                mem[_34988 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38477 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38477] = 30
                                mem[_38477 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _40559 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_40559 + idx + 68] = mem[_38477 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_40559 + 68] = mem[_40559 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _40559 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51828 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51828] = 30
                                mem[_51828 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _53826 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53826 + idx + 68] = mem[_51828 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53826 + 68] = mem[_53826 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53826 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35689 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35689] = 30
                            mem[_35689 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 100 * 10^18:
                                _36548 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36548 + idx + 68] = mem[_35689 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36548 + 68] = mem[_36548 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36548 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _40558 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_40558] = 30
                            mem[_40558 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _42885 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42885 + idx + 68] = mem[_40558 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42885 + 68] = mem[_42885 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42885 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                            _53825 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53825] = 30
                            mem[_53825 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _55853 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55853 + idx + 68] = mem[_53825 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55853 + 68] = mem[_55853 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55853 + -mem[64] + 100
                        _31972 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31972] = 26
                        mem[_31972 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 100 * 10^18:
                            _32788 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32788] = 26
                            mem[_32788 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                        else:
                            _32787 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32787] = 26
                            mem[_32787 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        require arg2
                        if 5 * arg2 / arg2 != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 5 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 100 * 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32347 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32347] = 26
                                mem[_32347 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 5 * arg2 / 100:
                                        _34711 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34711] = 30
                                        mem[_34711 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36811 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36811] = 30
                                        mem[_36811 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38463 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38463 + idx + 68] = mem[_36811 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38463 + 68] = mem[_38463 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38463 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49902 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49902] = 30
                                        mem[_49902 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _51815 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51815 + idx + 68] = mem[_49902 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51815 + 68] = mem[_51815 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51815 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34985 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34985] = 30
                                    mem[_34985 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        _35679 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35679 + idx + 68] = mem[_34985 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35679 + 68] = mem[_35679 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35679 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38462 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38462] = 30
                                    mem[_38462 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40533 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40533 + idx + 68] = mem[_38462 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40533 + 68] = mem[_40533 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40533 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    _51814 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51814] = 30
                                    mem[_51814 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53807 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53807 + idx + 68] = mem[_51814 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53807 + 68] = mem[_53807 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53807 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    _34984 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34984] = 30
                                    mem[_34984 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _35676 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35676 + idx + 68] = mem[_34984 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35676 + 68] = mem[_35676 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35676 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38461 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38461] = 30
                                    mem[_38461 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _40530 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40530 + idx + 68] = mem[_38461 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40530 + 68] = mem[_40530 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40530 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _51813 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51813] = 30
                                    mem[_51813 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53804 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53804 + idx + 68] = mem[_51813 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53804 + 68] = mem[_53804 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53804 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35675 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35675] = 30
                                mem[_35675 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                    _36531 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36531 + idx + 68] = mem[_35675 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36531 + 68] = mem[_36531 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36531 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40529 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40529] = 30
                                mem[_40529 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _42849 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42849 + idx + 68] = mem[_40529 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42849 + 68] = mem[_42849 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42849 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                _53803 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53803] = 30
                                mem[_53803 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _55825 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55825 + idx + 68] = mem[_53803 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55825 + 68] = mem[_55825 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55825 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32417 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32417] = 30
                                mem[_32417 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32657 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32657 + idx + 68] = mem[_32417 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32657 + 68] = mem[_32657 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32657 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33405 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33405] = 30
                                mem[_33405 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33767 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33767 + idx + 68] = mem[_33405 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33767 + 68] = mem[_33767 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33767 + -mem[64] + 100
                            _32479 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32479] = 26
                            mem[_32479 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    _34986 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34986] = 30
                                    mem[_34986 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38470 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38470] = 30
                                    mem[_38470 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40543 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40543 + idx + 68] = mem[_38470 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40543 + 68] = mem[_40543 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40543 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51820 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51820] = 30
                                    mem[_51820 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53814 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53814 + idx + 68] = mem[_51820 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53814 + 68] = mem[_53814 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53814 + -mem[64] + 100
                                require 5 * arg2 / 100
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35683 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35683] = 30
                                mem[_35683 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                    _36541 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36541 + idx + 68] = mem[_35683 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36541 + 68] = mem[_36541 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36541 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40542 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40542] = 30
                                mem[_40542 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _42865 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42865 + idx + 68] = mem[_40542 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42865 + 68] = mem[_42865 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42865 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                _53813 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53813] = 30
                                mem[_53813 + 32] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _55837 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55837 + idx + 68] = mem[_53813 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55837 + 68] = mem[_55837 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55837 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 5 * arg2 / 100:
                                _35682 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35682] = 30
                                mem[_35682 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 100 * 10^18:
                                    _36538 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36538 + idx + 68] = mem[_35682 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36538 + 68] = mem[_36538 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36538 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40541 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40541] = 30
                                mem[_40541 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                    _42862 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42862 + idx + 68] = mem[_40541 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42862 + 68] = mem[_42862 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42862 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                _53812 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53812] = 30
                                mem[_53812 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _55834 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55834 + idx + 68] = mem[_53812 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55834 + 68] = mem[_55834 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55834 + -mem[64] + 100
                            require 5 * arg2 / 100
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36537 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36537] = 30
                            mem[_36537 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                _37857 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37857 + idx + 68] = mem[_36537 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37857 + 68] = mem[_37857 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37857 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _42861 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42861] = 30
                            mem[_42861 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                _45271 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_45271 + idx + 68] = mem[_42861 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_45271 + 68] = mem[_45271 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _45271 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                            _55833 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_55833] = 30
                            mem[_55833 + 32] = 'SafeMath: subtraction overflow'
                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _57562 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_57562 + idx + 68] = mem[_55833 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_57562 + 68] = mem[_57562 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _57562 + -mem[64] + 100
                        _31967 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31967] = 26
                        mem[_31967 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 100 * 10^18:
                            _32786 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32786] = 26
                            mem[_32786 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                            else:
                                require arg2
                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                        else:
                            _32785 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32785] = 26
                            mem[_32785 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 5 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                    if 5 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 5 * arg2 / 100:
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                    if 5 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                        if totalFees + (5 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 5 * arg2 / 100
                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                else:
                    if stor4[address(msg.sender)]:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32308 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32308] = 26
                                        mem[_32308 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34698 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34698] = 30
                                            mem[_34698 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36758 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36758] = 30
                                            mem[_36758 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38339 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38339 + idx + 68] = mem[_36758 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38339 + 68] = mem[_38339 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38339 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _46020 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46020] = 30
                                            mem[_46020 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48717 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48717 + idx + 68] = mem[_46020 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48717 + 68] = mem[_48717 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48717 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34952 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34952] = 30
                                        mem[_34952 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35567 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35567 + idx + 68] = mem[_34952 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35567 + 68] = mem[_35567 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35567 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38338 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38338] = 30
                                        mem[_38338 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _40251 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40251 + idx + 68] = mem[_38338 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40251 + 68] = mem[_40251 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40251 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48716 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48716] = 30
                                        mem[_48716 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50939 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50939 + idx + 68] = mem[_48716 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50939 + 68] = mem[_50939 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50939 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32404 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32404] = 30
                                        mem[_32404 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32618 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32618 + idx + 68] = mem[_32404 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32618 + 68] = mem[_32618 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32618 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33379 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33379] = 30
                                        mem[_33379 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33702 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33702 + idx + 68] = mem[_33379 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33702 + 68] = mem[_33702 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33702 + -mem[64] + 100
                                    _32466 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32466] = 26
                                    mem[_32466 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34953 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34953] = 30
                                        mem[_34953 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38344 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38344] = 30
                                        mem[_38344 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40258 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40258 + idx + 68] = mem[_38344 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40258 + 68] = mem[_40258 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40258 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48721 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48721] = 30
                                        mem[_48721 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50944 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50944 + idx + 68] = mem[_48721 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50944 + 68] = mem[_50944 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50944 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35570 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35570] = 30
                                    mem[_35570 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36380 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36380 + idx + 68] = mem[_35570 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36380 + 68] = mem[_36380 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36380 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40257 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40257] = 30
                                    mem[_40257 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42501 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42501 + idx + 68] = mem[_40257 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42501 + 68] = mem[_42501 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42501 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _50943 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50943] = 30
                                    mem[_50943 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52890 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52890 + idx + 68] = mem[_50943 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52890 + 68] = mem[_52890 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52890 + -mem[64] + 100
                                _31902 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31902] = 26
                                mem[_31902 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32760 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32760] = 26
                                    mem[_32760 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32759 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32759] = 26
                                    mem[_32759 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32305 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32305] = 26
                                        mem[_32305 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34697 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34697] = 30
                                                mem[_34697 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36755 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36755] = 30
                                                mem[_36755 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38330 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38330 + idx + 68] = mem[_36755 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38330 + 68] = mem[_38330 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38330 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46009 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46009] = 30
                                                mem[_46009 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48702 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48702 + idx + 68] = mem[_46009 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48702 + 68] = mem[_48702 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48702 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34950 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34950] = 30
                                            mem[_34950 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35560 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35560 + idx + 68] = mem[_34950 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35560 + 68] = mem[_35560 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35560 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38329 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38329] = 30
                                            mem[_38329 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40232 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40232 + idx + 68] = mem[_38329 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40232 + 68] = mem[_40232 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40232 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _48701 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48701] = 30
                                            mem[_48701 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50925 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50925 + idx + 68] = mem[_48701 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50925 + 68] = mem[_50925 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50925 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34949 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34949] = 30
                                            mem[_34949 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35557 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35557 + idx + 68] = mem[_34949 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35557 + 68] = mem[_35557 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35557 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38328 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38328] = 30
                                            mem[_38328 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _40229 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40229 + idx + 68] = mem[_38328 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40229 + 68] = mem[_40229 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40229 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48700 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48700] = 30
                                            mem[_48700 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50922 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50922 + idx + 68] = mem[_48700 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50922 + 68] = mem[_50922 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50922 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35556 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35556] = 30
                                        mem[_35556 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36363 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36363 + idx + 68] = mem[_35556 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36363 + 68] = mem[_36363 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36363 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40228 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40228] = 30
                                        mem[_40228 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42465 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42465 + idx + 68] = mem[_40228 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42465 + 68] = mem[_42465 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42465 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _50921 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50921] = 30
                                        mem[_50921 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52862 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52862 + idx + 68] = mem[_50921 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52862 + 68] = mem[_52862 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52862 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32403 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32403] = 30
                                        mem[_32403 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32615 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32615 + idx + 68] = mem[_32403 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32615 + 68] = mem[_32615 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32615 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33377 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33377] = 30
                                        mem[_33377 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33697 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33697 + idx + 68] = mem[_33377 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33697 + 68] = mem[_33697 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33697 + -mem[64] + 100
                                    _32465 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32465] = 26
                                    mem[_32465 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34951 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34951] = 30
                                            mem[_34951 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38337 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38337] = 30
                                            mem[_38337 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40242 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40242 + idx + 68] = mem[_38337 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40242 + 68] = mem[_40242 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40242 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48709 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48709] = 30
                                            mem[_48709 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50932 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50932 + idx + 68] = mem[_48709 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50932 + 68] = mem[_50932 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50932 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35564 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35564] = 30
                                        mem[_35564 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36373 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36373 + idx + 68] = mem[_35564 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36373 + 68] = mem[_36373 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36373 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40241 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40241] = 30
                                        mem[_40241 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42481 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42481 + idx + 68] = mem[_40241 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42481 + 68] = mem[_42481 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42481 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _50931 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50931] = 30
                                        mem[_50931 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52874 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52874 + idx + 68] = mem[_50931 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52874 + 68] = mem[_52874 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52874 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35563 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35563] = 30
                                        mem[_35563 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36370 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36370 + idx + 68] = mem[_35563 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36370 + 68] = mem[_36370 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36370 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40240 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40240] = 30
                                        mem[_40240 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42478 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42478 + idx + 68] = mem[_40240 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42478 + 68] = mem[_42478 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42478 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50930 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50930] = 30
                                        mem[_50930 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52871 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52871 + idx + 68] = mem[_50930 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52871 + 68] = mem[_52871 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52871 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36369 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36369] = 30
                                    mem[_36369 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37612 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37612 + idx + 68] = mem[_36369 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37612 + 68] = mem[_37612 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37612 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42477 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42477] = 30
                                    mem[_42477 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _44857 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44857 + idx + 68] = mem[_42477 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44857 + 68] = mem[_44857 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44857 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _52870 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52870] = 30
                                    mem[_52870 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54849 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54849 + idx + 68] = mem[_52870 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54849 + 68] = mem[_54849 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54849 + -mem[64] + 100
                                _31897 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31897] = 26
                                mem[_31897 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32758 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32758] = 26
                                    mem[_32758 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32757 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32757] = 26
                                    mem[_32757 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            if not stor4[address(arg1)]:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32314 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32314] = 26
                                            mem[_32314 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34700 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34700] = 30
                                                mem[_34700 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36766 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36766] = 30
                                                mem[_36766 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38358 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38358 + idx + 68] = mem[_36766 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38358 + 68] = mem[_38358 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38358 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46043 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46043] = 30
                                                mem[_46043 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48750 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48750 + idx + 68] = mem[_46043 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48750 + 68] = mem[_48750 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48750 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34957 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34957] = 30
                                            mem[_34957 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35584 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35584 + idx + 68] = mem[_34957 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35584 + 68] = mem[_35584 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35584 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38357 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38357] = 30
                                            mem[_38357 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _40294 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40294 + idx + 68] = mem[_38357 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40294 + 68] = mem[_40294 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40294 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48749 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48749] = 30
                                            mem[_48749 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50975 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50975 + idx + 68] = mem[_48749 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50975 + 68] = mem[_50975 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50975 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32406 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32406] = 30
                                            mem[_32406 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32624 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32624 + idx + 68] = mem[_32406 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32624 + 68] = mem[_32624 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32624 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33383 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33383] = 30
                                            mem[_33383 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33712 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33712 + idx + 68] = mem[_33383 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33712 + 68] = mem[_33712 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33712 + -mem[64] + 100
                                        _32468 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32468] = 26
                                        mem[_32468 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34958 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34958] = 30
                                            mem[_34958 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38363 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38363] = 30
                                            mem[_38363 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40301 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40301 + idx + 68] = mem[_38363 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40301 + 68] = mem[_40301 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40301 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48754 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48754] = 30
                                            mem[_48754 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50980 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50980 + idx + 68] = mem[_48754 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50980 + 68] = mem[_50980 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50980 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35587 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35587] = 30
                                        mem[_35587 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36404 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36404 + idx + 68] = mem[_35587 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36404 + 68] = mem[_36404 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36404 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40300 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40300] = 30
                                        mem[_40300 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42557 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42557 + idx + 68] = mem[_40300 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42557 + 68] = mem[_42557 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42557 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _50979 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50979] = 30
                                        mem[_50979 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52934 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52934 + idx + 68] = mem[_50979 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52934 + 68] = mem[_52934 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52934 + -mem[64] + 100
                                    _31912 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31912] = 26
                                    mem[_31912 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32764 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32764] = 26
                                        mem[_32764 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32763 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32763] = 26
                                        mem[_32763 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32311 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32311] = 26
                                            mem[_32311 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34699 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34699] = 30
                                                    mem[_34699 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36763 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36763] = 30
                                                    mem[_36763 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38349 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38349 + idx + 68] = mem[_36763 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38349 + 68] = mem[_38349 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38349 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _46032 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46032] = 30
                                                    mem[_46032 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48735 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48735 + idx + 68] = mem[_46032 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48735 + 68] = mem[_48735 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48735 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34955 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34955] = 30
                                                mem[_34955 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35577 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35577 + idx + 68] = mem[_34955 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35577 + 68] = mem[_35577 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35577 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38348 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38348] = 30
                                                mem[_38348 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40275 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40275 + idx + 68] = mem[_38348 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40275 + 68] = mem[_40275 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40275 + -mem[64] + 100
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _48734 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48734] = 30
                                                mem[_48734 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50961 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50961 + idx + 68] = mem[_48734 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50961 + 68] = mem[_50961 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50961 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34954 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34954] = 30
                                                mem[_34954 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35574 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35574 + idx + 68] = mem[_34954 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35574 + 68] = mem[_35574 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35574 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38347 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38347] = 30
                                                mem[_38347 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _40272 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40272 + idx + 68] = mem[_38347 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40272 + 68] = mem[_40272 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40272 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _48733 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48733] = 30
                                                mem[_48733 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50958 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50958 + idx + 68] = mem[_48733 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50958 + 68] = mem[_50958 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50958 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35573 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35573] = 30
                                            mem[_35573 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36387 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36387 + idx + 68] = mem[_35573 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36387 + 68] = mem[_36387 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36387 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40271 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40271] = 30
                                            mem[_40271 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42521 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42521 + idx + 68] = mem[_40271 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42521 + 68] = mem[_42521 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42521 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _50957 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50957] = 30
                                            mem[_50957 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52906 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52906 + idx + 68] = mem[_50957 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52906 + 68] = mem[_52906 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52906 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32405 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32405] = 30
                                            mem[_32405 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32621 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32621 + idx + 68] = mem[_32405 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32621 + 68] = mem[_32621 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32621 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33381] = 30
                                            mem[_33381 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33707 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33707 + idx + 68] = mem[_33381 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33707 + 68] = mem[_33707 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33707 + -mem[64] + 100
                                        _32467 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32467] = 26
                                        mem[_32467 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34956 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34956] = 30
                                                mem[_34956 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38356 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38356] = 30
                                                mem[_38356 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40285 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40285 + idx + 68] = mem[_38356 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40285 + 68] = mem[_40285 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40285 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48742 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48742] = 30
                                                mem[_48742 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50968 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50968 + idx + 68] = mem[_48742 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50968 + 68] = mem[_50968 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50968 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35581 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35581] = 30
                                            mem[_35581 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36397 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36397 + idx + 68] = mem[_35581 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36397 + 68] = mem[_36397 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36397 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40284 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40284] = 30
                                            mem[_40284 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42537 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42537 + idx + 68] = mem[_40284 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42537 + 68] = mem[_42537 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42537 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _50967 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50967] = 30
                                            mem[_50967 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52918 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52918 + idx + 68] = mem[_50967 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52918 + 68] = mem[_52918 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52918 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35580 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35580] = 30
                                            mem[_35580 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36394 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36394 + idx + 68] = mem[_35580 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36394 + 68] = mem[_36394 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36394 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40283 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40283] = 30
                                            mem[_40283 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42534 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42534 + idx + 68] = mem[_40283 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42534 + 68] = mem[_42534 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42534 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _50966 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50966] = 30
                                            mem[_50966 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52915 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52915 + idx + 68] = mem[_50966 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52915 + 68] = mem[_52915 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52915 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36393 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36393] = 30
                                        mem[_36393 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37647 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37647 + idx + 68] = mem[_36393 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37647 + 68] = mem[_37647 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37647 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42533 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42533] = 30
                                        mem[_42533 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _44919 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44919 + idx + 68] = mem[_42533 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44919 + 68] = mem[_44919 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44919 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _52914 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52914] = 30
                                        mem[_52914 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54899 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54899 + idx + 68] = mem[_52914 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54899 + 68] = mem[_54899 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54899 + -mem[64] + 100
                                    _31907 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31907] = 26
                                    mem[_31907 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32762 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32762] = 26
                                        mem[_32762 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32761 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32761] = 26
                                        mem[_32761 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            else:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32320 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32320] = 26
                                            mem[_32320 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34702 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34702] = 30
                                                mem[_34702 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _36774 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36774] = 30
                                                mem[_36774 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _38377 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38377 + idx + 68] = mem[_36774 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38377 + 68] = mem[_38377 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38377 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41116 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41116] = 30
                                                mem[_41116 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _43402 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_43402 + idx + 68] = mem[_41116 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_43402 + 68] = mem[_43402 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _43402 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _54956 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54956] = 30
                                                mem[_54956 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _56872 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56872 + idx + 68] = mem[_54956 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56872 + 68] = mem[_56872 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56872 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34962 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34962] = 30
                                            mem[_34962 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35601 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35601 + idx + 68] = mem[_34962 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35601 + 68] = mem[_35601 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35601 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38376 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38376] = 30
                                            mem[_38376 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40337 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40337 + idx + 68] = mem[_38376 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40337 + 68] = mem[_40337 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40337 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43399 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43399] = 30
                                            mem[_43399 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _46080 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46080 + idx + 68] = mem[_43399 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46080 + 68] = mem[_46080 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46080 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _56871 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56871] = 30
                                            mem[_56871 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58526 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58526 + idx + 68] = mem[_56871 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58526 + 68] = mem[_58526 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58526 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32408] = 30
                                            mem[_32408 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32630 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32630 + idx + 68] = mem[_32408 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32630 + 68] = mem[_32630 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32630 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33387 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33387] = 30
                                            mem[_33387 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33722 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33722 + idx + 68] = mem[_33387 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33722 + 68] = mem[_33722 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33722 + -mem[64] + 100
                                        _32470 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32470] = 26
                                        mem[_32470 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34963 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34963] = 30
                                            mem[_34963 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38382 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38382] = 30
                                            mem[_38382 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40344 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40344 + idx + 68] = mem[_38382 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40344 + 68] = mem[_40344 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40344 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43405 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43405] = 30
                                            mem[_43405 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _46089 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46089 + idx + 68] = mem[_43405 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46089 + 68] = mem[_46089 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46089 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56876 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56876] = 30
                                            mem[_56876 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58531 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58531 + idx + 68] = mem[_56876 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58531 + 68] = mem[_58531 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58531 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35604 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35604] = 30
                                        mem[_35604 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36428 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36428 + idx + 68] = mem[_35604 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36428 + 68] = mem[_36428 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36428 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40343 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40343] = 30
                                        mem[_40343 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _42609 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42609 + idx + 68] = mem[_40343 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42609 + 68] = mem[_42609 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42609 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46086 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46086] = 30
                                        mem[_46086 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _48815 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48815 + idx + 68] = mem[_46086 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48815 + 68] = mem[_48815 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48815 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _58530 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58530] = 30
                                        mem[_58530 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _59667 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59667 + idx + 68] = mem[_58530 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59667 + 68] = mem[_59667 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59667 + -mem[64] + 100
                                    _31922 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31922] = 26
                                    mem[_31922 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32768 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32768] = 26
                                        mem[_32768 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32767 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32767] = 26
                                        mem[_32767 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32317 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32317] = 26
                                            mem[_32317 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34701 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34701] = 30
                                                    mem[_34701 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _36771 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36771] = 30
                                                    mem[_36771 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _38368 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38368 + idx + 68] = mem[_36771 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38368 + 68] = mem[_38368 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38368 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _41107 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41107] = 30
                                                    mem[_41107 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _43393 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_43393 + idx + 68] = mem[_41107 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_43393 + 68] = mem[_43393 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _43393 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _54944 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54944] = 30
                                                    mem[_54944 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _56863 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56863 + idx + 68] = mem[_54944 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56863 + 68] = mem[_56863 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56863 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34960 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34960] = 30
                                                mem[_34960 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35594 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35594 + idx + 68] = mem[_34960 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35594 + 68] = mem[_35594 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35594 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38367 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38367] = 30
                                                mem[_38367 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40318 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40318 + idx + 68] = mem[_38367 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40318 + 68] = mem[_40318 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40318 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43390 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43390] = 30
                                                mem[_43390 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _46059 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46059 + idx + 68] = mem[_43390 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46059 + 68] = mem[_46059 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46059 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _56862 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56862] = 30
                                                mem[_56862 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58512 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58512 + idx + 68] = mem[_56862 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58512 + 68] = mem[_58512 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58512 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34959 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34959] = 30
                                                mem[_34959 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35591 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35591 + idx + 68] = mem[_34959 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35591 + 68] = mem[_35591 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35591 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38366 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38366] = 30
                                                mem[_38366 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40315 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40315 + idx + 68] = mem[_38366 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40315 + 68] = mem[_40315 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40315 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43387 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43387] = 30
                                                mem[_43387 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _46056 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46056 + idx + 68] = mem[_43387 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46056 + 68] = mem[_46056 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46056 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _56861 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56861] = 30
                                                mem[_56861 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58509 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58509 + idx + 68] = mem[_56861 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58509 + 68] = mem[_58509 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58509 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35590 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35590] = 30
                                            mem[_35590 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36411 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36411 + idx + 68] = mem[_35590 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36411 + 68] = mem[_36411 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36411 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40314 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40314] = 30
                                            mem[_40314 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42577 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42577 + idx + 68] = mem[_40314 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42577 + 68] = mem[_42577 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42577 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46053 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46053] = 30
                                            mem[_46053 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48773 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48773 + idx + 68] = mem[_46053 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48773 + 68] = mem[_48773 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48773 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _58508 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58508] = 30
                                            mem[_58508 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59639 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59639 + idx + 68] = mem[_58508 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59639 + 68] = mem[_59639 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59639 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32407 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32407] = 30
                                            mem[_32407 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32627 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32627 + idx + 68] = mem[_32407 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32627 + 68] = mem[_32627 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32627 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33385 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33385] = 30
                                            mem[_33385 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33717 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33717 + idx + 68] = mem[_33385 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33717 + 68] = mem[_33717 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33717 + -mem[64] + 100
                                        _32469 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32469] = 26
                                        mem[_32469 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34961 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34961] = 30
                                                mem[_34961 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38375 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38375] = 30
                                                mem[_38375 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40328 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40328 + idx + 68] = mem[_38375 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40328 + 68] = mem[_40328 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40328 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43396 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43396] = 30
                                                mem[_43396 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _46071 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46071 + idx + 68] = mem[_43396 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46071 + 68] = mem[_46071 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46071 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56868 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56868] = 30
                                                mem[_56868 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58519 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58519 + idx + 68] = mem[_56868 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58519 + 68] = mem[_58519 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58519 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35598 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35598] = 30
                                            mem[_35598 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36421 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36421 + idx + 68] = mem[_35598 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36421 + 68] = mem[_36421 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36421 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40327 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40327] = 30
                                            mem[_40327 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42591 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42591 + idx + 68] = mem[_40327 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42591 + 68] = mem[_42591 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42591 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46068 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46068] = 30
                                            mem[_46068 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _48791 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48791 + idx + 68] = mem[_46068 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48791 + 68] = mem[_48791 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48791 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _58518 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58518] = 30
                                            mem[_58518 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59651 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59651 + idx + 68] = mem[_58518 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59651 + 68] = mem[_59651 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59651 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35597 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35597] = 30
                                            mem[_35597 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36418 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36418 + idx + 68] = mem[_35597 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36418 + 68] = mem[_36418 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36418 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40326 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40326] = 30
                                            mem[_40326 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42588 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42588 + idx + 68] = mem[_40326 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42588 + 68] = mem[_42588 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42588 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46065 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46065] = 30
                                            mem[_46065 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48788 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48788 + idx + 68] = mem[_46065 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48788 + 68] = mem[_48788 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48788 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _58517 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58517] = 30
                                            mem[_58517 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59648 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59648 + idx + 68] = mem[_58517 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59648 + 68] = mem[_59648 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59648 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36417 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36417] = 30
                                        mem[_36417 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37682 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37682 + idx + 68] = mem[_36417 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37682 + 68] = mem[_37682 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37682 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _42587 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42587] = 30
                                        mem[_42587 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _44977 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44977 + idx + 68] = mem[_42587 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44977 + 68] = mem[_44977 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44977 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _48785 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48785] = 30
                                        mem[_48785 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _51016 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51016 + idx + 68] = mem[_48785 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51016 + 68] = mem[_51016 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51016 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _59647 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59647] = 30
                                        mem[_59647 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _60509 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60509 + idx + 68] = mem[_59647 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60509 + 68] = mem[_60509 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60509 + -mem[64] + 100
                                    _31917 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31917] = 26
                                    mem[_31917 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32766 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32766] = 26
                                        mem[_32766 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32765 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32765] = 26
                                        mem[_32765 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        if not stor4[address(arg1)]:
                            if not arg2:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32344 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32344] = 26
                                        mem[_32344 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34710 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34710] = 30
                                            mem[_34710 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36806 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36806] = 30
                                            mem[_36806 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38453 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38453 + idx + 68] = mem[_36806 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38453 + 68] = mem[_38453 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38453 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _46202 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46202] = 30
                                            mem[_46202 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48981 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48981 + idx + 68] = mem[_46202 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48981 + 68] = mem[_48981 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48981 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34982] = 30
                                        mem[_34982 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _35669 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35669 + idx + 68] = mem[_34982 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35669 + 68] = mem[_35669 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35669 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38452 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38452] = 30
                                        mem[_38452 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _40509 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40509 + idx + 68] = mem[_38452 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40509 + 68] = mem[_40509 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40509 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _48980 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48980] = 30
                                        mem[_48980 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _51215 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51215 + idx + 68] = mem[_48980 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51215 + 68] = mem[_51215 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51215 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32416 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32416] = 30
                                        mem[_32416 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32654 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32654 + idx + 68] = mem[_32416 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32654 + 68] = mem[_32654 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32654 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33403 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33403] = 30
                                        mem[_33403 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33762 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33762 + idx + 68] = mem[_33403 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33762 + 68] = mem[_33762 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33762 + -mem[64] + 100
                                    _32478 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32478] = 26
                                    mem[_32478 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34983 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34983] = 30
                                        mem[_34983 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38458 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38458] = 30
                                        mem[_38458 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40516 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40516 + idx + 68] = mem[_38458 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40516 + 68] = mem[_40516 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40516 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48985 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48985] = 30
                                        mem[_48985 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _51220 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51220 + idx + 68] = mem[_48985 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51220 + 68] = mem[_51220 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51220 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35672 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35672] = 30
                                    mem[_35672 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                        _36524 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36524 + idx + 68] = mem[_35672 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36524 + 68] = mem[_36524 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36524 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40515 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40515] = 30
                                    mem[_40515 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _42829 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42829 + idx + 68] = mem[_40515 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42829 + 68] = mem[_42829 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42829 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    _51219 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51219] = 30
                                    mem[_51219 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _53172 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53172 + idx + 68] = mem[_51219 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53172 + 68] = mem[_53172 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53172 + -mem[64] + 100
                                _31962 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31962] = 26
                                mem[_31962 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32784 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32784] = 26
                                    mem[_32784 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                else:
                                    _32783 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32783] = 26
                                    mem[_32783 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2
                                if 5 * arg2 / arg2 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 5 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 100 * 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32341 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32341] = 26
                                        mem[_32341 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34709 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34709] = 30
                                                mem[_34709 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36803 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36803] = 30
                                                mem[_36803 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38444 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38444 + idx + 68] = mem[_36803 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38444 + 68] = mem[_38444 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38444 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46191 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46191] = 30
                                                mem[_46191 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48966 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48966 + idx + 68] = mem[_46191 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48966 + 68] = mem[_48966 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48966 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34980 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34980] = 30
                                            mem[_34980 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _35662 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35662 + idx + 68] = mem[_34980 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35662 + 68] = mem[_35662 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35662 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38443 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38443] = 30
                                            mem[_38443 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40490 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40490 + idx + 68] = mem[_38443 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40490 + 68] = mem[_40490 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40490 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _48965 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48965] = 30
                                            mem[_48965 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _51201 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51201 + idx + 68] = mem[_48965 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51201 + 68] = mem[_51201 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51201 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _34979 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34979] = 30
                                            mem[_34979 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35659 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35659 + idx + 68] = mem[_34979 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35659 + 68] = mem[_35659 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35659 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38442 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38442] = 30
                                            mem[_38442 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _40487 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40487 + idx + 68] = mem[_38442 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40487 + 68] = mem[_40487 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40487 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48964 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48964] = 30
                                            mem[_48964 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _51198 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51198 + idx + 68] = mem[_48964 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51198 + 68] = mem[_51198 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51198 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35658 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35658] = 30
                                        mem[_35658 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _36507 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36507 + idx + 68] = mem[_35658 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36507 + 68] = mem[_36507 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36507 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40486 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40486] = 30
                                        mem[_40486 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42793 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42793 + idx + 68] = mem[_40486 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42793 + 68] = mem[_42793 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42793 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _51197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51197] = 30
                                        mem[_51197 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _53144 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53144 + idx + 68] = mem[_51197 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53144 + 68] = mem[_53144 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53144 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32415 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32415] = 30
                                        mem[_32415 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32651 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32651 + idx + 68] = mem[_32415 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32651 + 68] = mem[_32651 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32651 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33401] = 30
                                        mem[_33401 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33757 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33757 + idx + 68] = mem[_33401 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33757 + 68] = mem[_33757 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33757 + -mem[64] + 100
                                    _32477 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32477] = 26
                                    mem[_32477 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            _34981 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34981] = 30
                                            mem[_34981 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38451 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38451] = 30
                                            mem[_38451 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40500 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40500 + idx + 68] = mem[_38451 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40500 + 68] = mem[_40500 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40500 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48973 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48973] = 30
                                            mem[_48973 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _51208 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51208 + idx + 68] = mem[_48973 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51208 + 68] = mem[_51208 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51208 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35666 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35666] = 30
                                        mem[_35666 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                            _36517 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36517 + idx + 68] = mem[_35666 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36517 + 68] = mem[_36517 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36517 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40499 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40499] = 30
                                        mem[_40499 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42809 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42809 + idx + 68] = mem[_40499 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42809 + 68] = mem[_42809 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42809 + -mem[64] + 100
                                        if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        _51207 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51207] = 30
                                        mem[_51207 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _53156 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53156 + idx + 68] = mem[_51207 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53156 + 68] = mem[_53156 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53156 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 5 * arg2 / 100:
                                        _35665 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35665] = 30
                                        mem[_35665 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36514 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36514 + idx + 68] = mem[_35665 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36514 + 68] = mem[_36514 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36514 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40498 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40498] = 30
                                        mem[_40498 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42806 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42806 + idx + 68] = mem[_40498 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42806 + 68] = mem[_42806 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42806 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _51206 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51206] = 30
                                        mem[_51206 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _53153 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53153 + idx + 68] = mem[_51206 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53153 + 68] = mem[_53153 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53153 + -mem[64] + 100
                                    require 5 * arg2 / 100
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36513 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36513] = 30
                                    mem[_36513 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                        _37822 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37822 + idx + 68] = mem[_36513 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37822 + 68] = mem[_37822 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37822 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42805 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42805] = 30
                                    mem[_42805 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                        _45209 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45209 + idx + 68] = mem[_42805 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45209 + 68] = mem[_45209 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45209 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                    _53152 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53152] = 30
                                    mem[_53152 + 32] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _55117 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55117 + idx + 68] = mem[_53152 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55117 + 68] = mem[_55117 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55117 + -mem[64] + 100
                                _31957 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31957] = 26
                                mem[_31957 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 100 * 10^18:
                                    _32782 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32782] = 26
                                    mem[_32782 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                else:
                                    _32781 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32781] = 26
                                    mem[_32781 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 5 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                            if 5 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -1 * 5 * arg2 / 100 * t / s
                                if totalFees + (5 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 5 * arg2 / 100
                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = msg.sender
                            mem[32] = 4
                            if not stor4[address(msg.sender)]:
                                if not arg2:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32326 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32326] = 26
                                            mem[_32326 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34704 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34704] = 30
                                                mem[_34704 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36782 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36782] = 30
                                                mem[_36782 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38396 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38396 + idx + 68] = mem[_36782 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38396 + 68] = mem[_38396 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38396 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46111 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46111] = 30
                                                mem[_46111 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48849 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48849 + idx + 68] = mem[_46111 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48849 + 68] = mem[_48849 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48849 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34967 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34967] = 30
                                            mem[_34967 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _35618 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35618 + idx + 68] = mem[_34967 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35618 + 68] = mem[_35618 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35618 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38395 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38395] = 30
                                            mem[_38395 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _40380 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40380 + idx + 68] = mem[_38395 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40380 + 68] = mem[_40380 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40380 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _48848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48848] = 30
                                            mem[_48848 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _51077 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51077 + idx + 68] = mem[_48848 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51077 + 68] = mem[_51077 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51077 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32410 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32410] = 30
                                            mem[_32410 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32636 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32636 + idx + 68] = mem[_32410 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32636 + 68] = mem[_32636 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32636 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33391 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33391] = 30
                                            mem[_33391 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33732 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33732 + idx + 68] = mem[_33391 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33732 + 68] = mem[_33732 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33732 + -mem[64] + 100
                                        _32472 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32472] = 26
                                        mem[_32472 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34968 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34968] = 30
                                            mem[_34968 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38401 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38401] = 30
                                            mem[_38401 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40387 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40387 + idx + 68] = mem[_38401 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40387 + 68] = mem[_40387 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40387 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48853 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48853] = 30
                                            mem[_48853 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _51082 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51082 + idx + 68] = mem[_48853 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51082 + 68] = mem[_51082 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51082 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35621 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35621] = 30
                                        mem[_35621 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 100 * 10^18:
                                            _36452 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36452 + idx + 68] = mem[_35621 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36452 + 68] = mem[_36452 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36452 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40386 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40386] = 30
                                        mem[_40386 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _42665 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42665 + idx + 68] = mem[_40386 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42665 + 68] = mem[_42665 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42665 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        _51081 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51081] = 30
                                        mem[_51081 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _53031 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53031 + idx + 68] = mem[_51081 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53031 + 68] = mem[_53031 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53031 + -mem[64] + 100
                                    _31932 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31932] = 26
                                    mem[_31932 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32772 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32772] = 26
                                        mem[_32772 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                    else:
                                        _32771 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32771] = 26
                                        mem[_32771 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2
                                    if 5 * arg2 / arg2 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 5 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 100 * 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32323 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32323] = 26
                                            mem[_32323 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34703 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34703] = 30
                                                    mem[_34703 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36779 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36779] = 30
                                                    mem[_36779 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38387 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38387 + idx + 68] = mem[_36779 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38387 + 68] = mem[_38387 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38387 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _46100 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46100] = 30
                                                    mem[_46100 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48834 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48834 + idx + 68] = mem[_46100 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48834 + 68] = mem[_48834 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48834 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34965 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34965] = 30
                                                mem[_34965 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _35611 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35611 + idx + 68] = mem[_34965 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35611 + 68] = mem[_35611 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35611 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38386 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38386] = 30
                                                mem[_38386 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40361 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40361 + idx + 68] = mem[_38386 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40361 + 68] = mem[_40361 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40361 + -mem[64] + 100
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _48833 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48833] = 30
                                                mem[_48833 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _51063 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51063 + idx + 68] = mem[_48833 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51063 + 68] = mem[_51063 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51063 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _34964 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34964] = 30
                                                mem[_34964 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35608 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35608 + idx + 68] = mem[_34964 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35608 + 68] = mem[_35608 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35608 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38385 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38385] = 30
                                                mem[_38385 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _40358 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40358 + idx + 68] = mem[_38385 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40358 + 68] = mem[_40358 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40358 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _48832 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48832] = 30
                                                mem[_48832 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _51060 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51060 + idx + 68] = mem[_48832 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51060 + 68] = mem[_51060 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51060 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35607 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35607] = 30
                                            mem[_35607 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _36435 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36435 + idx + 68] = mem[_35607 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36435 + 68] = mem[_36435 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36435 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40357 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40357] = 30
                                            mem[_40357 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42629 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42629 + idx + 68] = mem[_40357 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42629 + 68] = mem[_42629 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42629 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _51059 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51059] = 30
                                            mem[_51059 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _53003 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53003 + idx + 68] = mem[_51059 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53003 + 68] = mem[_53003 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53003 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32409 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32409] = 30
                                            mem[_32409 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32633 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32633 + idx + 68] = mem[_32409 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32633 + 68] = mem[_32633 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32633 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33389 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33389] = 30
                                            mem[_33389 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33727 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33727 + idx + 68] = mem[_33389 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33727 + 68] = mem[_33727 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33727 + -mem[64] + 100
                                        _32471 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32471] = 26
                                        mem[_32471 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                _34966 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34966] = 30
                                                mem[_34966 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38394 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38394] = 30
                                                mem[_38394 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40371 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40371 + idx + 68] = mem[_38394 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40371 + 68] = mem[_40371 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40371 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48841 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48841] = 30
                                                mem[_48841 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _51070 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51070 + idx + 68] = mem[_48841 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51070 + 68] = mem[_51070 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51070 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35615 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35615] = 30
                                            mem[_35615 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                _36445 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36445 + idx + 68] = mem[_35615 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36445 + 68] = mem[_36445 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36445 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40370 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40370] = 30
                                            mem[_40370 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42645 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42645 + idx + 68] = mem[_40370 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42645 + 68] = mem[_42645 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42645 + -mem[64] + 100
                                            if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            _51069 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51069] = 30
                                            mem[_51069 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _53015 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53015 + idx + 68] = mem[_51069 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53015 + 68] = mem[_53015 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53015 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 5 * arg2 / 100:
                                            _35614 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35614] = 30
                                            mem[_35614 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36442 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36442 + idx + 68] = mem[_35614 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36442 + 68] = mem[_36442 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36442 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40369 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40369] = 30
                                            mem[_40369 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42642 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42642 + idx + 68] = mem[_40369 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42642 + 68] = mem[_42642 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42642 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _51068 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51068] = 30
                                            mem[_51068 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _53012 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53012 + idx + 68] = mem[_51068 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53012 + 68] = mem[_53012 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53012 + -mem[64] + 100
                                        require 5 * arg2 / 100
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36441 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36441] = 30
                                        mem[_36441 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                            _37717 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37717 + idx + 68] = mem[_36441 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37717 + 68] = mem[_37717 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37717 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42641 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42641] = 30
                                        mem[_42641 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                            _45033 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45033 + idx + 68] = mem[_42641 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45033 + 68] = mem[_45033 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45033 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                        _53011 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53011] = 30
                                        mem[_53011 + 32] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                            stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 5 * arg2 / 100
                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54983 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54983 + idx + 68] = mem[_53011 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54983 + 68] = mem[_54983 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54983 + -mem[64] + 100
                                    _31927 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31927] = 26
                                    mem[_31927 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 100 * 10^18:
                                        _32770 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32770] = 26
                                        mem[_32770 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                    else:
                                        _32769 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32769] = 26
                                        mem[_32769 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 5 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                if 5 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -1 * 5 * arg2 / 100 * t / s
                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 5 * arg2 / 100
                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                            else:
                                mem[0] = arg1
                                mem[32] = 4
                                if not stor4[address(arg1)]:
                                    if not arg2:
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 100 * 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32332 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32332] = 26
                                                mem[_32332 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    _34706 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34706] = 30
                                                    mem[_34706 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36790 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36790] = 30
                                                    mem[_36790 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38415 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38415 + idx + 68] = mem[_36790 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38415 + 68] = mem[_38415 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38415 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _46134 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46134] = 30
                                                    mem[_46134 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    _48882 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48882 + idx + 68] = mem[_46134 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48882 + 68] = mem[_48882 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48882 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34972 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34972] = 30
                                                mem[_34972 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35635 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35635 + idx + 68] = mem[_34972 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35635 + 68] = mem[_35635 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35635 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38414 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38414] = 30
                                                mem[_38414 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _40423 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40423 + idx + 68] = mem[_38414 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40423 + 68] = mem[_40423 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40423 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _48881 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48881] = 30
                                                mem[_48881 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _51113 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51113 + idx + 68] = mem[_48881 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51113 + 68] = mem[_51113 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51113 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32412 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32412] = 30
                                                mem[_32412 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32642 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32642 + idx + 68] = mem[_32412 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32642 + 68] = mem[_32642 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32642 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33395 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33395] = 30
                                                mem[_33395 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33742 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33742 + idx + 68] = mem[_33395 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33742 + 68] = mem[_33742 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33742 + -mem[64] + 100
                                            _32474 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32474] = 26
                                            mem[_32474 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34973 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34973] = 30
                                                mem[_34973 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38420 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38420] = 30
                                                mem[_38420 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40430 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40430 + idx + 68] = mem[_38420 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40430 + 68] = mem[_40430 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40430 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48886 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48886] = 30
                                                mem[_48886 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _51118 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51118 + idx + 68] = mem[_48886 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51118 + 68] = mem[_51118 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51118 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35638 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35638] = 30
                                            mem[_35638 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36476 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36476 + idx + 68] = mem[_35638 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36476 + 68] = mem[_36476 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36476 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40429 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40429] = 30
                                            mem[_40429 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _42721 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42721 + idx + 68] = mem[_40429 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42721 + 68] = mem[_42721 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42721 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _51117 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51117] = 30
                                            mem[_51117 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _53075 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53075 + idx + 68] = mem[_51117 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53075 + 68] = mem[_53075 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53075 + -mem[64] + 100
                                        _31942 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31942] = 26
                                        mem[_31942 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 100 * 10^18:
                                            _32776 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32776] = 26
                                            mem[_32776 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        else:
                                            _32775 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32775] = 26
                                            mem[_32775 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        require arg2
                                        if 5 * arg2 / arg2 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 100 * 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32329 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32329] = 26
                                                mem[_32329 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    if not 5 * arg2 / 100:
                                                        _34705 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_34705] = 30
                                                        mem[_34705 + 32] = 'SafeMath: subtraction overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 1
                                                        _36787 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_36787] = 30
                                                        mem[_36787 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > stor1[address(msg.sender)]:
                                                            _38406 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_38406 + idx + 68] = mem[_36787 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_38406 + 68] = mem[_38406 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _38406 + -mem[64] + 100
                                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = arg1
                                                        mem[32] = 1
                                                        _46123 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_46123] = 30
                                                        mem[_46123 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 <= stor6:
                                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalFees += 5 * arg2 / 100
                                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                            return 1
                                                        _48867 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_48867 + idx + 68] = mem[_46123 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_48867 + 68] = mem[_48867 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _48867 + -mem[64] + 100
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _34970 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34970] = 30
                                                    mem[_34970 + 32] = 'SafeMath: subtraction overflow'
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                        _35628 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35628 + idx + 68] = mem[_34970 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35628 + 68] = mem[_35628 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35628 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38405 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38405] = 30
                                                    mem[_38405 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _40404 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40404 + idx + 68] = mem[_38405 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40404 + 68] = mem[_40404 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40404 + -mem[64] + 100
                                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    _48866 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_48866] = 30
                                                    mem[_48866 + 32] = 'SafeMath: subtraction overflow'
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _51099 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_51099 + idx + 68] = mem[_48866 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_51099 + 68] = mem[_51099 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _51099 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 5 * arg2 / 100:
                                                    _34969 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34969] = 30
                                                    mem[_34969 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                                        _35625 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35625 + idx + 68] = mem[_34969 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35625 + 68] = mem[_35625 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35625 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38404 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38404] = 30
                                                    mem[_38404 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                        _40401 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40401 + idx + 68] = mem[_38404 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40401 + 68] = mem[_40401 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40401 + -mem[64] + 100
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                    _48865 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_48865] = 30
                                                    mem[_48865 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _51096 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_51096 + idx + 68] = mem[_48865 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_51096 + 68] = mem[_51096 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _51096 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35624 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35624] = 30
                                                mem[_35624 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    _36459 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36459 + idx + 68] = mem[_35624 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36459 + 68] = mem[_36459 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36459 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40400 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40400] = 30
                                                mem[_40400 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _42685 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42685 + idx + 68] = mem[_40400 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42685 + 68] = mem[_42685 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42685 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                _51095 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51095] = 30
                                                mem[_51095 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _53047 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_53047 + idx + 68] = mem[_51095 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_53047 + 68] = mem[_53047 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _53047 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32411 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32411] = 30
                                                mem[_32411 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32639 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32639 + idx + 68] = mem[_32411 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32639 + 68] = mem[_32639 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32639 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33393 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33393] = 30
                                                mem[_33393 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33737 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33737 + idx + 68] = mem[_33393 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33737 + 68] = mem[_33737 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33737 + -mem[64] + 100
                                            _32473 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32473] = 26
                                            mem[_32473 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34971 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34971] = 30
                                                    mem[_34971 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38413 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38413] = 30
                                                    mem[_38413 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _40414 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40414 + idx + 68] = mem[_38413 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40414 + 68] = mem[_40414 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40414 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _48874 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_48874] = 30
                                                    mem[_48874 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _51106 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_51106 + idx + 68] = mem[_48874 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_51106 + 68] = mem[_51106 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _51106 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35632 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35632] = 30
                                                mem[_35632 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _36469 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36469 + idx + 68] = mem[_35632 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36469 + 68] = mem[_36469 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36469 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40413 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40413] = 30
                                                mem[_40413 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _42701 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42701 + idx + 68] = mem[_40413 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42701 + 68] = mem[_42701 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42701 + -mem[64] + 100
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _51105 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51105] = 30
                                                mem[_51105 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _53059 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_53059 + idx + 68] = mem[_51105 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_53059 + 68] = mem[_53059 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _53059 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _35631 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35631] = 30
                                                mem[_35631 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _36466 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36466 + idx + 68] = mem[_35631 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36466 + 68] = mem[_36466 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36466 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40412 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40412] = 30
                                                mem[_40412 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _42698 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42698 + idx + 68] = mem[_40412 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42698 + 68] = mem[_42698 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42698 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _51104 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51104] = 30
                                                mem[_51104 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _53056 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_53056 + idx + 68] = mem[_51104 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_53056 + 68] = mem[_53056 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _53056 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36465 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36465] = 30
                                            mem[_36465 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _37752 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37752 + idx + 68] = mem[_36465 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37752 + 68] = mem[_37752 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37752 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42697 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42697] = 30
                                            mem[_42697 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _45095 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45095 + idx + 68] = mem[_42697 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45095 + 68] = mem[_45095 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45095 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _53055 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53055] = 30
                                            mem[_53055 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _55033 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_55033 + idx + 68] = mem[_53055 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_55033 + 68] = mem[_55033 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _55033 + -mem[64] + 100
                                        _31937 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31937] = 26
                                        mem[_31937 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 100 * 10^18:
                                            _32774 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32774] = 26
                                            mem[_32774 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 5 * arg2 / 100:
                                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            _32773 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32773] = 26
                                            mem[_32773 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * t / s > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                    if 5 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 5 * arg2 / 100:
                                                    if 0 > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * t / s
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                    if 5 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                else:
                                    if not arg2:
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 100 * 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32338 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32338] = 26
                                                mem[_32338 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    _34708 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34708] = 30
                                                    mem[_34708 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _36798 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36798] = 30
                                                    mem[_36798 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _38434 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38434 + idx + 68] = mem[_36798 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38434 + 68] = mem[_38434 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38434 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _41178 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41178] = 30
                                                    mem[_41178 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _43459 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_43459 + idx + 68] = mem[_41178 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_43459 + 68] = mem[_43459 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _43459 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] += arg2
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _55090 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_55090] = 30
                                                    mem[_55090 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    _56991 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56991 + idx + 68] = mem[_55090 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56991 + 68] = mem[_56991 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56991 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34977 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34977] = 30
                                                mem[_34977 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _35652 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35652 + idx + 68] = mem[_34977 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35652 + 68] = mem[_35652 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35652 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38433 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38433] = 30
                                                mem[_38433 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40466 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40466 + idx + 68] = mem[_38433 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40466 + 68] = mem[_40466 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40466 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43456 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43456] = 30
                                                mem[_43456 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _46171 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46171 + idx + 68] = mem[_43456 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46171 + 68] = mem[_46171 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46171 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _56990 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56990] = 30
                                                mem[_56990 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _58636 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58636 + idx + 68] = mem[_56990 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58636 + 68] = mem[_58636 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58636 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32414 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32414] = 30
                                                mem[_32414 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32648 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32648 + idx + 68] = mem[_32414 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32648 + 68] = mem[_32648 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32648 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33399 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33399] = 30
                                                mem[_33399 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33752 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33752 + idx + 68] = mem[_33399 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33752 + 68] = mem[_33752 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33752 + -mem[64] + 100
                                            _32476 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32476] = 26
                                            mem[_32476 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34978 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34978] = 30
                                                mem[_34978 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38439 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38439] = 30
                                                mem[_38439 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _40473 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40473 + idx + 68] = mem[_38439 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40473 + 68] = mem[_40473 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40473 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43462 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43462] = 30
                                                mem[_43462 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _46180 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46180 + idx + 68] = mem[_43462 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46180 + 68] = mem[_46180 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46180 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56995 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56995] = 30
                                                mem[_56995 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _58641 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58641 + idx + 68] = mem[_56995 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58641 + 68] = mem[_58641 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58641 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35655 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35655] = 30
                                            mem[_35655 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 100 * 10^18:
                                                _36500 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36500 + idx + 68] = mem[_35655 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36500 + 68] = mem[_36500 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36500 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40472 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40472] = 30
                                            mem[_40472 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _42773 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42773 + idx + 68] = mem[_40472 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42773 + 68] = mem[_42773 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42773 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46177 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46177] = 30
                                            mem[_46177 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _48947 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48947 + idx + 68] = mem[_46177 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48947 + 68] = mem[_48947 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48947 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                            _58640 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58640] = 30
                                            mem[_58640 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _59751 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59751 + idx + 68] = mem[_58640 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59751 + 68] = mem[_59751 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59751 + -mem[64] + 100
                                        _31952 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31952] = 26
                                        mem[_31952 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 100 * 10^18:
                                            _32780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32780] = 26
                                            mem[_32780 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                        else:
                                            _32779 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32779] = 26
                                            mem[_32779 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        require arg2
                                        if 5 * arg2 / arg2 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 5 * arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 100 * 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32335 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32335] = 26
                                                mem[_32335 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    if not 5 * arg2 / 100:
                                                        _34707 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_34707] = 30
                                                        mem[_34707 + 32] = 'SafeMath: subtraction overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 2
                                                        _36795 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_36795] = 30
                                                        mem[_36795 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 > stor2[address(msg.sender)]:
                                                            _38425 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_38425 + idx + 68] = mem[_36795 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_38425 + 68] = mem[_38425 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _38425 + -mem[64] + 100
                                                        stor2[address(msg.sender)] -= arg2
                                                        mem[0] = msg.sender
                                                        mem[32] = 1
                                                        _41169 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_41169] = 30
                                                        mem[_41169 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > stor1[address(msg.sender)]:
                                                            _43450 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_43450 + idx + 68] = mem[_41169 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_43450 + 68] = mem[_43450 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _43450 + -mem[64] + 100
                                                        if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = arg1
                                                        mem[32] = 1
                                                        _55078 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_55078] = 30
                                                        mem[_55078 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 <= stor6:
                                                            if totalFees + (5 * arg2 / 100) < totalFees:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalFees += 5 * arg2 / 100
                                                            emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                            return 1
                                                        _56982 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_56982 + idx + 68] = mem[_55078 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_56982 + 68] = mem[_56982 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _56982 + -mem[64] + 100
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _34975 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34975] = 30
                                                    mem[_34975 + 32] = 'SafeMath: subtraction overflow'
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                        _35645 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35645 + idx + 68] = mem[_34975 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35645 + 68] = mem[_35645 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35645 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38424 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38424] = 30
                                                    mem[_38424 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _40447 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40447 + idx + 68] = mem[_38424 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40447 + 68] = mem[_40447 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40447 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _43447 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_43447] = 30
                                                    mem[_43447 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _46150 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_46150 + idx + 68] = mem[_43447 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_46150 + 68] = mem[_46150 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _46150 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    _56981 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56981] = 30
                                                    mem[_56981 + 32] = 'SafeMath: subtraction overflow'
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                        stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _58622 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58622 + idx + 68] = mem[_56981 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58622 + 68] = mem[_58622 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58622 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 5 * arg2 / 100:
                                                    _34974 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34974] = 30
                                                    mem[_34974 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                                        _35642 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35642 + idx + 68] = mem[_34974 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35642 + 68] = mem[_35642 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35642 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38423 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38423] = 30
                                                    mem[_38423 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _40444 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40444 + idx + 68] = mem[_38423 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40444 + 68] = mem[_40444 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40444 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _43444 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_43444] = 30
                                                    mem[_43444 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                        _46147 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_46147 + idx + 68] = mem[_43444 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_46147 + 68] = mem[_46147 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _46147 + -mem[64] + 100
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                    _56980 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56980] = 30
                                                    mem[_56980 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _58619 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58619 + idx + 68] = mem[_56980 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58619 + 68] = mem[_58619 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58619 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35641 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35641] = 30
                                                mem[_35641 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                    _36483 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36483 + idx + 68] = mem[_35641 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36483 + 68] = mem[_36483 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36483 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _40443 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40443] = 30
                                                mem[_40443 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _42741 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42741 + idx + 68] = mem[_40443 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42741 + 68] = mem[_42741 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42741 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46144 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46144] = 30
                                                mem[_46144 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _48905 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48905 + idx + 68] = mem[_46144 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48905 + 68] = mem[_48905 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48905 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                _58618 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58618] = 30
                                                mem[_58618 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _59723 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59723 + idx + 68] = mem[_58618 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59723 + 68] = mem[_59723 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59723 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32413 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32413] = 30
                                                mem[_32413 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32645 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32645 + idx + 68] = mem[_32413 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32645 + 68] = mem[_32645 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32645 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33397 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33397] = 30
                                                mem[_33397 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33747 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33747 + idx + 68] = mem[_33397 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33747 + 68] = mem[_33747 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33747 + -mem[64] + 100
                                            _32475 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32475] = 26
                                            mem[_32475 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    _34976 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34976] = 30
                                                    mem[_34976 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38432 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38432] = 30
                                                    mem[_38432 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _40457 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40457 + idx + 68] = mem[_38432 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40457 + 68] = mem[_40457 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40457 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _43453 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_43453] = 30
                                                    mem[_43453 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _46162 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_46162 + idx + 68] = mem[_43453 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_46162 + 68] = mem[_46162 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _46162 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _56987 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56987] = 30
                                                    mem[_56987 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 5 * arg2 / 100
                                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _58629 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58629 + idx + 68] = mem[_56987 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58629 + 68] = mem[_58629 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58629 + -mem[64] + 100
                                                require 5 * arg2 / 100
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35649 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35649] = 30
                                                mem[_35649 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                    _36493 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36493 + idx + 68] = mem[_35649 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36493 + 68] = mem[_36493 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36493 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _40456 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40456] = 30
                                                mem[_40456 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _42755 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42755 + idx + 68] = mem[_40456 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42755 + 68] = mem[_42755 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42755 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46159 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46159] = 30
                                                mem[_46159 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _48923 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48923 + idx + 68] = mem[_46159 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48923 + 68] = mem[_48923 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48923 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                _58628 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58628] = 30
                                                mem[_58628 + 32] = 'SafeMath: subtraction overflow'
                                                if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _59735 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59735 + idx + 68] = mem[_58628 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59735 + 68] = mem[_59735 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59735 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 5 * arg2 / 100:
                                                _35648 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35648] = 30
                                                mem[_35648 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 100 * 10^18:
                                                    _36490 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36490 + idx + 68] = mem[_35648 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36490 + 68] = mem[_36490 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36490 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _40455 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40455] = 30
                                                mem[_40455 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _42752 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42752 + idx + 68] = mem[_40455 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42752 + 68] = mem[_42752 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42752 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46156 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46156] = 30
                                                mem[_46156 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                    _48920 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48920 + idx + 68] = mem[_46156 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48920 + 68] = mem[_48920 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48920 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                _58627 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58627] = 30
                                                mem[_58627 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (5 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 5 * arg2 / 100
                                                    emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _59732 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59732 + idx + 68] = mem[_58627 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59732 + 68] = mem[_59732 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59732 + -mem[64] + 100
                                            require 5 * arg2 / 100
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36489 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36489] = 30
                                            mem[_36489 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                _37787 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37787 + idx + 68] = mem[_36489 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37787 + 68] = mem[_37787 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37787 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _42751 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42751] = 30
                                            mem[_42751 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _45153 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45153 + idx + 68] = mem[_42751 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45153 + 68] = mem[_45153 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45153 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _48917 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48917] = 30
                                            mem[_48917 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                _51154 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51154 + idx + 68] = mem[_48917 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51154 + 68] = mem[_51154 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51154 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                            if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                            _59731 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59731] = 30
                                            mem[_59731 + 32] = 'SafeMath: subtraction overflow'
                                            if 5 * arg2 / 100 * stor6 / 100 * 10^18 <= stor6:
                                                stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                if totalFees + (5 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 5 * arg2 / 100
                                                emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _60567 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60567 + idx + 68] = mem[_59731 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60567 + 68] = mem[_60567 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60567 + -mem[64] + 100
                                        _31947 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31947] = 26
                                        mem[_31947 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 100 * 10^18:
                                            _32778 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32778] = 26
                                            mem[_32778 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 100 * 10^18 / arg2 != stor6 / 100 * 10^18:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 5 * arg2 / 100:
                                                    if 0 > arg2 * stor6 / 100 * 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * stor6 / 100 * 10^18
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 / 5 * arg2 / 100 != stor6 / 100 * 10^18:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > arg2 * stor6 / 100 * 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if arg2 * stor6 / 100 * 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 100 * 10^18
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 100 * 10^18) - (5 * arg2 / 100 * stor6 / 100 * 10^18)
                                                    if 5 * arg2 / 100 * stor6 / 100 * 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * stor6 / 100 * 10^18
                                        else:
                                            _32777 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32777] = 26
                                            mem[_32777 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if not 5 * arg2 / 100:
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * t / s > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -1 * 5 * arg2 / 100 * t / s
                                                    if 5 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 5 * arg2 / 100:
                                                    if 0 > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * t / s
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 5 * arg2 / 100
                                                    if 5 * arg2 / 100 * t / s / 5 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 5 * arg2 / 100 * t / s > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor2[address(arg1)] + arg2 - (5 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (5 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (5 * arg2 / 100 * t / s)
                                                    if 5 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -1 * 5 * arg2 / 100 * t / s
                                        if totalFees + (5 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 5 * arg2 / 100
                                        emit Transfer((arg2 - (5 * arg2 / 100)), msg.sender, arg1);
    return 1
}



}
