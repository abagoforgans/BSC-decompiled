contract main {




// =====================  Runtime code  =====================


#
#  - sub_304f807c(?)
#  - emergencyRewardWithdraw(uint256 arg1)
#  - resetAllowances()
#  - recoverWrongTokens(address arg1, uint256 arg2)
#  - sub_515bbf2c(?)
#  - deposit(uint256 arg1, uint8 arg2)
#  - sub_689f1623(?)
#  - sub_78d57eea(?)
#
const slippageFactorUL = 995


address owner;
array of address stor1;
uint8 isInitialized; offset 160
address sub_d8e31608Address;
uint256 duration;
uint8 hasUserLimit;
uint256 poolLimitPerUser;
uint256 startBlock;
uint256 bonusEndBlock;
uint256 slippageFactor;
address uniRouterAddress;
array of address sub_167d2dbe;
array of address sub_c1e22a65;
uint32 stor12;
address walletAAddress;
uint256 stor12;
address buyBackWalletAddress;
uint256 performanceFee;
uint256 PRECISION_FACTOR;
uint256 sub_88bbb0c1;
address stakingTokenAddress;
address sub_6e707b73Address;
address dividendTokenAddress;
uint256 sub_92b46e5b;
uint256 totalStaked;
uint256 stor22;
uint256 stor23;
uint256 stor24;
array of struct sub_8e6f4fb7;
mapping of struct userStakes;
mapping of struct userStaked;

function duration() {
    return duration
}

function dividendToken() {
    return dividendTokenAddress
}

function sub_167d2dbe(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_167d2dbe.length
    return address(sub_167d2dbe[arg1])
}

function bonusEndBlock() {
    return bonusEndBlock
}

function buyBackWallet() {
    return buyBackWalletAddress
}

function isInitialized() {
    return bool(isInitialized)
}

function startBlock() {
    return startBlock
}

function poolLimitPerUser() {
    return poolLimitPerUser
}

function uniRouterAddress() {
    return uniRouterAddress
}

function sub_6e707b73(?) {
    return sub_6e707b73Address
}

function stakingToken() {
    return stakingTokenAddress
}

function totalStaked() {
    return totalStaked
}

function performanceFee() {
    return performanceFee
}

function sub_88bbb0c1(?) {
    return sub_88bbb0c1
}

function owner() {
    return owner
}

function sub_8e6f4fb7(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_8e6f4fb7.length
    return sub_8e6f4fb7[arg1].field_0, 
           sub_8e6f4fb7[arg1].field_256,
           sub_8e6f4fb7[arg1].field_512,
           sub_8e6f4fb7[arg1].field_768,
           sub_8e6f4fb7[arg1].field_1024,
           sub_8e6f4fb7[arg1].field_1280,
           sub_8e6f4fb7[arg1].field_1536,
           sub_8e6f4fb7[arg1].field_1792
}

function sub_92b46e5b(?) {
    return sub_92b46e5b
}

function hasUserLimit() {
    return bool(hasUserLimit)
}

function userStaked(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return userStaked[arg1].field_0, userStaked[arg1].field_256, userStaked[arg1].field_512
}

function userStakes(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 < userStakes[arg1].field_0
    return userStakes[arg1][arg2].field_0, 
           userStakes[arg1][arg2].field_256,
           userStakes[arg1][arg2].field_512,
           userStakes[arg1][arg2].field_768,
           userStakes[arg1][arg2].field_1024,
           userStakes[arg1][arg2].field_1280
}

function walletA() {
    return address(walletAAddress)
}

function sub_c1e22a65(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_c1e22a65.length
    return sub_c1e22a65[arg1].field_0
}

function PRECISION_FACTOR() {
    return PRECISION_FACTOR
}

function sub_d8e31608(?) {
    return sub_d8e31608Address
}

function slippageFactor() {
    return slippageFactor
}

function _fallback() payable {
    revert
}

function stopReward() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    bonusEndBlock = block.number
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_f8920ee7(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint8(arg1)
    if uint8(arg1) < sub_8e6f4fb7.length:
        return sub_8e6f4fb7[8 * uint8(arg1)].field_1024
    else:
        return 0
}

function setDuration(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if startBlock:
        revert with 0, 'Pool was already started'
    if arg1 < 30:
        revert with 0, 'lower limit reached'
    duration = arg1
    emit DurationUpdated(arg1);
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function sub_81b61948(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if buyBackWalletAddress != msg.sender:
        revert with 0, 'setServiceInfo: FORBIDDEN'
    if not address(arg1):
        if buyBackWalletAddress == address(arg1):
            revert with 0, 'Invalid address'
    buyBackWalletAddress = address(arg1)
    performanceFee = arg2
    emit 0x232f2e62: address(arg1), arg2
}

function updatePoolLimitPerUser(bool arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not hasUserLimit:
        revert with 0, 'Must be set'
    if not arg1:
        hasUserLimit = uint8(arg1)
        poolLimitPerUser = 0
    else:
        if arg2 <= poolLimitPerUser:
            revert with 0, 'New limit must be higher'
        poolLimitPerUser = arg2
    emit NewPoolLimit(poolLimitPerUser);
}

function sub_9f94e272(?) {
    if dividendTokenAddress == sub_6e707b73Address:
        return stor22
    require ext_code.size(sub_6e707b73Address)
    staticcall sub_6e707b73Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if stakingTokenAddress != sub_6e707b73Address:
        return ext_call.return_data[0]
    if ext_call.return_data[0] >= totalStaked:
        return (ext_call.return_data[0] - totalStaked)
    else:
        return 0
}

function sub_76fa17d2(?) {
    require calldata.size - 4 >= 64
    require arg1 == uint8(arg1)
    require arg2 == address(arg2)
    idx = 0
    while idx < userStakes[address(arg2)].field_0:
        mem[0] = sha3(address(arg2), 26)
        if userStakes[address(arg2)][idx].field_0 == uint8(arg1):
            if userStakes[address(arg2)][idx].field_256:
                if 0 > !userStakes[address(arg2)][idx].field_256:
                    revert with 0, 17
                if 0 > !userStakes[address(arg2)][idx].field_256:
                    revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return 0
}

function startReward() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if startBlock:
        revert with 0, 'Pool was already started'
    if block.number > -101:
        revert with 0, 17
    startBlock = block.number + 100
    if duration > 0x2468acf13579be02468acf13579be02468acf13579be02468acf13579be02:
        revert with 0, 17
    if startBlock > !(8 * 3600 * duration):
        revert with 0, 17
    bonusEndBlock = startBlock + (8 * 3600 * duration)
    idx = 0
    while idx < sub_8e6f4fb7.length:
        mem[0] = 25
        sub_8e6f4fb7[idx].field_1536 = startBlock
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    emit NewStartAndEndBlocks(startBlock, bonusEndBlock);
}

function sub_4561aaaf(?) {
    require calldata.size - 4 >= 128
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg2 >= 2000:
        revert with 0, 'Invalid deposit fee'
    if arg3 >= 2000:
        revert with 0, 'Invalid withdraw fee'
    sub_8e6f4fb7.length++
    if sub_8e6f4fb7.length + 1 < 1:
        revert with 0, 17
    if sub_8e6f4fb7.length >= sub_8e6f4fb7.length:
        revert with 0, 50
    sub_8e6f4fb7[sub_8e6f4fb7.length].field_256 = arg1
    sub_8e6f4fb7[sub_8e6f4fb7.length].field_512 = arg2
    sub_8e6f4fb7[sub_8e6f4fb7.length].field_768 = arg3
    sub_8e6f4fb7[sub_8e6f4fb7.length].field_1024 = arg4
    sub_8e6f4fb7[sub_8e6f4fb7.length].field_1536 = block.number
    if sub_8e6f4fb7.length < 1:
        revert with 0, 17
    emit 0x2a937849: sub_8e6f4fb7.length - 1 << 248, arg1, arg2, arg3, arg4
}

function emergencyWithdraw(uint8 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stor1.length == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor1.length = 2
    if arg1 < sub_8e6f4fb7.length:
        idx = 0
        while idx < userStakes[msg.sender].field_0:
            mem[0] = sha3(msg.sender, 26)
            if userStakes[msg.sender][idx].field_0 == arg1:
                if userStakes[msg.sender][idx].field_256:
                    if 0 > !userStakes[msg.sender][idx].field_256:
                        revert with 0, 17
                    userStakes[msg.sender][idx].field_256 = 0
                    userStakes[msg.sender][idx].field_1024 = 0
                    userStakes[msg.sender][idx].field_1280 = 0
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        emit EmergencyWithdraw(0, msg.sender);
    stor1.length = 1
}

function sub_bd01ac4e(?) {
    if not dividendTokenAddress:
        return eth.balance(this.address)
    require ext_code.size(dividendTokenAddress)
    staticcall dividendTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_6e707b73Address != dividendTokenAddress:
        if stakingTokenAddress != dividendTokenAddress:
            return ext_call.return_data[0]
        if ext_call.return_data[0] >= totalStaked:
            return (ext_call.return_data[0] - totalStaked)
    else:
        if ext_call.return_data[0] >= stor22:
            if stakingTokenAddress != dividendTokenAddress:
                return (ext_call.return_data[0] - stor22)
            if ext_call.return_data[0] - stor22 >= totalStaked:
                return (ext_call.return_data[0] - stor22 - totalStaked)
    return 0
}

function depositRewards(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor1.length == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor1.length = 2
    require arg1
    mem[100] = this.address
    require ext_code.size(sub_6e707b73Address)
    staticcall sub_6e707b73Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 132] = msg.sender
    mem[ceil32(return_data.size) + 164] = this.address
    mem[ceil32(return_data.size) + 196] = arg1
    mem[ceil32(return_data.size) + 96] = 100
    mem[ceil32(return_data.size) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0x23b872dd(?????)
    mem[ceil32(return_data.size) + 228] = 32
    mem[ceil32(return_data.size) + 260] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 'Address: insufficient balance for call'
    if not ext_code.size(sub_6e707b73Address):
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0
    mem[ceil32(return_data.size) + 392] = 0
    call sub_6e707b73Address with:
       funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) >> 224
         gas gas_remaining wei
        args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) << 544)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require 0, mem[132 len 28] == bool(0, mem[132 len 28])
            if not 0, mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[ceil32(return_data.size) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 324] == bool(mem[ceil32(return_data.size) + 324])
            if not mem[ceil32(return_data.size) + 324]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    require ext_code.size(sub_6e707b73Address)
    staticcall sub_6e707b73Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if stor22 > !ext_call.return_data[0]:
        revert with 0, 17
    if stor22 + ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 17
    stor1.length = 1
}

function sub_e7a2fed7(?) {
    require calldata.size - 4 >= 160
    require cd[36] == address(cd[36])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if (32 * ('cd', 68).length) + 128 < 96 or (32 * ('cd', 68).length) + 128 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require calldata.size >= cd[68] + (32 * ('cd', 68).length) + 36
    idx = 0
    s = cd[68] + 36
    t = 128
    while idx < ('cd', 68).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    if ('cd', 100).length > test266151307():
        revert with 0, 65
    if (32 * ('cd', 100).length) + 160 < 128 or (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160 > test266151307():
        revert with 0, 65
    mem[64] = (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160
    mem[(32 * ('cd', 68).length) + 128] = ('cd', 100).length
    require calldata.size >= cd[100] + (32 * ('cd', 100).length) + 36
    idx = 0
    s = cd[100] + 36
    t = (32 * ('cd', 68).length) + 160
    while idx < ('cd', 100).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require cd[132] == address(cd[132])
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if cd[4] > 995:
        revert with 0, '_slippageFactor too high'
    if not address(cd[132]):
        revert with 0, 'Invalid Address'
    slippageFactor = cd[4]
    uniRouterAddress = address(cd[36])
    sub_167d2dbe.length = ('cd', 100).length
    if not ('cd', 100).length:
        idx = 0
        while sub_167d2dbe.length > idx:
            uint256(sub_167d2dbe[idx]) = 0
            idx = idx + 1
            continue 
        sub_c1e22a65.length = ('cd', 68).length
        if not ('cd', 68).length:
            idx = 0
            while sub_c1e22a65.length > idx:
                sub_c1e22a65[idx].field_0 = 0
                idx = idx + 1
                continue 
        else:
            s = 0
            idx = 128
            while (32 * ('cd', 68).length) + 128 > idx:
                sub_c1e22a65[s].field_0 = mem[idx + 12 len 20]
                s = s + 1
                idx = idx + 32
                continue 
            idx = Mask(251, 0, (32 * ('cd', 68).length) + 31) >> 5
            while sub_c1e22a65.length > idx:
                sub_c1e22a65[idx].field_0 = 0
                idx = idx + 1
                continue 
        address(walletAAddress) = address(cd[132])
        mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160] = cd[4]
        mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] = address(cd[36])
        mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] = 160
        mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 320] = ('cd', 68).length
        idx = 0
        s = 128
        t = (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 352
        while idx < ('cd', 68).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] = (32 * ('cd', 68).length) + 192
        mem[(64 * ('cd', 68).length) + (32 * ('cd', 100).length) + 352] = ('cd', 100).length
        idx = 0
        s = (32 * ('cd', 68).length) + 160
        t = (64 * ('cd', 68).length) + (32 * ('cd', 100).length) + 384
        while idx < mem[(32 * ('cd', 68).length) + 128]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 288] = address(cd[132])
        emit 0xfae0d0e8: mem[mem[64] len (64 * ('cd', 68).length) + (64 * ('cd', 100).length) + -mem[64] + 384]
    else:
        s = 0
        idx = (32 * ('cd', 68).length) + 160
        while (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160 > idx:
            address(sub_167d2dbe[s]) = mem[idx + 12 len 20]
            s = s + 1
            idx = idx + 32
            continue 
        idx = Mask(251, 0, (32 * ('cd', 100).length) + 31) >> 5
        while sub_167d2dbe.length > idx:
            uint256(sub_167d2dbe[idx]) = 0
            idx = idx + 1
            continue 
        sub_c1e22a65.length = ('cd', 68).length
        if not ('cd', 68).length:
            idx = 0
            while sub_c1e22a65.length > idx:
                sub_c1e22a65[idx].field_0 = 0
                idx = idx + 1
                continue 
            address(walletAAddress) = address(cd[132])
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160] = cd[4]
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] = address(cd[36])
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] = 160
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 320] = ('cd', 68).length
            idx = 0
            s = 128
            t = (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 352
            while idx < ('cd', 68).length:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] = (32 * ('cd', 68).length) + 192
            mem[(64 * ('cd', 68).length) + (32 * ('cd', 100).length) + 352] = ('cd', 100).length
            idx = 0
            s = (32 * ('cd', 68).length) + 160
            t = (64 * ('cd', 68).length) + (32 * ('cd', 100).length) + 384
            while idx < ('cd', 100).length:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 288] = address(cd[132])
            emit 0xfae0d0e8: mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160 len (96 * ('cd', 68).length) + (96 * ('cd', 100).length) + 224]
        else:
            s = 0
            idx = 128
            while (32 * ('cd', 68).length) + 128 > idx:
                sub_c1e22a65[s].field_0 = mem[idx + 12 len 20]
                s = s + 1
                idx = idx + 32
                continue 
            idx = Mask(251, 0, (32 * ('cd', 68).length) + 31) >> 5
            while sub_c1e22a65.length > idx:
                sub_c1e22a65[idx].field_0 = 0
                idx = idx + 1
                continue 
            address(walletAAddress) = address(cd[132])
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160] = cd[4]
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] = address(cd[36])
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] = 160
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 320] = ('cd', 68).length
            idx = 0
            s = 128
            t = (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 352
            while idx < ('cd', 68).length:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] = (32 * ('cd', 68).length) + 192
            mem[(64 * ('cd', 68).length) + (32 * ('cd', 100).length) + 352] = ('cd', 100).length
            idx = 0
            s = (32 * ('cd', 68).length) + 160
            t = (64 * ('cd', 68).length) + (32 * ('cd', 100).length) + 384
            while idx < ('cd', 100).length:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            emit 0xfae0d0e8: mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 160 len 128], address(cd[132]), mem[(32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 320 len (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 64]
}

function sub_301b2216(?) {
    require calldata.size - 4 >= 160
    require arg1 == uint8(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uint8(arg1) >= sub_8e6f4fb7.length:
        revert with 0, 'Lockup Not found'
    if arg3 >= 2000:
        revert with 0, 'Invalid deposit fee'
    if arg4 >= 2000:
        revert with 0, 'Invalid withdraw fee'
    if totalStaked:
        if not dividendTokenAddress:
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if eth.balance(this.address) < stor23:
                revert with 0, 17
            if eth.balance(this.address) - stor23 and sub_88bbb0c1 > -1 / eth.balance(this.address) - stor23:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if sub_92b46e5b > !((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                revert with 0, 17
            sub_92b46e5b += (eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
            stor23 = eth.balance(this.address)
        else:
            require ext_code.size(dividendTokenAddress)
            staticcall dividendTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if sub_6e707b73Address != dividendTokenAddress:
                if stakingTokenAddress != dividendTokenAddress:
                    if ext_call.return_data[0] < stor23:
                        revert with 0, 17
                    if ext_call.return_data[0] - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                    stor23 = ext_call.return_data[0]
                else:
                    if ext_call.return_data[0] >= totalStaked:
                        if ext_call.return_data[0] - totalStaked < stor23:
                            revert with 0, 17
                        if ext_call.return_data[0] - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - totalStaked - stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                        stor23 = ext_call.return_data[0] - totalStaked
                    else:
                        if 0 < stor23:
                            revert with 0, 17
                        if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                        stor23 = 0
            else:
                if ext_call.return_data[0] < stor22:
                    if 0 < stor23:
                        revert with 0, 17
                    if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                    stor23 = 0
                else:
                    if stakingTokenAddress != dividendTokenAddress:
                        if ext_call.return_data[0] - stor22 < stor23:
                            revert with 0, 17
                        if ext_call.return_data[0] - stor22 - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                        stor23 = ext_call.return_data[0] - stor22
                    else:
                        if ext_call.return_data[0] - stor22 >= totalStaked:
                            if ext_call.return_data[0] - stor22 - totalStaked < stor23:
                                revert with 0, 17
                            if ext_call.return_data[0] - stor22 - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - totalStaked - stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                            stor23 = ext_call.return_data[0] - stor22 - totalStaked
                        else:
                            if 0 < stor23:
                                revert with 0, 17
                            if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                            stor23 = 0
    if uint8(arg1) >= sub_8e6f4fb7.length:
        revert with 0, 50
    if block.number > sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
        if sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
            if sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                if block.number <= bonusEndBlock:
                    if block.number < sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                        revert with 0, 17
                    if block.number - sub_8e6f4fb7[8 * uint8(arg1)].field_1536 and sub_8e6f4fb7[8 * uint8(arg1)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                        revert with 0, 17
                    if (block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024):
                        revert with 0, 17
                    if not sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                        revert with 0, 18
                    if sub_8e6f4fb7[8 * uint8(arg1)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792):
                        revert with 0, 17
                    sub_8e6f4fb7[8 * uint8(arg1)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792
                else:
                    if sub_8e6f4fb7[8 * uint8(arg1)].field_1536 >= bonusEndBlock:
                        if False and sub_8e6f4fb7[8 * uint8(arg1)].field_1024 > 0:
                            revert with 0, 17
                        if False and PRECISION_FACTOR > 0:
                            revert with 0, 17
                        if not sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                            revert with 0, 18
                        if sub_8e6f4fb7[8 * uint8(arg1)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg1)].field_1792):
                            revert with 0, 17
                        sub_8e6f4fb7[8 * uint8(arg1)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg1)].field_1792
                    else:
                        if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                            revert with 0, 17
                        if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg1)].field_1536 and sub_8e6f4fb7[8 * uint8(arg1)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                            revert with 0, 17
                        if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024):
                            revert with 0, 17
                        if not sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                            revert with 0, 18
                        if sub_8e6f4fb7[8 * uint8(arg1)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792):
                            revert with 0, 17
                        sub_8e6f4fb7[8 * uint8(arg1)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792
            sub_8e6f4fb7[8 * uint8(arg1)].field_1536 = block.number
    if uint8(arg1) >= sub_8e6f4fb7.length:
        revert with 0, 50
    sub_8e6f4fb7[8 * uint8(arg1)].field_256 = arg2
    sub_8e6f4fb7[8 * uint8(arg1)].field_512 = arg3
    sub_8e6f4fb7[8 * uint8(arg1)].field_768 = arg4
    sub_8e6f4fb7[8 * uint8(arg1)].field_1024 = arg5
    emit 0x2a937849: arg1 << 248, arg2, arg3, arg4, arg5
}

function sub_fbe32b35(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == uint8(arg2)
    if uint8(arg2) < sub_8e6f4fb7.length:
        if startBlock:
            if uint8(arg2) >= sub_8e6f4fb7.length:
                revert with 0, 50
            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 != 0:
                if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                    idx = 0
                    while idx < userStakes[address(arg1)].field_0:
                        mem[0] = sha3(address(arg1), 26)
                        if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                            if userStakes[address(arg1)][idx].field_256:
                                if userStakes[address(arg1)][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[address(arg1)][idx].field_256:
                                    revert with 0, 17
                                if not PRECISION_FACTOR:
                                    revert with 0, 18
                                if userStakes[address(arg1)][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[address(arg1)][idx].field_1024:
                                    revert with 0, 17
                                if 0 > !((userStakes[address(arg1)][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[address(arg1)][idx].field_1024):
                                    revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                        idx = 0
                        while idx < userStakes[address(arg1)].field_0:
                            mem[0] = sha3(address(arg1), 26)
                            if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                if userStakes[address(arg1)][idx].field_256:
                                    if userStakes[address(arg1)][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[address(arg1)][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    if userStakes[address(arg1)][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[address(arg1)][idx].field_1024:
                                        revert with 0, 17
                                    if 0 > !((userStakes[address(arg1)][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[address(arg1)][idx].field_1024):
                                        revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 <= 0:
                            idx = 0
                            while idx < userStakes[address(arg1)].field_0:
                                mem[0] = sha3(address(arg1), 26)
                                if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                    if userStakes[address(arg1)][idx].field_256:
                                        if userStakes[address(arg1)][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[address(arg1)][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[address(arg1)][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[address(arg1)][idx].field_1024:
                                            revert with 0, 17
                                        if 0 > !((userStakes[address(arg1)][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[address(arg1)][idx].field_1024):
                                            revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if block.number <= bonusEndBlock:
                                if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                    revert with 0, 17
                                if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                    revert with 0, 17
                                if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                    revert with 0, 17
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                    revert with 0, 18
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                    revert with 0, 17
                                idx = 0
                                while idx < userStakes[address(arg1)].field_0:
                                    mem[0] = sha3(address(arg1), 26)
                                    if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                        if userStakes[address(arg1)][idx].field_256:
                                            if userStakes[address(arg1)][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 + ((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792) > -1 / userStakes[address(arg1)][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if (sub_8e6f4fb7[8 * uint8(arg2)].field_1280 * userStakes[address(arg1)][idx].field_256) + ((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792 * userStakes[address(arg1)][idx].field_256) / PRECISION_FACTOR < userStakes[address(arg1)][idx].field_1024:
                                                revert with 0, 17
                                            if 0 > !(((sub_8e6f4fb7[8 * uint8(arg2)].field_1280 * userStakes[address(arg1)][idx].field_256) + ((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792 * userStakes[address(arg1)][idx].field_256) / PRECISION_FACTOR) - userStakes[address(arg1)][idx].field_1024):
                                                revert with 0, 17
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                    if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                        revert with 0, 17
                                    if False and PRECISION_FACTOR > 0:
                                        revert with 0, 17
                                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                        revert with 0, 18
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                        revert with 0, 17
                                    idx = 0
                                    while idx < userStakes[address(arg1)].field_0:
                                        mem[0] = sha3(address(arg1), 26)
                                        if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                            if userStakes[address(arg1)][idx].field_256:
                                                if userStakes[address(arg1)][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 + (0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792) > -1 / userStakes[address(arg1)][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if (sub_8e6f4fb7[8 * uint8(arg2)].field_1280 * userStakes[address(arg1)][idx].field_256) + (0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792 * userStakes[address(arg1)][idx].field_256) / PRECISION_FACTOR < userStakes[address(arg1)][idx].field_1024:
                                                    revert with 0, 17
                                                if 0 > !(((sub_8e6f4fb7[8 * uint8(arg2)].field_1280 * userStakes[address(arg1)][idx].field_256) + (0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792 * userStakes[address(arg1)][idx].field_256) / PRECISION_FACTOR) - userStakes[address(arg1)][idx].field_1024):
                                                    revert with 0, 17
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                        revert with 0, 17
                                    if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                        revert with 0, 17
                                    if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                        revert with 0, 17
                                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                        revert with 0, 18
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                        revert with 0, 17
                                    idx = 0
                                    while idx < userStakes[address(arg1)].field_0:
                                        mem[0] = sha3(address(arg1), 26)
                                        if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                            if userStakes[address(arg1)][idx].field_256:
                                                if userStakes[address(arg1)][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 + ((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792) > -1 / userStakes[address(arg1)][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if (sub_8e6f4fb7[8 * uint8(arg2)].field_1280 * userStakes[address(arg1)][idx].field_256) + ((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792 * userStakes[address(arg1)][idx].field_256) / PRECISION_FACTOR < userStakes[address(arg1)][idx].field_1024:
                                                    revert with 0, 17
                                                if 0 > !(((sub_8e6f4fb7[8 * uint8(arg2)].field_1280 * userStakes[address(arg1)][idx].field_256) + ((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792 * userStakes[address(arg1)][idx].field_256) / PRECISION_FACTOR) - userStakes[address(arg1)][idx].field_1024):
                                                    revert with 0, 17
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                return 0
            else:
                return 0
        else:
            return 0
    else:
        return 0
}

function sub_13c68f90(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == uint8(arg1)
    if stor1.length == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor1.length = 2
    if uint8(arg1) < sub_8e6f4fb7.length:
        if startBlock:
            if msg.value < performanceFee:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'should pay small gas to compound or harvest'
            call buyBackWalletAddress with:
               value performanceFee wei
                 gas 2300 * is_zero(value) wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if msg.value > performanceFee:
                if msg.value < performanceFee:
                    revert with 0, 17
                call msg.sender with:
                   value msg.value - performanceFee wei
                     gas 2300 * is_zero(value) wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
            if totalStaked:
                if not dividendTokenAddress:
                    require ext_code.size(stakingTokenAddress)
                    staticcall stakingTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if eth.balance(this.address) < stor23:
                        revert with 0, 17
                    if eth.balance(this.address) - stor23 and sub_88bbb0c1 > -1 / eth.balance(this.address) - stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += (eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                    stor23 = eth.balance(this.address)
                else:
                    require ext_code.size(dividendTokenAddress)
                    staticcall dividendTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stakingTokenAddress)
                    staticcall stakingTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if sub_6e707b73Address != dividendTokenAddress:
                        if stakingTokenAddress != dividendTokenAddress:
                            if ext_call.return_data[0] < stor23:
                                revert with 0, 17
                            if ext_call.return_data[0] - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                            stor23 = ext_call.return_data[0]
                        else:
                            if ext_call.return_data[0] >= totalStaked:
                                if ext_call.return_data[0] - totalStaked < stor23:
                                    revert with 0, 17
                                if ext_call.return_data[0] - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - totalStaked - stor23:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                    revert with 0, 17
                                sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                                stor23 = ext_call.return_data[0] - totalStaked
                            else:
                                if 0 < stor23:
                                    revert with 0, 17
                                if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                    revert with 0, 17
                                sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                                stor23 = 0
                    else:
                        if ext_call.return_data[0] < stor22:
                            if 0 < stor23:
                                revert with 0, 17
                            if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                            stor23 = 0
                        else:
                            if stakingTokenAddress != dividendTokenAddress:
                                if ext_call.return_data[0] - stor22 < stor23:
                                    revert with 0, 17
                                if ext_call.return_data[0] - stor22 - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - stor23:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                    revert with 0, 17
                                sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                                stor23 = ext_call.return_data[0] - stor22
                            else:
                                if ext_call.return_data[0] - stor22 >= totalStaked:
                                    if ext_call.return_data[0] - stor22 - totalStaked < stor23:
                                        revert with 0, 17
                                    if ext_call.return_data[0] - stor22 - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - totalStaked - stor23:
                                        revert with 0, 17
                                    if not ext_call.return_data[0]:
                                        revert with 0, 18
                                    if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                        revert with 0, 17
                                    sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                                    stor23 = ext_call.return_data[0] - stor22 - totalStaked
                                else:
                                    if 0 < stor23:
                                        revert with 0, 17
                                    if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                        revert with 0, 17
                                    if not ext_call.return_data[0]:
                                        revert with 0, 18
                                    if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                        revert with 0, 17
                                    sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                                    stor23 = 0
            if uint8(arg1) >= sub_8e6f4fb7.length:
                revert with 0, 50
            if block.number > sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                if sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                    if sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                        if block.number <= bonusEndBlock:
                            if block.number < sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                                revert with 0, 17
                            if block.number - sub_8e6f4fb7[8 * uint8(arg1)].field_1536 and sub_8e6f4fb7[8 * uint8(arg1)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                                revert with 0, 17
                            if (block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024):
                                revert with 0, 17
                            if not sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                                revert with 0, 18
                            if sub_8e6f4fb7[8 * uint8(arg1)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792):
                                revert with 0, 17
                            sub_8e6f4fb7[8 * uint8(arg1)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792
                        else:
                            if sub_8e6f4fb7[8 * uint8(arg1)].field_1536 >= bonusEndBlock:
                                if False and sub_8e6f4fb7[8 * uint8(arg1)].field_1024 > 0:
                                    revert with 0, 17
                                if False and PRECISION_FACTOR > 0:
                                    revert with 0, 17
                                if not sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                                    revert with 0, 18
                                if sub_8e6f4fb7[8 * uint8(arg1)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg1)].field_1792):
                                    revert with 0, 17
                                sub_8e6f4fb7[8 * uint8(arg1)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg1)].field_1792
                            else:
                                if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                                    revert with 0, 17
                                if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg1)].field_1536 and sub_8e6f4fb7[8 * uint8(arg1)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg1)].field_1536:
                                    revert with 0, 17
                                if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024):
                                    revert with 0, 17
                                if not sub_8e6f4fb7[8 * uint8(arg1)].field_1792:
                                    revert with 0, 18
                                if sub_8e6f4fb7[8 * uint8(arg1)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792):
                                    revert with 0, 17
                                sub_8e6f4fb7[8 * uint8(arg1)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg1)].field_1536 * sub_8e6f4fb7[8 * uint8(arg1)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg1)].field_1792
                    sub_8e6f4fb7[8 * uint8(arg1)].field_1536 = block.number
            idx = 0
            while idx < userStakes[msg.sender].field_0:
                mem[0] = sha3(msg.sender, 26)
                if userStakes[msg.sender][idx].field_0 == uint8(arg1):
                    if userStakes[msg.sender][idx].field_256:
                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                            revert with 0, 17
                        if not sub_88bbb0c1:
                            revert with 0, 18
                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                            revert with 0, 17
                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                            revert with 0, 17
                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                            revert with 0, 17
                        if not sub_88bbb0c1:
                            revert with 0, 18
                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    stor1.length = 1
}

function sub_6becd657(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == uint8(arg2)
    if uint8(arg2) < sub_8e6f4fb7.length:
        if startBlock:
            if totalStaked:
                if not dividendTokenAddress:
                    require ext_code.size(stakingTokenAddress)
                    staticcall stakingTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if eth.balance(this.address) < stor23:
                        revert with 0, 17
                    if eth.balance(this.address) - stor23 and sub_88bbb0c1 > -1 / eth.balance(this.address) - stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                        revert with 0, 17
                    idx = 0
                    while idx < userStakes[address(arg1)].field_0:
                        mem[0] = sha3(address(arg1), 26)
                        if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                            if userStakes[address(arg1)][idx].field_256:
                                if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + ((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                    revert with 0, 17
                                if not sub_88bbb0c1:
                                    revert with 0, 18
                                if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                    revert with 0, 17
                                if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                    revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_code.size(dividendTokenAddress)
                    staticcall dividendTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stakingTokenAddress)
                    staticcall stakingTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if sub_6e707b73Address != dividendTokenAddress:
                        if stakingTokenAddress != dividendTokenAddress:
                            if ext_call.return_data[0] < stor23:
                                revert with 0, 17
                            if ext_call.return_data[0] - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                revert with 0, 17
                            idx = 0
                            while idx < userStakes[address(arg1)].field_0:
                                mem[0] = sha3(address(arg1), 26)
                                if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                    if userStakes[address(arg1)][idx].field_256:
                                        if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                            revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if ext_call.return_data[0] >= totalStaked:
                                if ext_call.return_data[0] - totalStaked < stor23:
                                    revert with 0, 17
                                if ext_call.return_data[0] - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - totalStaked - stor23:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                    revert with 0, 17
                                idx = 0
                                while idx < userStakes[address(arg1)].field_0:
                                    mem[0] = sha3(address(arg1), 26)
                                    if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                        if userStakes[address(arg1)][idx].field_256:
                                            if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + ((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                                revert with 0, 17
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if 0 < stor23:
                                    revert with 0, 17
                                if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                    revert with 0, 17
                                idx = 0
                                while idx < userStakes[address(arg1)].field_0:
                                    mem[0] = sha3(address(arg1), 26)
                                    if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                        if userStakes[address(arg1)][idx].field_256:
                                            if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                                revert with 0, 17
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                    else:
                        if ext_call.return_data[0] < stor22:
                            if 0 < stor23:
                                revert with 0, 17
                            if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                revert with 0, 17
                            idx = 0
                            while idx < userStakes[address(arg1)].field_0:
                                mem[0] = sha3(address(arg1), 26)
                                if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                    if userStakes[address(arg1)][idx].field_256:
                                        if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                            revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if stakingTokenAddress != dividendTokenAddress:
                                if ext_call.return_data[0] - stor22 < stor23:
                                    revert with 0, 17
                                if ext_call.return_data[0] - stor22 - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - stor23:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                    revert with 0, 17
                                idx = 0
                                while idx < userStakes[address(arg1)].field_0:
                                    mem[0] = sha3(address(arg1), 26)
                                    if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                        if userStakes[address(arg1)][idx].field_256:
                                            if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                                revert with 0, 17
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if ext_call.return_data[0] - stor22 >= totalStaked:
                                    if ext_call.return_data[0] - stor22 - totalStaked < stor23:
                                        revert with 0, 17
                                    if ext_call.return_data[0] - stor22 - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - totalStaked - stor23:
                                        revert with 0, 17
                                    if not ext_call.return_data[0]:
                                        revert with 0, 18
                                    if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                        revert with 0, 17
                                    idx = 0
                                    while idx < userStakes[address(arg1)].field_0:
                                        mem[0] = sha3(address(arg1), 26)
                                        if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                            if userStakes[address(arg1)][idx].field_256:
                                                if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + ((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                                    revert with 0, 17
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if 0 < stor23:
                                        revert with 0, 17
                                    if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                        revert with 0, 17
                                    if not ext_call.return_data[0]:
                                        revert with 0, 18
                                    if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                        revert with 0, 17
                                    idx = 0
                                    while idx < userStakes[address(arg1)].field_0:
                                        mem[0] = sha3(address(arg1), 26)
                                        if userStakes[address(arg1)][idx].field_0 == uint8(arg2):
                                            if userStakes[address(arg1)][idx].field_256:
                                                if userStakes[address(arg1)][idx].field_256 and sub_92b46e5b + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]) > -1 / userStakes[address(arg1)][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if (sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1 < userStakes[address(arg1)][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !(((sub_92b46e5b * userStakes[address(arg1)][idx].field_256) + (-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0] * userStakes[address(arg1)][idx].field_256) / sub_88bbb0c1) - userStakes[address(arg1)][idx].field_1280):
                                                    revert with 0, 17
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                return 0
            else:
                return 0
        else:
            return 0
    else:
        return 0
}

function harvest() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not totalStaked:
        if 0 >= sub_8e6f4fb7.length:
            revert with 0, 50
        if block.number > uint256(sub_8e6f4fb7.field_1536):
            if uint256(sub_8e6f4fb7.field_1536):
                if uint256(sub_8e6f4fb7.field_1792):
                    if block.number <= bonusEndBlock:
                        if block.number < uint256(sub_8e6f4fb7.field_1536):
                            revert with 0, 17
                        if block.number - uint256(sub_8e6f4fb7.field_1536) and uint256(sub_8e6f4fb7.field_1024) > -1 / block.number - uint256(sub_8e6f4fb7.field_1536):
                            revert with 0, 17
                        if (block.number * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)) and PRECISION_FACTOR > -1 / (block.number * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)):
                            revert with 0, 17
                        if not uint256(sub_8e6f4fb7.field_1792):
                            revert with 0, 18
                        if uint256(sub_8e6f4fb7.field_1280) > !((block.number * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)):
                            revert with 0, 17
                        uint256(sub_8e6f4fb7.field_1280) += (block.number * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)
                    else:
                        if uint256(sub_8e6f4fb7.field_1536) >= bonusEndBlock:
                            if False and uint256(sub_8e6f4fb7.field_1024) > 0:
                                revert with 0, 17
                            if False and PRECISION_FACTOR > 0:
                                revert with 0, 17
                            if not uint256(sub_8e6f4fb7.field_1792):
                                revert with 0, 18
                            if uint256(sub_8e6f4fb7.field_1280) > !(0 / uint256(sub_8e6f4fb7.field_1792)):
                                revert with 0, 17
                            uint256(sub_8e6f4fb7.field_1280) += 0 / uint256(sub_8e6f4fb7.field_1792)
                        else:
                            if bonusEndBlock < uint256(sub_8e6f4fb7.field_1536):
                                revert with 0, 17
                            if bonusEndBlock - uint256(sub_8e6f4fb7.field_1536) and uint256(sub_8e6f4fb7.field_1024) > -1 / bonusEndBlock - uint256(sub_8e6f4fb7.field_1536):
                                revert with 0, 17
                            if (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)) and PRECISION_FACTOR > -1 / (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)):
                                revert with 0, 17
                            if not uint256(sub_8e6f4fb7.field_1792):
                                revert with 0, 18
                            if uint256(sub_8e6f4fb7.field_1280) > !((bonusEndBlock * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)):
                                revert with 0, 17
                            uint256(sub_8e6f4fb7.field_1280) += (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)
                uint256(sub_8e6f4fb7.field_1536) = block.number
        mem[100] = this.address
        require ext_code.size(stakingTokenAddress)
        staticcall stakingTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < totalStaked:
            revert with 0, 17
        if ext_call.return_data[0] - totalStaked and sub_92b46e5b > -1 / ext_call.return_data[0] - totalStaked:
            revert with 0, 17
        if not sub_88bbb0c1:
            revert with 0, 18
        if (ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1 < stor24:
            revert with 0, 17
        if ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24:
            if not dividendTokenAddress:
                call address(walletAAddress) with:
                   value ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24 wei
                     gas 2300 * is_zero(value) wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
            else:
                mem[ceil32(return_data.size) + 132] = address(walletAAddress)
                mem[ceil32(return_data.size) + 164] = ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24
                mem[ceil32(return_data.size) + 96] = 68
                mem[ceil32(return_data.size) + 132 len 28] = Mask(224, 0, stor12)
                mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
                mem[ceil32(return_data.size) + 196] = 32
                mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
                if eth.balance(this.address) < 0:
                    revert with 0, 'Address: insufficient balance for call'
                if not ext_code.size(dividendTokenAddress):
                    revert with 0, 'Address: call to non-contract'
                mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0
                mem[ceil32(return_data.size) + 328] = 0
                call dividendTokenAddress with:
                   funct Mask(32, 224, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0) >> 224
                     gas gas_remaining wei
                    args (Mask(512, -288, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0) << 288)
                if not return_data.size:
                    if not ext_call.success:
                        if ext_call.return_data[0]:
                            revert with memory
                              from 128
                               len ext_call.return_data[0]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0] >= 32
                        require 0, mem[132 len 28] == bool(0, mem[132 len 28])
                        if not 0, mem[132 len 28]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
                        if not mem[ceil32(return_data.size) + 292]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            if stor23 < ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24:
                revert with 0, 17
            stor23 = stor23 - ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) + stor24
    else:
        mem[100] = this.address
        if not dividendTokenAddress:
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if eth.balance(this.address) < stor23:
                revert with 0, 17
            if eth.balance(this.address) - stor23 and sub_88bbb0c1 > -1 / eth.balance(this.address) - stor23:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if sub_92b46e5b > !((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                revert with 0, 17
            sub_92b46e5b += (eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
            stor23 = eth.balance(this.address)
            if 0 >= sub_8e6f4fb7.length:
                revert with 0, 50
            if block.number > uint256(sub_8e6f4fb7.field_1536):
                if uint256(sub_8e6f4fb7.field_1536):
                    if uint256(sub_8e6f4fb7.field_1792):
                        if block.number <= bonusEndBlock:
                            if block.number < uint256(sub_8e6f4fb7.field_1536):
                                revert with 0, 17
                            if block.number - uint256(sub_8e6f4fb7.field_1536) and uint256(sub_8e6f4fb7.field_1024) > -1 / block.number - uint256(sub_8e6f4fb7.field_1536):
                                revert with 0, 17
                            if (block.number * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)) and PRECISION_FACTOR > -1 / (block.number * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)):
                                revert with 0, 17
                            if not uint256(sub_8e6f4fb7.field_1792):
                                revert with 0, 18
                            if uint256(sub_8e6f4fb7.field_1280) > !((block.number * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)):
                                revert with 0, 17
                            uint256(sub_8e6f4fb7.field_1280) += (block.number * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)
                        else:
                            if uint256(sub_8e6f4fb7.field_1536) >= bonusEndBlock:
                                if False and uint256(sub_8e6f4fb7.field_1024) > 0:
                                    revert with 0, 17
                                if False and PRECISION_FACTOR > 0:
                                    revert with 0, 17
                                if not uint256(sub_8e6f4fb7.field_1792):
                                    revert with 0, 18
                                if uint256(sub_8e6f4fb7.field_1280) > !(0 / uint256(sub_8e6f4fb7.field_1792)):
                                    revert with 0, 17
                                uint256(sub_8e6f4fb7.field_1280) += 0 / uint256(sub_8e6f4fb7.field_1792)
                            else:
                                if bonusEndBlock < uint256(sub_8e6f4fb7.field_1536):
                                    revert with 0, 17
                                if bonusEndBlock - uint256(sub_8e6f4fb7.field_1536) and uint256(sub_8e6f4fb7.field_1024) > -1 / bonusEndBlock - uint256(sub_8e6f4fb7.field_1536):
                                    revert with 0, 17
                                if (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)) and PRECISION_FACTOR > -1 / (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)):
                                    revert with 0, 17
                                if not uint256(sub_8e6f4fb7.field_1792):
                                    revert with 0, 18
                                if uint256(sub_8e6f4fb7.field_1280) > !((bonusEndBlock * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)):
                                    revert with 0, 17
                                uint256(sub_8e6f4fb7.field_1280) += (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)
                    uint256(sub_8e6f4fb7.field_1536) = block.number
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < totalStaked:
                revert with 0, 17
            if ext_call.return_data[0] - totalStaked and sub_92b46e5b > -1 / ext_call.return_data[0] - totalStaked:
                revert with 0, 17
            if not sub_88bbb0c1:
                revert with 0, 18
            if (ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1 < stor24:
                revert with 0, 17
            if ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24:
                if not dividendTokenAddress:
                    call address(walletAAddress) with:
                       value ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24 wei
                         gas 2300 * is_zero(value) wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    mem[(2 * ceil32(return_data.size)) + 132] = address(walletAAddress)
                    mem[(2 * ceil32(return_data.size)) + 164] = ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24
                    mem[(2 * ceil32(return_data.size)) + 96] = 68
                    mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 0, stor12)
                    mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0xa9059cbb(?????)
                    mem[(2 * ceil32(return_data.size)) + 196] = 32
                    mem[(2 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
                    if eth.balance(this.address) < 0:
                        revert with 0, 'Address: insufficient balance for call'
                    if not ext_code.size(dividendTokenAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[(2 * ceil32(return_data.size)) + 260 len 96] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0
                    mem[(2 * ceil32(return_data.size)) + 328] = 0
                    call dividendTokenAddress with:
                       funct Mask(32, 224, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0) >> 224
                         gas gas_remaining wei
                        args (Mask(512, -288, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0) << 288)
                    if not return_data.size:
                        if not ext_call.success:
                            if ext_call.return_data[0]:
                                revert with memory
                                  from 128
                                   len ext_call.return_data[0]
                            revert with 0, 'SafeERC20: low-level call failed'
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0] >= 32
                            require 0, mem[132 len 28] == bool(0, mem[132 len 28])
                            if not 0, mem[132 len 28]:
                                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    else:
                        mem[(2 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeERC20: low-level call failed'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[(2 * ceil32(return_data.size)) + 292] == bool(mem[(2 * ceil32(return_data.size)) + 292])
                            if not mem[(2 * ceil32(return_data.size)) + 292]:
                                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                if stor23 < ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24:
                    revert with 0, 17
                stor23 = stor23 - ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) + stor24
        else:
            require ext_code.size(dividendTokenAddress)
            staticcall dividendTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if sub_6e707b73Address != dividendTokenAddress:
                if stakingTokenAddress != dividendTokenAddress:
                    if ext_call.return_data[0] < stor23:
                        revert with 0, 17
                    if ext_call.return_data[0] - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                    stor23 = ext_call.return_data[0]
                else:
                    if ext_call.return_data[0] >= totalStaked:
                        if ext_call.return_data[0] - totalStaked < stor23:
                            revert with 0, 17
                        if ext_call.return_data[0] - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - totalStaked - stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                        stor23 = ext_call.return_data[0] - totalStaked
                    else:
                        if 0 < stor23:
                            revert with 0, 17
                        if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                        stor23 = 0
            else:
                if ext_call.return_data[0] < stor22:
                    if 0 < stor23:
                        revert with 0, 17
                    if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                    stor23 = 0
                else:
                    if stakingTokenAddress != dividendTokenAddress:
                        if ext_call.return_data[0] - stor22 < stor23:
                            revert with 0, 17
                        if ext_call.return_data[0] - stor22 - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                        stor23 = ext_call.return_data[0] - stor22
                    else:
                        if ext_call.return_data[0] - stor22 >= totalStaked:
                            if ext_call.return_data[0] - stor22 - totalStaked < stor23:
                                revert with 0, 17
                            if ext_call.return_data[0] - stor22 - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - totalStaked - stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                            stor23 = ext_call.return_data[0] - stor22 - totalStaked
                        else:
                            if 0 < stor23:
                                revert with 0, 17
                            if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                            stor23 = 0
            if 0 >= sub_8e6f4fb7.length:
                revert with 0, 50
            if block.number > uint256(sub_8e6f4fb7.field_1536):
                if uint256(sub_8e6f4fb7.field_1536):
                    if uint256(sub_8e6f4fb7.field_1792):
                        if block.number <= bonusEndBlock:
                            if block.number < uint256(sub_8e6f4fb7.field_1536):
                                revert with 0, 17
                            if block.number - uint256(sub_8e6f4fb7.field_1536) and uint256(sub_8e6f4fb7.field_1024) > -1 / block.number - uint256(sub_8e6f4fb7.field_1536):
                                revert with 0, 17
                            if (block.number * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)) and PRECISION_FACTOR > -1 / (block.number * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)):
                                revert with 0, 17
                            if not uint256(sub_8e6f4fb7.field_1792):
                                revert with 0, 18
                            if uint256(sub_8e6f4fb7.field_1280) > !((block.number * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)):
                                revert with 0, 17
                            uint256(sub_8e6f4fb7.field_1280) += (block.number * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)
                        else:
                            if uint256(sub_8e6f4fb7.field_1536) >= bonusEndBlock:
                                if False and uint256(sub_8e6f4fb7.field_1024) > 0:
                                    revert with 0, 17
                                if False and PRECISION_FACTOR > 0:
                                    revert with 0, 17
                                if not uint256(sub_8e6f4fb7.field_1792):
                                    revert with 0, 18
                                if uint256(sub_8e6f4fb7.field_1280) > !(0 / uint256(sub_8e6f4fb7.field_1792)):
                                    revert with 0, 17
                                uint256(sub_8e6f4fb7.field_1280) += 0 / uint256(sub_8e6f4fb7.field_1792)
                            else:
                                if bonusEndBlock < uint256(sub_8e6f4fb7.field_1536):
                                    revert with 0, 17
                                if bonusEndBlock - uint256(sub_8e6f4fb7.field_1536) and uint256(sub_8e6f4fb7.field_1024) > -1 / bonusEndBlock - uint256(sub_8e6f4fb7.field_1536):
                                    revert with 0, 17
                                if (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)) and PRECISION_FACTOR > -1 / (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024)) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024)):
                                    revert with 0, 17
                                if not uint256(sub_8e6f4fb7.field_1792):
                                    revert with 0, 18
                                if uint256(sub_8e6f4fb7.field_1280) > !((bonusEndBlock * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)):
                                    revert with 0, 17
                                uint256(sub_8e6f4fb7.field_1280) += (bonusEndBlock * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) - (uint256(sub_8e6f4fb7.field_1536) * uint256(sub_8e6f4fb7.field_1024) * PRECISION_FACTOR) / uint256(sub_8e6f4fb7.field_1792)
                    uint256(sub_8e6f4fb7.field_1536) = block.number
            mem[(2 * ceil32(return_data.size)) + 100] = this.address
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < totalStaked:
                revert with 0, 17
            if ext_call.return_data[0] - totalStaked and sub_92b46e5b > -1 / ext_call.return_data[0] - totalStaked:
                revert with 0, 17
            if not sub_88bbb0c1:
                revert with 0, 18
            if (ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1 < stor24:
                revert with 0, 17
            if ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24:
                if not dividendTokenAddress:
                    call address(walletAAddress) with:
                       value ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24 wei
                         gas 2300 * is_zero(value) wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    mem[(4 * ceil32(return_data.size)) + 132] = address(walletAAddress)
                    mem[(4 * ceil32(return_data.size)) + 164] = ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24
                    mem[(4 * ceil32(return_data.size)) + 96] = 68
                    mem[(4 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 0, stor12)
                    mem[(4 * ceil32(return_data.size)) + 128 len 4] = unknown_0xa9059cbb(?????)
                    mem[(4 * ceil32(return_data.size)) + 196] = 32
                    mem[(4 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
                    if eth.balance(this.address) < 0:
                        revert with 0, 'Address: insufficient balance for call'
                    if not ext_code.size(dividendTokenAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[(4 * ceil32(return_data.size)) + 260 len 96] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0
                    mem[(4 * ceil32(return_data.size)) + 328] = 0
                    call dividendTokenAddress with:
                       funct Mask(32, 224, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0) >> 224
                         gas gas_remaining wei
                        args (Mask(512, -288, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24, 0) << 288)
                    if not return_data.size:
                        if not ext_call.success:
                            if ext_call.return_data[0]:
                                revert with memory
                                  from 128
                                   len ext_call.return_data[0]
                            revert with 0, 'SafeERC20: low-level call failed'
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0] >= 32
                            require 0, mem[132 len 28] == bool(0, mem[132 len 28])
                            if not 0, mem[132 len 28]:
                                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    else:
                        mem[(4 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeERC20: low-level call failed'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[(4 * ceil32(return_data.size)) + 292] == bool(mem[(4 * ceil32(return_data.size)) + 292])
                            if not mem[(4 * ceil32(return_data.size)) + 292]:
                                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                if stor23 < ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) - stor24:
                    revert with 0, 17
                stor23 = stor23 - ((ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1) + stor24
    if ext_call.return_data[0] - totalStaked and sub_92b46e5b > -1 / ext_call.return_data[0] - totalStaked:
        revert with 0, 17
    if not sub_88bbb0c1:
        revert with 0, 18
    stor24 = (ext_call.return_data[0] * sub_92b46e5b) - (totalStaked * sub_92b46e5b) / sub_88bbb0c1
}

function withdraw(uint256 arg1, uint8 arg2) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if stor1.length == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor1.length = 2
    if not arg1:
        revert with 0, 'Amount should be greator than 0'
    if arg2 >= sub_8e6f4fb7.length:
        revert with 0, 'Invalid stake type'
    if not totalStaked:
        if arg2 >= sub_8e6f4fb7.length:
            revert with 0, 50
        if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
            mem[32] = 26
            if arg2 >= sub_8e6f4fb7.length:
                revert with 0, 50
            mem[0] = 25
            idx = 0
            while idx < userStakes[msg.sender].field_0:
                mem[0] = sha3(msg.sender, 26)
                if userStakes[msg.sender][idx].field_0 == arg2:
                    if userStakes[msg.sender][idx].field_256:
                        if not arg1:
                            if arg1 < arg1:
                                revert with 0, 17
                            if userStaked[msg.sender].field_0 < 0:
                                revert with 0, 17
                            if userStaked[msg.sender].field_0 > -1:
                                revert with 0, 17
                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                revert with 0, 17
                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                revert with 0, 17
                            if totalStaked < 0:
                                revert with 0, 17
                            if totalStaked > -1:
                                revert with 0, 17
                            emit Withdraw(arg2 << 248, 0, msg.sender);
                            stor1.length = 1
                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                            revert with 0, 17
                        if not PRECISION_FACTOR:
                            revert with 0, 18
                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                            revert with 0, 17
                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                            revert with 0, 17
                        if not sub_88bbb0c1:
                            revert with 0, 18
                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                            revert with 0, 17
                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                            revert with 0, 17
                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                            revert with 0, 17
                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                if arg1 < userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                userStakes[msg.sender][idx].field_256 = 0
                            else:
                                if userStakes[msg.sender][idx].field_256 < arg1:
                                    revert with 0, 17
                                userStakes[msg.sender][idx].field_256 -= arg1
                        else:
                            if sub_6e707b73Address == stakingTokenAddress:
                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                    revert with 0, 17
                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                    revert with 0, 17
                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                            else:
                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingTokenAddress)
                                    staticcall stakingTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _3352 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _3406 = mem[_3352]
                                    _3460 = mem[64]
                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                    mem[_3460] = sub_c1e22a65.length
                                    if not sub_c1e22a65.length:
                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        mem[mem[64] + 36] = 64
                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                        s = 0
                                        t = _3460 + 32
                                        u = mem[64] + 100
                                        while s < sub_c1e22a65.length:
                                            mem[u] = mem[t + 12 len 20]
                                            s = s + 1
                                            t = t + 32
                                            u = u + 32
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                gas gas_remaining wei
                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6484 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _6592 = mem[_6484]
                                        require mem[_6484] <= test266151307()
                                        require _6484 + return_data.size > _6484 + mem[_6484] + 31
                                        _6700 = mem[_6484 + mem[_6484]]
                                        if mem[_6484 + mem[_6484]] > test266151307():
                                            revert with 0, 65
                                        if (32 * mem[_6484 + mem[_6484]]) + 32 < 0 or _6484 + ceil32(return_data.size) + (32 * mem[_6484 + mem[_6484]]) + 32 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _6484 + ceil32(return_data.size) + (32 * mem[_6484 + mem[_6484]]) + 32
                                        mem[_6484 + ceil32(return_data.size)] = _6700
                                        require return_data.size >= _6592 + (32 * _6700) + 32
                                        t = _6484 + _6592 + 32
                                        u = _6484 + ceil32(return_data.size) + 32
                                        s = 0
                                        while s < _6700:
                                            mem[u] = mem[t]
                                            t = t + 32
                                            u = u + 32
                                            s = s + 1
                                            continue 
                                        if _6700 < 1:
                                            revert with 0, 17
                                        if _6700 - 1 >= _6700:
                                            revert with 0, 50
                                        if mem[(32 * _6700 - 1) + _6484 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6700 - 1) + _6484 + ceil32(return_data.size) + 32]:
                                            revert with 0, 17
                                        if block.timestamp > -601:
                                            revert with 0, 17
                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        mem[mem[64] + 36] = mem[(32 * _6700 - 1) + _6484 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                        mem[mem[64] + 68] = 160
                                        _9832 = mem[_3460]
                                        mem[mem[64] + 164] = mem[_3460]
                                        s = 0
                                        t = _3460 + 32
                                        u = mem[64] + 196
                                        while s < _9832:
                                            mem[u] = mem[t + 12 len 20]
                                            s = s + 1
                                            t = t + 32
                                            u = u + 32
                                            continue 
                                        mem[mem[64] + 100] = this.address
                                        mem[mem[64] + 132] = block.timestamp + 600
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9832) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12262 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _12424 = mem[_12262]
                                        require mem[_12262] <= test266151307()
                                        require _12262 + return_data.size > _12262 + mem[_12262] + 31
                                        _12586 = mem[_12262 + mem[_12262]]
                                        if mem[_12262 + mem[_12262]] > test266151307():
                                            revert with 0, 65
                                        if (32 * mem[_12262 + mem[_12262]]) + 32 < 0 or _12262 + ceil32(return_data.size) + (32 * mem[_12262 + mem[_12262]]) + 32 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _12262 + ceil32(return_data.size) + (32 * mem[_12262 + mem[_12262]]) + 32
                                        mem[_12262 + ceil32(return_data.size)] = _12586
                                        require return_data.size >= _12424 + (32 * _12586) + 32
                                        t = _12262 + _12424 + 32
                                        u = _12262 + ceil32(return_data.size) + 32
                                        s = 0
                                        while s < _12586:
                                            mem[u] = mem[t]
                                            t = t + 32
                                            u = u + 32
                                            s = s + 1
                                            continue 
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingTokenAddress)
                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14800 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_14800] < _3406:
                                            revert with 0, 17
                                        if 0 > !(mem[_14800] - _3406):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14800] - _3406):
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14800] - _3406
                                    else:
                                        mem[0] = 11
                                        mem[_3460 + 32] = address(sub_c1e22a65.field_0)
                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                            s = 0
                                            t = _3460 + 32
                                            u = mem[64] + 100
                                            while s < sub_c1e22a65.length:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            require ext_code.size(uniRouterAddress)
                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6485 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _6593 = mem[_6485]
                                            require mem[_6485] <= test266151307()
                                            require _6485 + return_data.size > _6485 + mem[_6485] + 31
                                            _6701 = mem[_6485 + mem[_6485]]
                                            if mem[_6485 + mem[_6485]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_6485 + mem[_6485]]) + 32 < 0 or _6485 + ceil32(return_data.size) + (32 * mem[_6485 + mem[_6485]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _6485 + ceil32(return_data.size) + (32 * mem[_6485 + mem[_6485]]) + 32
                                            mem[_6485 + ceil32(return_data.size)] = _6701
                                            require return_data.size >= _6593 + (32 * _6701) + 32
                                            t = _6485 + _6593 + 32
                                            u = _6485 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _6701:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            if _6701 < 1:
                                                revert with 0, 17
                                            if _6701 - 1 >= _6701:
                                                revert with 0, 50
                                            if mem[(32 * _6701 - 1) + _6485 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6701 - 1) + _6485 + ceil32(return_data.size) + 32]:
                                                revert with 0, 17
                                            if block.timestamp > -601:
                                                revert with 0, 17
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = mem[(32 * _6701 - 1) + _6485 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                            mem[mem[64] + 68] = 160
                                            _9833 = mem[_3460]
                                            mem[mem[64] + 164] = mem[_3460]
                                            s = 0
                                            t = _3460 + 32
                                            u = mem[64] + 196
                                            while s < _9833:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            mem[mem[64] + 100] = this.address
                                            mem[mem[64] + 132] = block.timestamp + 600
                                            require ext_code.size(uniRouterAddress)
                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9833) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12264 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _12426 = mem[_12264]
                                            require mem[_12264] <= test266151307()
                                            require _12264 + return_data.size > _12264 + mem[_12264] + 31
                                            _12588 = mem[_12264 + mem[_12264]]
                                            if mem[_12264 + mem[_12264]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_12264 + mem[_12264]]) + 32 < 0 or _12264 + ceil32(return_data.size) + (32 * mem[_12264 + mem[_12264]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _12264 + ceil32(return_data.size) + (32 * mem[_12264 + mem[_12264]]) + 32
                                            mem[_12264 + ceil32(return_data.size)] = _12588
                                            require return_data.size >= _12426 + (32 * _12588) + 32
                                            t = _12264 + _12426 + 32
                                            u = _12264 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _12588:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingTokenAddress)
                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14802 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_14802] < _3406:
                                                revert with 0, 17
                                            if 0 > !(mem[_14802] - _3406):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14802] - _3406):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14802] - _3406
                                        else:
                                            mem[_3460 + 64] = address(sub_c1e22a65.field_256)
                                            s = _3460 + 64
                                            t = sha3(11) + 1
                                            while _3460 + (32 * sub_c1e22a65.length) > s:
                                                mem[s + 32] = stor1[t]
                                                s = s + 32
                                                t = t + 1
                                                continue 
                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                            s = 0
                                            t = _3460 + 32
                                            u = mem[64] + 100
                                            while s < sub_c1e22a65.length:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            require ext_code.size(uniRouterAddress)
                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12263 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _12425 = mem[_12263]
                                            require mem[_12263] <= test266151307()
                                            require _12263 + return_data.size > _12263 + mem[_12263] + 31
                                            _12587 = mem[_12263 + mem[_12263]]
                                            if mem[_12263 + mem[_12263]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_12263 + mem[_12263]]) + 32 < 0 or _12263 + ceil32(return_data.size) + (32 * mem[_12263 + mem[_12263]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _12263 + ceil32(return_data.size) + (32 * mem[_12263 + mem[_12263]]) + 32
                                            mem[_12263 + ceil32(return_data.size)] = _12587
                                            require return_data.size >= _12425 + (32 * _12587) + 32
                                            t = _12263 + _12425 + 32
                                            u = _12263 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _12587:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            if _12587 < 1:
                                                revert with 0, 17
                                            if _12587 - 1 >= _12587:
                                                revert with 0, 50
                                            _14962 = mem[(32 * _12587 - 1) + _12263 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _12587 - 1) + _12263 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12587 - 1) + _12263 + ceil32(return_data.size) + 32]:
                                                revert with 0, 17
                                            if block.timestamp > -601:
                                                revert with 0, 17
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = _14962 * slippageFactor / 1000
                                            mem[mem[64] + 68] = 160
                                            _15178 = mem[_3460]
                                            mem[mem[64] + 164] = mem[_3460]
                                            s = 0
                                            t = _3460 + 32
                                            u = mem[64] + 196
                                            while s < _15178:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            mem[mem[64] + 100] = this.address
                                            mem[mem[64] + 132] = block.timestamp + 600
                                            require ext_code.size(uniRouterAddress)
                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14962 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15178) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15934 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15988 = mem[_15934]
                                            require mem[_15934] <= test266151307()
                                            require _15934 + return_data.size > _15934 + mem[_15934] + 31
                                            _16042 = mem[_15934 + mem[_15934]]
                                            if mem[_15934 + mem[_15934]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_15934 + mem[_15934]]) + 32 < 0 or _15934 + ceil32(return_data.size) + (32 * mem[_15934 + mem[_15934]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _15934 + ceil32(return_data.size) + (32 * mem[_15934 + mem[_15934]]) + 32
                                            mem[_15934 + ceil32(return_data.size)] = _16042
                                            require return_data.size >= _15988 + (32 * _16042) + 32
                                            t = _15934 + _15988 + 32
                                            u = _15934 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _16042:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingTokenAddress)
                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16582 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16582] < _3406:
                                                revert with 0, 17
                                            if 0 > !(mem[_16582] - _3406):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16582] - _3406):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16582] - _3406
                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                            revert with 0, 17
                        if not PRECISION_FACTOR:
                            revert with 0, 18
                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                            revert with 0, 17
                        if not sub_88bbb0c1:
                            revert with 0, 18
                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                mem[32] = 26
                if arg2 >= sub_8e6f4fb7.length:
                    revert with 0, 50
                mem[0] = 25
                idx = 0
                while idx < userStakes[msg.sender].field_0:
                    mem[0] = sha3(msg.sender, 26)
                    if userStakes[msg.sender][idx].field_0 == arg2:
                        if userStakes[msg.sender][idx].field_256:
                            if not arg1:
                                if arg1 < arg1:
                                    revert with 0, 17
                                if userStaked[msg.sender].field_0 < 0:
                                    revert with 0, 17
                                if userStaked[msg.sender].field_0 > -1:
                                    revert with 0, 17
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                    revert with 0, 17
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                    revert with 0, 17
                                if totalStaked < 0:
                                    revert with 0, 17
                                if totalStaked > -1:
                                    revert with 0, 17
                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                stor1.length = 1
                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not PRECISION_FACTOR:
                                revert with 0, 18
                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                revert with 0, 17
                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not sub_88bbb0c1:
                                revert with 0, 18
                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                revert with 0, 17
                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                revert with 0, 17
                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                revert with 0, 17
                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 = 0
                                else:
                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 -= arg1
                            else:
                                if sub_6e707b73Address == stakingTokenAddress:
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                else:
                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingTokenAddress)
                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _3357 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _3411 = mem[_3357]
                                        _3465 = mem[64]
                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                        mem[_3465] = sub_c1e22a65.length
                                        if not sub_c1e22a65.length:
                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                            s = 0
                                            t = _3465 + 32
                                            u = mem[64] + 100
                                            while s < sub_c1e22a65.length:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            require ext_code.size(uniRouterAddress)
                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6494 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _6602 = mem[_6494]
                                            require mem[_6494] <= test266151307()
                                            require _6494 + return_data.size > _6494 + mem[_6494] + 31
                                            _6710 = mem[_6494 + mem[_6494]]
                                            if mem[_6494 + mem[_6494]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_6494 + mem[_6494]]) + 32 < 0 or _6494 + ceil32(return_data.size) + (32 * mem[_6494 + mem[_6494]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _6494 + ceil32(return_data.size) + (32 * mem[_6494 + mem[_6494]]) + 32
                                            mem[_6494 + ceil32(return_data.size)] = _6710
                                            require return_data.size >= _6602 + (32 * _6710) + 32
                                            t = _6494 + _6602 + 32
                                            u = _6494 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _6710:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            if _6710 < 1:
                                                revert with 0, 17
                                            if _6710 - 1 >= _6710:
                                                revert with 0, 50
                                            if mem[(32 * _6710 - 1) + _6494 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6710 - 1) + _6494 + ceil32(return_data.size) + 32]:
                                                revert with 0, 17
                                            if block.timestamp > -601:
                                                revert with 0, 17
                                            _9685 = mem[64]
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = mem[(32 * _6710 - 1) + _6494 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                            mem[mem[64] + 68] = 160
                                            _9842 = mem[_3465]
                                            mem[mem[64] + 164] = mem[_3465]
                                            s = 0
                                            t = _3465 + 32
                                            u = mem[64] + 196
                                            while s < _9842:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            mem[_9685 + 100] = this.address
                                            mem[_9685 + 132] = block.timestamp + 600
                                            require ext_code.size(uniRouterAddress)
                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _9685 + (32 * _9842) + -mem[64] + 192]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12277 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _12439 = mem[_12277]
                                            require mem[_12277] <= test266151307()
                                            require _12277 + return_data.size > _12277 + mem[_12277] + 31
                                            _12601 = mem[_12277 + mem[_12277]]
                                            if mem[_12277 + mem[_12277]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_12277 + mem[_12277]]) + 32 < 0 or _12277 + ceil32(return_data.size) + (32 * mem[_12277 + mem[_12277]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _12277 + ceil32(return_data.size) + (32 * mem[_12277 + mem[_12277]]) + 32
                                            mem[_12277 + ceil32(return_data.size)] = _12601
                                            require return_data.size >= _12439 + (32 * _12601) + 32
                                            t = _12277 + _12439 + 32
                                            u = _12277 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _12601:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingTokenAddress)
                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14815 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_14815] < _3411:
                                                revert with 0, 17
                                            if 0 > !(mem[_14815] - _3411):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14815] - _3411):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14815] - _3411
                                        else:
                                            mem[0] = 11
                                            mem[_3465 + 32] = address(sub_c1e22a65.field_0)
                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                s = 0
                                                t = _3465 + 32
                                                u = mem[64] + 100
                                                while s < sub_c1e22a65.length:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                require ext_code.size(uniRouterAddress)
                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6495 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _6603 = mem[_6495]
                                                require mem[_6495] <= test266151307()
                                                require _6495 + return_data.size > _6495 + mem[_6495] + 31
                                                _6711 = mem[_6495 + mem[_6495]]
                                                if mem[_6495 + mem[_6495]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_6495 + mem[_6495]]) + 32 < 0 or _6495 + ceil32(return_data.size) + (32 * mem[_6495 + mem[_6495]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _6495 + ceil32(return_data.size) + (32 * mem[_6495 + mem[_6495]]) + 32
                                                mem[_6495 + ceil32(return_data.size)] = _6711
                                                require return_data.size >= _6603 + (32 * _6711) + 32
                                                t = _6495 + _6603 + 32
                                                u = _6495 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _6711:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                if _6711 < 1:
                                                    revert with 0, 17
                                                if _6711 - 1 >= _6711:
                                                    revert with 0, 50
                                                if mem[(32 * _6711 - 1) + _6495 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6711 - 1) + _6495 + ceil32(return_data.size) + 32]:
                                                    revert with 0, 17
                                                if block.timestamp > -601:
                                                    revert with 0, 17
                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = mem[(32 * _6711 - 1) + _6495 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                mem[mem[64] + 68] = 160
                                                _9843 = mem[_3465]
                                                mem[mem[64] + 164] = mem[_3465]
                                                s = 0
                                                t = _3465 + 32
                                                u = mem[64] + 196
                                                while s < _9843:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                mem[mem[64] + 100] = this.address
                                                mem[mem[64] + 132] = block.timestamp + 600
                                                require ext_code.size(uniRouterAddress)
                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9843) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12279 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _12441 = mem[_12279]
                                                require mem[_12279] <= test266151307()
                                                require _12279 + return_data.size > _12279 + mem[_12279] + 31
                                                _12603 = mem[_12279 + mem[_12279]]
                                                if mem[_12279 + mem[_12279]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_12279 + mem[_12279]]) + 32 < 0 or _12279 + ceil32(return_data.size) + (32 * mem[_12279 + mem[_12279]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _12279 + ceil32(return_data.size) + (32 * mem[_12279 + mem[_12279]]) + 32
                                                mem[_12279 + ceil32(return_data.size)] = _12603
                                                require return_data.size >= _12441 + (32 * _12603) + 32
                                                t = _12279 + _12441 + 32
                                                u = _12279 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _12603:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14817 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_14817] < _3411:
                                                    revert with 0, 17
                                                if 0 > !(mem[_14817] - _3411):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14817] - _3411):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14817] - _3411
                                            else:
                                                mem[_3465 + 64] = address(sub_c1e22a65.field_256)
                                                s = _3465 + 64
                                                t = sha3(11) + 1
                                                while _3465 + (32 * sub_c1e22a65.length) > s:
                                                    mem[s + 32] = stor1[t]
                                                    s = s + 32
                                                    t = t + 1
                                                    continue 
                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                s = 0
                                                t = _3465 + 32
                                                u = mem[64] + 100
                                                while s < sub_c1e22a65.length:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                require ext_code.size(uniRouterAddress)
                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12278 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _12440 = mem[_12278]
                                                require mem[_12278] <= test266151307()
                                                require _12278 + return_data.size > _12278 + mem[_12278] + 31
                                                _12602 = mem[_12278 + mem[_12278]]
                                                if mem[_12278 + mem[_12278]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_12278 + mem[_12278]]) + 32 < 0 or _12278 + ceil32(return_data.size) + (32 * mem[_12278 + mem[_12278]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _12278 + ceil32(return_data.size) + (32 * mem[_12278 + mem[_12278]]) + 32
                                                mem[_12278 + ceil32(return_data.size)] = _12602
                                                require return_data.size >= _12440 + (32 * _12602) + 32
                                                t = _12278 + _12440 + 32
                                                u = _12278 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _12602:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                if _12602 < 1:
                                                    revert with 0, 17
                                                if _12602 - 1 >= _12602:
                                                    revert with 0, 50
                                                _14967 = mem[(32 * _12602 - 1) + _12278 + ceil32(return_data.size) + 32]
                                                if mem[(32 * _12602 - 1) + _12278 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12602 - 1) + _12278 + ceil32(return_data.size) + 32]:
                                                    revert with 0, 17
                                                if block.timestamp > -601:
                                                    revert with 0, 17
                                                _15129 = mem[64]
                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = _14967 * slippageFactor / 1000
                                                mem[mem[64] + 68] = 160
                                                _15183 = mem[_3465]
                                                mem[mem[64] + 164] = mem[_3465]
                                                s = 0
                                                t = _3465 + 32
                                                u = mem[64] + 196
                                                while s < _15183:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                mem[_15129 + 100] = this.address
                                                mem[_15129 + 132] = block.timestamp + 600
                                                require ext_code.size(uniRouterAddress)
                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _15129 + (32 * _15183) + -mem[64] + 192]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15939 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _15993 = mem[_15939]
                                                require mem[_15939] <= test266151307()
                                                require _15939 + return_data.size > _15939 + mem[_15939] + 31
                                                _16047 = mem[_15939 + mem[_15939]]
                                                if mem[_15939 + mem[_15939]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_15939 + mem[_15939]]) + 32 < 0 or _15939 + ceil32(return_data.size) + (32 * mem[_15939 + mem[_15939]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _15939 + ceil32(return_data.size) + (32 * mem[_15939 + mem[_15939]]) + 32
                                                mem[_15939 + ceil32(return_data.size)] = _16047
                                                require return_data.size >= _15993 + (32 * _16047) + 32
                                                t = _15939 + _15993 + 32
                                                u = _15939 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _16047:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16587 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16587] < _3411:
                                                    revert with 0, 17
                                                if 0 > !(mem[_16587] - _3411):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16587] - _3411):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16587] - _3411
                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not PRECISION_FACTOR:
                                revert with 0, 18
                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not sub_88bbb0c1:
                                revert with 0, 18
                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                    sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                    mem[32] = 26
                    if arg2 >= sub_8e6f4fb7.length:
                        revert with 0, 50
                    mem[0] = 25
                    idx = 0
                    while idx < userStakes[msg.sender].field_0:
                        mem[0] = sha3(msg.sender, 26)
                        if userStakes[msg.sender][idx].field_0 == arg2:
                            if userStakes[msg.sender][idx].field_256:
                                if not arg1:
                                    if arg1 < arg1:
                                        revert with 0, 17
                                    if userStaked[msg.sender].field_0 < 0:
                                        revert with 0, 17
                                    if userStaked[msg.sender].field_0 > -1:
                                        revert with 0, 17
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                        revert with 0, 17
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                        revert with 0, 17
                                    if totalStaked < 0:
                                        revert with 0, 17
                                    if totalStaked > -1:
                                        revert with 0, 17
                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                    stor1.length = 1
                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not PRECISION_FACTOR:
                                    revert with 0, 18
                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                    revert with 0, 17
                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not sub_88bbb0c1:
                                    revert with 0, 18
                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                    revert with 0, 17
                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                    revert with 0, 17
                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                    revert with 0, 17
                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = 0
                                    else:
                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 -= arg1
                                else:
                                    if sub_6e707b73Address == stakingTokenAddress:
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                    else:
                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingTokenAddress)
                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _3356 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _3410 = mem[_3356]
                                            _3464 = mem[64]
                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                            mem[_3464] = sub_c1e22a65.length
                                            if not sub_c1e22a65.length:
                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                s = 0
                                                t = _3464 + 32
                                                u = mem[64] + 100
                                                while s < sub_c1e22a65.length:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                require ext_code.size(uniRouterAddress)
                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6492 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _6600 = mem[_6492]
                                                require mem[_6492] <= test266151307()
                                                require _6492 + return_data.size > _6492 + mem[_6492] + 31
                                                _6708 = mem[_6492 + mem[_6492]]
                                                if mem[_6492 + mem[_6492]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_6492 + mem[_6492]]) + 32 < 0 or _6492 + ceil32(return_data.size) + (32 * mem[_6492 + mem[_6492]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _6492 + ceil32(return_data.size) + (32 * mem[_6492 + mem[_6492]]) + 32
                                                mem[_6492 + ceil32(return_data.size)] = _6708
                                                require return_data.size >= _6600 + (32 * _6708) + 32
                                                t = _6492 + _6600 + 32
                                                u = _6492 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _6708:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                if _6708 < 1:
                                                    revert with 0, 17
                                                if _6708 - 1 >= _6708:
                                                    revert with 0, 50
                                                _9304 = mem[(32 * _6708 - 1) + _6492 + ceil32(return_data.size) + 32]
                                                if mem[(32 * _6708 - 1) + _6492 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6708 - 1) + _6492 + ceil32(return_data.size) + 32]:
                                                    revert with 0, 17
                                                if block.timestamp > -601:
                                                    revert with 0, 17
                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = _9304 * slippageFactor / 1000
                                                mem[mem[64] + 68] = 160
                                                _9840 = mem[_3464]
                                                mem[mem[64] + 164] = mem[_3464]
                                                s = 0
                                                t = _3464 + 32
                                                u = mem[64] + 196
                                                while s < _9840:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                mem[mem[64] + 100] = this.address
                                                mem[mem[64] + 132] = block.timestamp + 600
                                                require ext_code.size(uniRouterAddress)
                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9304 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9840) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12274 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _12436 = mem[_12274]
                                                require mem[_12274] <= test266151307()
                                                require _12274 + return_data.size > _12274 + mem[_12274] + 31
                                                _12598 = mem[_12274 + mem[_12274]]
                                                if mem[_12274 + mem[_12274]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_12274 + mem[_12274]]) + 32 < 0 or _12274 + ceil32(return_data.size) + (32 * mem[_12274 + mem[_12274]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _12274 + ceil32(return_data.size) + (32 * mem[_12274 + mem[_12274]]) + 32
                                                mem[_12274 + ceil32(return_data.size)] = _12598
                                                require return_data.size >= _12436 + (32 * _12598) + 32
                                                t = _12274 + _12436 + 32
                                                u = _12274 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _12598:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14812 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_14812] < _3410:
                                                    revert with 0, 17
                                                if 0 > !(mem[_14812] - _3410):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14812] - _3410):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14812] - _3410
                                            else:
                                                mem[0] = 11
                                                mem[_3464 + 32] = address(sub_c1e22a65.field_0)
                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3464 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6493 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _6601 = mem[_6493]
                                                    require mem[_6493] <= test266151307()
                                                    require _6493 + return_data.size > _6493 + mem[_6493] + 31
                                                    _6709 = mem[_6493 + mem[_6493]]
                                                    if mem[_6493 + mem[_6493]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_6493 + mem[_6493]]) + 32 < 0 or _6493 + ceil32(return_data.size) + (32 * mem[_6493 + mem[_6493]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _6493 + ceil32(return_data.size) + (32 * mem[_6493 + mem[_6493]]) + 32
                                                    mem[_6493 + ceil32(return_data.size)] = _6709
                                                    require return_data.size >= _6601 + (32 * _6709) + 32
                                                    t = _6493 + _6601 + 32
                                                    u = _6493 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _6709:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _6709 < 1:
                                                        revert with 0, 17
                                                    if _6709 - 1 >= _6709:
                                                        revert with 0, 50
                                                    _9306 = mem[(32 * _6709 - 1) + _6493 + ceil32(return_data.size) + 32]
                                                    if mem[(32 * _6709 - 1) + _6493 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6709 - 1) + _6493 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = _9306 * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _9841 = mem[_3464]
                                                    mem[mem[64] + 164] = mem[_3464]
                                                    s = 0
                                                    t = _3464 + 32
                                                    u = mem[64] + 196
                                                    while s < _9841:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9306 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9841) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12276 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12438 = mem[_12276]
                                                    require mem[_12276] <= test266151307()
                                                    require _12276 + return_data.size > _12276 + mem[_12276] + 31
                                                    _12600 = mem[_12276 + mem[_12276]]
                                                    if mem[_12276 + mem[_12276]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12276 + mem[_12276]]) + 32 < 0 or _12276 + ceil32(return_data.size) + (32 * mem[_12276 + mem[_12276]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12276 + ceil32(return_data.size) + (32 * mem[_12276 + mem[_12276]]) + 32
                                                    mem[_12276 + ceil32(return_data.size)] = _12600
                                                    require return_data.size >= _12438 + (32 * _12600) + 32
                                                    t = _12276 + _12438 + 32
                                                    u = _12276 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12600:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14814 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_14814] < _3410:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_14814] - _3410):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14814] - _3410):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14814] - _3410
                                                else:
                                                    mem[_3464 + 64] = address(sub_c1e22a65.field_256)
                                                    s = _3464 + 64
                                                    t = sha3(11) + 1
                                                    while _3464 + (32 * sub_c1e22a65.length) > s:
                                                        mem[s + 32] = stor1[t]
                                                        s = s + 32
                                                        t = t + 1
                                                        continue 
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3464 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12275 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12437 = mem[_12275]
                                                    require mem[_12275] <= test266151307()
                                                    require _12275 + return_data.size > _12275 + mem[_12275] + 31
                                                    _12599 = mem[_12275 + mem[_12275]]
                                                    if mem[_12275 + mem[_12275]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12275 + mem[_12275]]) + 32 < 0 or _12275 + ceil32(return_data.size) + (32 * mem[_12275 + mem[_12275]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12275 + ceil32(return_data.size) + (32 * mem[_12275 + mem[_12275]]) + 32
                                                    mem[_12275 + ceil32(return_data.size)] = _12599
                                                    require return_data.size >= _12437 + (32 * _12599) + 32
                                                    t = _12275 + _12437 + 32
                                                    u = _12275 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12599:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _12599 < 1:
                                                        revert with 0, 17
                                                    if _12599 - 1 >= _12599:
                                                        revert with 0, 50
                                                    if mem[(32 * _12599 - 1) + _12275 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12599 - 1) + _12275 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _12599 - 1) + _12275 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _15182 = mem[_3464]
                                                    mem[mem[64] + 164] = mem[_3464]
                                                    s = 0
                                                    t = _3464 + 32
                                                    u = mem[64] + 196
                                                    while s < _15182:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15182) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _15938 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _15992 = mem[_15938]
                                                    require mem[_15938] <= test266151307()
                                                    require _15938 + return_data.size > _15938 + mem[_15938] + 31
                                                    _16046 = mem[_15938 + mem[_15938]]
                                                    if mem[_15938 + mem[_15938]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_15938 + mem[_15938]]) + 32 < 0 or _15938 + ceil32(return_data.size) + (32 * mem[_15938 + mem[_15938]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _15938 + ceil32(return_data.size) + (32 * mem[_15938 + mem[_15938]]) + 32
                                                    mem[_15938 + ceil32(return_data.size)] = _16046
                                                    require return_data.size >= _15992 + (32 * _16046) + 32
                                                    t = _15938 + _15992 + 32
                                                    u = _15938 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _16046:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16586 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16586] < _3410:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_16586] - _3410):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16586] - _3410):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16586] - _3410
                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not PRECISION_FACTOR:
                                    revert with 0, 18
                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not sub_88bbb0c1:
                                    revert with 0, 18
                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    if block.number <= bonusEndBlock:
                        if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            revert with 0, 17
                        if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            revert with 0, 17
                        if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                            revert with 0, 17
                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                            revert with 0, 18
                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                            revert with 0, 17
                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                        mem[32] = 26
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        mem[0] = 25
                        idx = 0
                        while idx < userStakes[msg.sender].field_0:
                            mem[0] = sha3(msg.sender, 26)
                            if userStakes[msg.sender][idx].field_0 == arg2:
                                if userStakes[msg.sender][idx].field_256:
                                    if not arg1:
                                        if arg1 < arg1:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 < 0:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 > -1:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                            revert with 0, 17
                                        if totalStaked < 0:
                                            revert with 0, 17
                                        if totalStaked > -1:
                                            revert with 0, 17
                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                        stor1.length = 1
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = 0
                                        else:
                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 -= arg1
                                    else:
                                        if sub_6e707b73Address == stakingTokenAddress:
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        else:
                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _3355 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _3409 = mem[_3355]
                                                _3463 = mem[64]
                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                mem[_3463] = sub_c1e22a65.length
                                                if not sub_c1e22a65.length:
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3463 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6490 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _6598 = mem[_6490]
                                                    require mem[_6490] <= test266151307()
                                                    require _6490 + return_data.size > _6490 + mem[_6490] + 31
                                                    _6706 = mem[_6490 + mem[_6490]]
                                                    if mem[_6490 + mem[_6490]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_6490 + mem[_6490]]) + 32 < 0 or _6490 + ceil32(return_data.size) + (32 * mem[_6490 + mem[_6490]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _6490 + ceil32(return_data.size) + (32 * mem[_6490 + mem[_6490]]) + 32
                                                    mem[_6490 + ceil32(return_data.size)] = _6706
                                                    require return_data.size >= _6598 + (32 * _6706) + 32
                                                    t = _6490 + _6598 + 32
                                                    u = _6490 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _6706:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _6706 < 1:
                                                        revert with 0, 17
                                                    if _6706 - 1 >= _6706:
                                                        revert with 0, 50
                                                    if mem[(32 * _6706 - 1) + _6490 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6706 - 1) + _6490 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _6706 - 1) + _6490 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _9838 = mem[_3463]
                                                    mem[mem[64] + 164] = mem[_3463]
                                                    s = 0
                                                    t = _3463 + 32
                                                    u = mem[64] + 196
                                                    while s < _9838:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9838) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12271 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12433 = mem[_12271]
                                                    require mem[_12271] <= test266151307()
                                                    require _12271 + return_data.size > _12271 + mem[_12271] + 31
                                                    _12595 = mem[_12271 + mem[_12271]]
                                                    if mem[_12271 + mem[_12271]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12271 + mem[_12271]]) + 32 < 0 or _12271 + ceil32(return_data.size) + (32 * mem[_12271 + mem[_12271]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12271 + ceil32(return_data.size) + (32 * mem[_12271 + mem[_12271]]) + 32
                                                    mem[_12271 + ceil32(return_data.size)] = _12595
                                                    require return_data.size >= _12433 + (32 * _12595) + 32
                                                    t = _12271 + _12433 + 32
                                                    u = _12271 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12595:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14809 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_14809] < _3409:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_14809] - _3409):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14809] - _3409):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14809] - _3409
                                                else:
                                                    mem[0] = 11
                                                    mem[_3463 + 32] = address(sub_c1e22a65.field_0)
                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3463 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6491 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6599 = mem[_6491]
                                                        require mem[_6491] <= test266151307()
                                                        require _6491 + return_data.size > _6491 + mem[_6491] + 31
                                                        _6707 = mem[_6491 + mem[_6491]]
                                                        if mem[_6491 + mem[_6491]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6491 + mem[_6491]]) + 32 < 0 or _6491 + ceil32(return_data.size) + (32 * mem[_6491 + mem[_6491]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6491 + ceil32(return_data.size) + (32 * mem[_6491 + mem[_6491]]) + 32
                                                        mem[_6491 + ceil32(return_data.size)] = _6707
                                                        require return_data.size >= _6599 + (32 * _6707) + 32
                                                        t = _6491 + _6599 + 32
                                                        u = _6491 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6707:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6707 < 1:
                                                            revert with 0, 17
                                                        if _6707 - 1 >= _6707:
                                                            revert with 0, 50
                                                        if mem[(32 * _6707 - 1) + _6491 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6707 - 1) + _6491 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6707 - 1) + _6491 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9839 = mem[_3463]
                                                        mem[mem[64] + 164] = mem[_3463]
                                                        s = 0
                                                        t = _3463 + 32
                                                        u = mem[64] + 196
                                                        while s < _9839:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9839) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12273 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12435 = mem[_12273]
                                                        require mem[_12273] <= test266151307()
                                                        require _12273 + return_data.size > _12273 + mem[_12273] + 31
                                                        _12597 = mem[_12273 + mem[_12273]]
                                                        if mem[_12273 + mem[_12273]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12273 + mem[_12273]]) + 32 < 0 or _12273 + ceil32(return_data.size) + (32 * mem[_12273 + mem[_12273]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12273 + ceil32(return_data.size) + (32 * mem[_12273 + mem[_12273]]) + 32
                                                        mem[_12273 + ceil32(return_data.size)] = _12597
                                                        require return_data.size >= _12435 + (32 * _12597) + 32
                                                        t = _12273 + _12435 + 32
                                                        u = _12273 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12597:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14811 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14811] < _3409:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14811] - _3409):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14811] - _3409):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14811] - _3409
                                                    else:
                                                        mem[_3463 + 64] = address(sub_c1e22a65.field_256)
                                                        s = _3463 + 64
                                                        t = sha3(11) + 1
                                                        while _3463 + (32 * sub_c1e22a65.length) > s:
                                                            mem[s + 32] = stor1[t]
                                                            s = s + 32
                                                            t = t + 1
                                                            continue 
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3463 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12272 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12434 = mem[_12272]
                                                        require mem[_12272] <= test266151307()
                                                        require _12272 + return_data.size > _12272 + mem[_12272] + 31
                                                        _12596 = mem[_12272 + mem[_12272]]
                                                        if mem[_12272 + mem[_12272]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12272 + mem[_12272]]) + 32 < 0 or _12272 + ceil32(return_data.size) + (32 * mem[_12272 + mem[_12272]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12272 + ceil32(return_data.size) + (32 * mem[_12272 + mem[_12272]]) + 32
                                                        mem[_12272 + ceil32(return_data.size)] = _12596
                                                        require return_data.size >= _12434 + (32 * _12596) + 32
                                                        t = _12272 + _12434 + 32
                                                        u = _12272 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12596:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _12596 < 1:
                                                            revert with 0, 17
                                                        if _12596 - 1 >= _12596:
                                                            revert with 0, 50
                                                        if mem[(32 * _12596 - 1) + _12272 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12596 - 1) + _12272 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _12596 - 1) + _12272 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _15181 = mem[_3463]
                                                        mem[mem[64] + 164] = mem[_3463]
                                                        s = 0
                                                        t = _3463 + 32
                                                        u = mem[64] + 196
                                                        while s < _15181:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15181) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _15937 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _15991 = mem[_15937]
                                                        require mem[_15937] <= test266151307()
                                                        require _15937 + return_data.size > _15937 + mem[_15937] + 31
                                                        _16045 = mem[_15937 + mem[_15937]]
                                                        if mem[_15937 + mem[_15937]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_15937 + mem[_15937]]) + 32 < 0 or _15937 + ceil32(return_data.size) + (32 * mem[_15937 + mem[_15937]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _15937 + ceil32(return_data.size) + (32 * mem[_15937 + mem[_15937]]) + 32
                                                        mem[_15937 + ceil32(return_data.size)] = _16045
                                                        require return_data.size >= _15991 + (32 * _16045) + 32
                                                        t = _15937 + _15991 + 32
                                                        u = _15937 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _16045:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _16585 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_16585] < _3409:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_16585] - _3409):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16585] - _3409):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16585] - _3409
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                            if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                revert with 0, 17
                            if False and PRECISION_FACTOR > 0:
                                revert with 0, 17
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                revert with 0, 18
                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                revert with 0, 17
                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3354 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3408 = mem[_3354]
                                                    _3462 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3462] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3462 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6488 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6596 = mem[_6488]
                                                        require mem[_6488] <= test266151307()
                                                        require _6488 + return_data.size > _6488 + mem[_6488] + 31
                                                        _6704 = mem[_6488 + mem[_6488]]
                                                        if mem[_6488 + mem[_6488]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6488 + mem[_6488]]) + 32 < 0 or _6488 + ceil32(return_data.size) + (32 * mem[_6488 + mem[_6488]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6488 + ceil32(return_data.size) + (32 * mem[_6488 + mem[_6488]]) + 32
                                                        mem[_6488 + ceil32(return_data.size)] = _6704
                                                        require return_data.size >= _6596 + (32 * _6704) + 32
                                                        t = _6488 + _6596 + 32
                                                        u = _6488 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6704:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6704 < 1:
                                                            revert with 0, 17
                                                        if _6704 - 1 >= _6704:
                                                            revert with 0, 50
                                                        if mem[(32 * _6704 - 1) + _6488 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6704 - 1) + _6488 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6704 - 1) + _6488 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9836 = mem[_3462]
                                                        mem[mem[64] + 164] = mem[_3462]
                                                        s = 0
                                                        t = _3462 + 32
                                                        u = mem[64] + 196
                                                        while s < _9836:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9836) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12268 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12430 = mem[_12268]
                                                        require mem[_12268] <= test266151307()
                                                        require _12268 + return_data.size > _12268 + mem[_12268] + 31
                                                        _12592 = mem[_12268 + mem[_12268]]
                                                        if mem[_12268 + mem[_12268]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12268 + mem[_12268]]) + 32 < 0 or _12268 + ceil32(return_data.size) + (32 * mem[_12268 + mem[_12268]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12268 + ceil32(return_data.size) + (32 * mem[_12268 + mem[_12268]]) + 32
                                                        mem[_12268 + ceil32(return_data.size)] = _12592
                                                        require return_data.size >= _12430 + (32 * _12592) + 32
                                                        t = _12268 + _12430 + 32
                                                        u = _12268 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12592:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14806 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14806] < _3408:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14806] - _3408):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14806] - _3408):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14806] - _3408
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3462 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 > 64:
                                                            mem[_3462 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3462 + 64
                                                            t = sha3(11) + 1
                                                            while _3462 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3462 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12269 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12431 = mem[_12269]
                                                            require mem[_12269] <= test266151307()
                                                            require _12269 + return_data.size > _12269 + mem[_12269] + 31
                                                            _12593 = mem[_12269 + mem[_12269]]
                                                            if mem[_12269 + mem[_12269]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12269 + mem[_12269]]) + 32 < 0 or _12269 + ceil32(return_data.size) + (32 * mem[_12269 + mem[_12269]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12269 + ceil32(return_data.size) + (32 * mem[_12269 + mem[_12269]]) + 32
                                                            mem[_12269 + ceil32(return_data.size)] = _12593
                                                            require return_data.size >= _12431 + (32 * _12593) + 32
                                                            t = _12269 + _12431 + 32
                                                            u = _12269 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12593:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12593 < 1:
                                                                revert with 0, 17
                                                            if _12593 - 1 >= _12593:
                                                                revert with 0, 50
                                                            if mem[(32 * _12593 - 1) + _12269 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12593 - 1) + _12269 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _12593 - 1) + _12269 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15180 = mem[_3462]
                                                            mem[mem[64] + 164] = mem[_3462]
                                                            s = 0
                                                            t = _3462 + 32
                                                            u = mem[64] + 196
                                                            while s < _15180:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15180) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15936 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _15990 = mem[_15936]
                                                            require mem[_15936] <= test266151307()
                                                            require _15936 + return_data.size > _15936 + mem[_15936] + 31
                                                            _16044 = mem[_15936 + mem[_15936]]
                                                            if mem[_15936 + mem[_15936]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15936 + mem[_15936]]) + 32 < 0 or _15936 + ceil32(return_data.size) + (32 * mem[_15936 + mem[_15936]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15936 + ceil32(return_data.size) + (32 * mem[_15936 + mem[_15936]]) + 32
                                                            mem[_15936 + ceil32(return_data.size)] = _16044
                                                            require return_data.size >= _15990 + (32 * _16044) + 32
                                                            t = _15936 + _15990 + 32
                                                            u = _15936 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16044:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16584 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16584] < _3408:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16584] - _3408):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16584] - _3408):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16584] - _3408
                                                        else:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3462 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6489 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6597 = mem[_6489]
                                                            require mem[_6489] <= test266151307()
                                                            require _6489 + return_data.size > _6489 + mem[_6489] + 31
                                                            _6705 = mem[_6489 + mem[_6489]]
                                                            if mem[_6489 + mem[_6489]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6489 + mem[_6489]]) + 32 < 0 or _6489 + ceil32(return_data.size) + (32 * mem[_6489 + mem[_6489]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6489 + ceil32(return_data.size) + (32 * mem[_6489 + mem[_6489]]) + 32
                                                            mem[_6489 + ceil32(return_data.size)] = _6705
                                                            require return_data.size >= _6597 + (32 * _6705) + 32
                                                            t = _6489 + _6597 + 32
                                                            u = _6489 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6705:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6705 < 1:
                                                                revert with 0, 17
                                                            if _6705 - 1 >= _6705:
                                                                revert with 0, 50
                                                            _9300 = mem[(32 * _6705 - 1) + _6489 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _6705 - 1) + _6489 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6705 - 1) + _6489 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            _9678 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = _9300 * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9837 = mem[_3462]
                                                            mem[mem[64] + 164] = mem[_3462]
                                                            s = 0
                                                            t = _3462 + 32
                                                            u = mem[64] + 196
                                                            while s < _9837:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_9678 + 100] = this.address
                                                            mem[_9678 + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9678 + (32 * _9837) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12270 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12432 = mem[_12270]
                                                            require mem[_12270] <= test266151307()
                                                            require _12270 + return_data.size > _12270 + mem[_12270] + 31
                                                            _12594 = mem[_12270 + mem[_12270]]
                                                            if mem[_12270 + mem[_12270]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12270 + mem[_12270]]) + 32 < 0 or _12270 + ceil32(return_data.size) + (32 * mem[_12270 + mem[_12270]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12270 + ceil32(return_data.size) + (32 * mem[_12270 + mem[_12270]]) + 32
                                                            mem[_12270 + ceil32(return_data.size)] = _12594
                                                            require return_data.size >= _12432 + (32 * _12594) + 32
                                                            t = _12270 + _12432 + 32
                                                            u = _12270 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12594:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14808 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14808] < _3408:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14808] - _3408):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14808] - _3408):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14808] - _3408
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                revert with 0, 17
                            if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                revert with 0, 17
                            if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                revert with 0, 17
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                revert with 0, 18
                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                revert with 0, 17
                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3353 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3407 = mem[_3353]
                                                    _3461 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3461] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3461 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6486 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6594 = mem[_6486]
                                                        require mem[_6486] <= test266151307()
                                                        require _6486 + return_data.size > _6486 + mem[_6486] + 31
                                                        _6702 = mem[_6486 + mem[_6486]]
                                                        if mem[_6486 + mem[_6486]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6486 + mem[_6486]]) + 32 < 0 or _6486 + ceil32(return_data.size) + (32 * mem[_6486 + mem[_6486]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6486 + ceil32(return_data.size) + (32 * mem[_6486 + mem[_6486]]) + 32
                                                        mem[_6486 + ceil32(return_data.size)] = _6702
                                                        require return_data.size >= _6594 + (32 * _6702) + 32
                                                        t = _6486 + _6594 + 32
                                                        u = _6486 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6702:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6702 < 1:
                                                            revert with 0, 17
                                                        if _6702 - 1 >= _6702:
                                                            revert with 0, 50
                                                        if mem[(32 * _6702 - 1) + _6486 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6702 - 1) + _6486 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6702 - 1) + _6486 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9834 = mem[_3461]
                                                        mem[mem[64] + 164] = mem[_3461]
                                                        s = 0
                                                        t = _3461 + 32
                                                        u = mem[64] + 196
                                                        while s < _9834:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9834) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12265 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12427 = mem[_12265]
                                                        require mem[_12265] <= test266151307()
                                                        require _12265 + return_data.size > _12265 + mem[_12265] + 31
                                                        _12589 = mem[_12265 + mem[_12265]]
                                                        if mem[_12265 + mem[_12265]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12265 + mem[_12265]]) + 32 < 0 or _12265 + ceil32(return_data.size) + (32 * mem[_12265 + mem[_12265]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12265 + ceil32(return_data.size) + (32 * mem[_12265 + mem[_12265]]) + 32
                                                        mem[_12265 + ceil32(return_data.size)] = _12589
                                                        require return_data.size >= _12427 + (32 * _12589) + 32
                                                        t = _12265 + _12427 + 32
                                                        u = _12265 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12589:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14803 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14803] < _3407:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14803] - _3407):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14803] - _3407):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14803] - _3407
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3461 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3461 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6487 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6595 = mem[_6487]
                                                            require mem[_6487] <= test266151307()
                                                            require _6487 + return_data.size > _6487 + mem[_6487] + 31
                                                            _6703 = mem[_6487 + mem[_6487]]
                                                            if mem[_6487 + mem[_6487]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6487 + mem[_6487]]) + 32 < 0 or _6487 + ceil32(return_data.size) + (32 * mem[_6487 + mem[_6487]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6487 + ceil32(return_data.size) + (32 * mem[_6487 + mem[_6487]]) + 32
                                                            mem[_6487 + ceil32(return_data.size)] = _6703
                                                            require return_data.size >= _6595 + (32 * _6703) + 32
                                                            t = _6487 + _6595 + 32
                                                            u = _6487 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6703:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6703 < 1:
                                                                revert with 0, 17
                                                            if _6703 - 1 >= _6703:
                                                                revert with 0, 50
                                                            _9297 = mem[(32 * _6703 - 1) + _6487 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _6703 - 1) + _6487 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6703 - 1) + _6487 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = _9297 * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9835 = mem[_3461]
                                                            mem[mem[64] + 164] = mem[_3461]
                                                            s = 0
                                                            t = _3461 + 32
                                                            u = mem[64] + 196
                                                            while s < _9835:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9297 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9835) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12267 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12429 = mem[_12267]
                                                            require mem[_12267] <= test266151307()
                                                            require _12267 + return_data.size > _12267 + mem[_12267] + 31
                                                            _12591 = mem[_12267 + mem[_12267]]
                                                            if mem[_12267 + mem[_12267]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12267 + mem[_12267]]) + 32 < 0 or _12267 + ceil32(return_data.size) + (32 * mem[_12267 + mem[_12267]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12267 + ceil32(return_data.size) + (32 * mem[_12267 + mem[_12267]]) + 32
                                                            mem[_12267 + ceil32(return_data.size)] = _12591
                                                            require return_data.size >= _12429 + (32 * _12591) + 32
                                                            t = _12267 + _12429 + 32
                                                            u = _12267 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12591:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14805 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14805] < _3407:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14805] - _3407):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14805] - _3407):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14805] - _3407
                                                        else:
                                                            mem[_3461 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3461 + 64
                                                            t = sha3(11) + 1
                                                            while _3461 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3461 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12266 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12428 = mem[_12266]
                                                            require mem[_12266] <= test266151307()
                                                            require _12266 + return_data.size > _12266 + mem[_12266] + 31
                                                            _12590 = mem[_12266 + mem[_12266]]
                                                            if mem[_12266 + mem[_12266]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12266 + mem[_12266]]) + 32 < 0 or _12266 + ceil32(return_data.size) + (32 * mem[_12266 + mem[_12266]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12266 + ceil32(return_data.size) + (32 * mem[_12266 + mem[_12266]]) + 32
                                                            mem[_12266 + ceil32(return_data.size)] = _12590
                                                            require return_data.size >= _12428 + (32 * _12590) + 32
                                                            t = _12266 + _12428 + 32
                                                            u = _12266 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12590:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12590 < 1:
                                                                revert with 0, 17
                                                            if _12590 - 1 >= _12590:
                                                                revert with 0, 50
                                                            if mem[(32 * _12590 - 1) + _12266 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12590 - 1) + _12266 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            _15125 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _12590 - 1) + _12266 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15179 = mem[_3461]
                                                            mem[mem[64] + 164] = mem[_3461]
                                                            s = 0
                                                            t = _3461 + 32
                                                            u = mem[64] + 196
                                                            while s < _15179:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_15125 + 100] = this.address
                                                            mem[_15125 + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _15125 + (32 * _15179) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15935 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _15989 = mem[_15935]
                                                            require mem[_15935] <= test266151307()
                                                            require _15935 + return_data.size > _15935 + mem[_15935] + 31
                                                            _16043 = mem[_15935 + mem[_15935]]
                                                            if mem[_15935 + mem[_15935]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15935 + mem[_15935]]) + 32 < 0 or _15935 + ceil32(return_data.size) + (32 * mem[_15935 + mem[_15935]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15935 + ceil32(return_data.size) + (32 * mem[_15935 + mem[_15935]]) + 32
                                                            mem[_15935 + ceil32(return_data.size)] = _16043
                                                            require return_data.size >= _15989 + (32 * _16043) + 32
                                                            t = _15935 + _15989 + 32
                                                            u = _15935 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16043:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16583 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16583] < _3407:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16583] - _3407):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16583] - _3407):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16583] - _3407
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
    else:
        mem[100] = this.address
        if not dividendTokenAddress:
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            if eth.balance(this.address) < stor23:
                revert with 0, 17
            if eth.balance(this.address) - stor23 and sub_88bbb0c1 > -1 / eth.balance(this.address) - stor23:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if sub_92b46e5b > !((eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                revert with 0, 17
            sub_92b46e5b += (eth.balance(this.address) * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
            stor23 = eth.balance(this.address)
            if arg2 >= sub_8e6f4fb7.length:
                revert with 0, 50
            if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                mem[32] = 26
                if arg2 >= sub_8e6f4fb7.length:
                    revert with 0, 50
                mem[0] = 25
                idx = 0
                while idx < userStakes[msg.sender].field_0:
                    mem[0] = sha3(msg.sender, 26)
                    if userStakes[msg.sender][idx].field_0 == arg2:
                        if userStakes[msg.sender][idx].field_256:
                            if not arg1:
                                if arg1 < arg1:
                                    revert with 0, 17
                                if userStaked[msg.sender].field_0 < 0:
                                    revert with 0, 17
                                if userStaked[msg.sender].field_0 > -1:
                                    revert with 0, 17
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                    revert with 0, 17
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                    revert with 0, 17
                                if totalStaked < 0:
                                    revert with 0, 17
                                if totalStaked > -1:
                                    revert with 0, 17
                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                stor1.length = 1
                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not PRECISION_FACTOR:
                                revert with 0, 18
                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                revert with 0, 17
                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not sub_88bbb0c1:
                                revert with 0, 18
                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                revert with 0, 17
                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                revert with 0, 17
                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                revert with 0, 17
                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 = 0
                                else:
                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 -= arg1
                            else:
                                if sub_6e707b73Address == stakingTokenAddress:
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                else:
                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingTokenAddress)
                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _3400 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _3454 = mem[_3400]
                                        _3508 = mem[64]
                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                        mem[_3508] = sub_c1e22a65.length
                                        if not sub_c1e22a65.length:
                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                            s = 0
                                            t = _3508 + 32
                                            u = mem[64] + 100
                                            while s < sub_c1e22a65.length:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            require ext_code.size(uniRouterAddress)
                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6580 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _6688 = mem[_6580]
                                            require mem[_6580] <= test266151307()
                                            require _6580 + return_data.size > _6580 + mem[_6580] + 31
                                            _6796 = mem[_6580 + mem[_6580]]
                                            if mem[_6580 + mem[_6580]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_6580 + mem[_6580]]) + 32 < 0 or _6580 + ceil32(return_data.size) + (32 * mem[_6580 + mem[_6580]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _6580 + ceil32(return_data.size) + (32 * mem[_6580 + mem[_6580]]) + 32
                                            mem[_6580 + ceil32(return_data.size)] = _6796
                                            require return_data.size >= _6688 + (32 * _6796) + 32
                                            t = _6580 + _6688 + 32
                                            u = _6580 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _6796:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            if _6796 < 1:
                                                revert with 0, 17
                                            if _6796 - 1 >= _6796:
                                                revert with 0, 50
                                            _9436 = mem[(32 * _6796 - 1) + _6580 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _6796 - 1) + _6580 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6796 - 1) + _6580 + ceil32(return_data.size) + 32]:
                                                revert with 0, 17
                                            if block.timestamp > -601:
                                                revert with 0, 17
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            mem[mem[64] + 36] = _9436 * slippageFactor / 1000
                                            mem[mem[64] + 68] = 160
                                            _9928 = mem[_3508]
                                            mem[mem[64] + 164] = mem[_3508]
                                            s = 0
                                            t = _3508 + 32
                                            u = mem[64] + 196
                                            while s < _9928:
                                                mem[u] = mem[t + 12 len 20]
                                                s = s + 1
                                                t = t + 32
                                                u = u + 32
                                                continue 
                                            mem[mem[64] + 100] = this.address
                                            mem[mem[64] + 132] = block.timestamp + 600
                                            require ext_code.size(uniRouterAddress)
                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9436 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9928) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12406 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _12568 = mem[_12406]
                                            require mem[_12406] <= test266151307()
                                            require _12406 + return_data.size > _12406 + mem[_12406] + 31
                                            _12730 = mem[_12406 + mem[_12406]]
                                            if mem[_12406 + mem[_12406]] > test266151307():
                                                revert with 0, 65
                                            if (32 * mem[_12406 + mem[_12406]]) + 32 < 0 or _12406 + ceil32(return_data.size) + (32 * mem[_12406 + mem[_12406]]) + 32 > test266151307():
                                                revert with 0, 65
                                            mem[64] = _12406 + ceil32(return_data.size) + (32 * mem[_12406 + mem[_12406]]) + 32
                                            mem[_12406 + ceil32(return_data.size)] = _12730
                                            require return_data.size >= _12568 + (32 * _12730) + 32
                                            t = _12406 + _12568 + 32
                                            u = _12406 + ceil32(return_data.size) + 32
                                            s = 0
                                            while s < _12730:
                                                mem[u] = mem[t]
                                                t = t + 32
                                                u = u + 32
                                                s = s + 1
                                                continue 
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingTokenAddress)
                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14944 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_14944] < _3454:
                                                revert with 0, 17
                                            if 0 > !(mem[_14944] - _3454):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14944] - _3454):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14944] - _3454
                                        else:
                                            mem[0] = 11
                                            mem[_3508 + 32] = address(sub_c1e22a65.field_0)
                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                s = 0
                                                t = _3508 + 32
                                                u = mem[64] + 100
                                                while s < sub_c1e22a65.length:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                require ext_code.size(uniRouterAddress)
                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6581 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _6689 = mem[_6581]
                                                require mem[_6581] <= test266151307()
                                                require _6581 + return_data.size > _6581 + mem[_6581] + 31
                                                _6797 = mem[_6581 + mem[_6581]]
                                                if mem[_6581 + mem[_6581]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_6581 + mem[_6581]]) + 32 < 0 or _6581 + ceil32(return_data.size) + (32 * mem[_6581 + mem[_6581]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _6581 + ceil32(return_data.size) + (32 * mem[_6581 + mem[_6581]]) + 32
                                                mem[_6581 + ceil32(return_data.size)] = _6797
                                                require return_data.size >= _6689 + (32 * _6797) + 32
                                                t = _6581 + _6689 + 32
                                                u = _6581 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _6797:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                if _6797 < 1:
                                                    revert with 0, 17
                                                if _6797 - 1 >= _6797:
                                                    revert with 0, 50
                                                if mem[(32 * _6797 - 1) + _6581 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6797 - 1) + _6581 + ceil32(return_data.size) + 32]:
                                                    revert with 0, 17
                                                if block.timestamp > -601:
                                                    revert with 0, 17
                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = mem[(32 * _6797 - 1) + _6581 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                mem[mem[64] + 68] = 160
                                                _9929 = mem[_3508]
                                                mem[mem[64] + 164] = mem[_3508]
                                                s = 0
                                                t = _3508 + 32
                                                u = mem[64] + 196
                                                while s < _9929:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                mem[mem[64] + 100] = this.address
                                                mem[mem[64] + 132] = block.timestamp + 600
                                                require ext_code.size(uniRouterAddress)
                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9929) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12408 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _12570 = mem[_12408]
                                                require mem[_12408] <= test266151307()
                                                require _12408 + return_data.size > _12408 + mem[_12408] + 31
                                                _12732 = mem[_12408 + mem[_12408]]
                                                if mem[_12408 + mem[_12408]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_12408 + mem[_12408]]) + 32 < 0 or _12408 + ceil32(return_data.size) + (32 * mem[_12408 + mem[_12408]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _12408 + ceil32(return_data.size) + (32 * mem[_12408 + mem[_12408]]) + 32
                                                mem[_12408 + ceil32(return_data.size)] = _12732
                                                require return_data.size >= _12570 + (32 * _12732) + 32
                                                t = _12408 + _12570 + 32
                                                u = _12408 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _12732:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14946 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_14946] < _3454:
                                                    revert with 0, 17
                                                if 0 > !(mem[_14946] - _3454):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14946] - _3454):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14946] - _3454
                                            else:
                                                mem[_3508 + 64] = address(sub_c1e22a65.field_256)
                                                s = _3508 + 64
                                                t = sha3(11) + 1
                                                while _3508 + (32 * sub_c1e22a65.length) > s:
                                                    mem[s + 32] = stor1[t]
                                                    s = s + 32
                                                    t = t + 1
                                                    continue 
                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                s = 0
                                                t = _3508 + 32
                                                u = mem[64] + 100
                                                while s < sub_c1e22a65.length:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                require ext_code.size(uniRouterAddress)
                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12407 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _12569 = mem[_12407]
                                                require mem[_12407] <= test266151307()
                                                require _12407 + return_data.size > _12407 + mem[_12407] + 31
                                                _12731 = mem[_12407 + mem[_12407]]
                                                if mem[_12407 + mem[_12407]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_12407 + mem[_12407]]) + 32 < 0 or _12407 + ceil32(return_data.size) + (32 * mem[_12407 + mem[_12407]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _12407 + ceil32(return_data.size) + (32 * mem[_12407 + mem[_12407]]) + 32
                                                mem[_12407 + ceil32(return_data.size)] = _12731
                                                require return_data.size >= _12569 + (32 * _12731) + 32
                                                t = _12407 + _12569 + 32
                                                u = _12407 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _12731:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                if _12731 < 1:
                                                    revert with 0, 17
                                                if _12731 - 1 >= _12731:
                                                    revert with 0, 50
                                                if mem[(32 * _12731 - 1) + _12407 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12731 - 1) + _12407 + ceil32(return_data.size) + 32]:
                                                    revert with 0, 17
                                                if block.timestamp > -601:
                                                    revert with 0, 17
                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = mem[(32 * _12731 - 1) + _12407 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                mem[mem[64] + 68] = 160
                                                _15226 = mem[_3508]
                                                mem[mem[64] + 164] = mem[_3508]
                                                s = 0
                                                t = _3508 + 32
                                                u = mem[64] + 196
                                                while s < _15226:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                mem[mem[64] + 100] = this.address
                                                mem[mem[64] + 132] = block.timestamp + 600
                                                require ext_code.size(uniRouterAddress)
                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15226) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15982 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16036 = mem[_15982]
                                                require mem[_15982] <= test266151307()
                                                require _15982 + return_data.size > _15982 + mem[_15982] + 31
                                                _16090 = mem[_15982 + mem[_15982]]
                                                if mem[_15982 + mem[_15982]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_15982 + mem[_15982]]) + 32 < 0 or _15982 + ceil32(return_data.size) + (32 * mem[_15982 + mem[_15982]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _15982 + ceil32(return_data.size) + (32 * mem[_15982 + mem[_15982]]) + 32
                                                mem[_15982 + ceil32(return_data.size)] = _16090
                                                require return_data.size >= _16036 + (32 * _16090) + 32
                                                t = _15982 + _16036 + 32
                                                u = _15982 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _16090:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16630 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16630] < _3454:
                                                    revert with 0, 17
                                                if 0 > !(mem[_16630] - _3454):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16630] - _3454):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16630] - _3454
                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not PRECISION_FACTOR:
                                revert with 0, 18
                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                revert with 0, 17
                            if not sub_88bbb0c1:
                                revert with 0, 18
                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                    mem[32] = 26
                    if arg2 >= sub_8e6f4fb7.length:
                        revert with 0, 50
                    mem[0] = 25
                    idx = 0
                    while idx < userStakes[msg.sender].field_0:
                        mem[0] = sha3(msg.sender, 26)
                        if userStakes[msg.sender][idx].field_0 == arg2:
                            if userStakes[msg.sender][idx].field_256:
                                if not arg1:
                                    if arg1 < arg1:
                                        revert with 0, 17
                                    if userStaked[msg.sender].field_0 < 0:
                                        revert with 0, 17
                                    if userStaked[msg.sender].field_0 > -1:
                                        revert with 0, 17
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                        revert with 0, 17
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                        revert with 0, 17
                                    if totalStaked < 0:
                                        revert with 0, 17
                                    if totalStaked > -1:
                                        revert with 0, 17
                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                    stor1.length = 1
                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not PRECISION_FACTOR:
                                    revert with 0, 18
                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                    revert with 0, 17
                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not sub_88bbb0c1:
                                    revert with 0, 18
                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                    revert with 0, 17
                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                    revert with 0, 17
                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                    revert with 0, 17
                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = 0
                                    else:
                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 -= arg1
                                else:
                                    if sub_6e707b73Address == stakingTokenAddress:
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                    else:
                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingTokenAddress)
                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _3405 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _3459 = mem[_3405]
                                            _3513 = mem[64]
                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                            mem[_3513] = sub_c1e22a65.length
                                            if not sub_c1e22a65.length:
                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                s = 0
                                                t = _3513 + 32
                                                u = mem[64] + 100
                                                while s < sub_c1e22a65.length:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                require ext_code.size(uniRouterAddress)
                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6590 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _6698 = mem[_6590]
                                                require mem[_6590] <= test266151307()
                                                require _6590 + return_data.size > _6590 + mem[_6590] + 31
                                                _6806 = mem[_6590 + mem[_6590]]
                                                if mem[_6590 + mem[_6590]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_6590 + mem[_6590]]) + 32 < 0 or _6590 + ceil32(return_data.size) + (32 * mem[_6590 + mem[_6590]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _6590 + ceil32(return_data.size) + (32 * mem[_6590 + mem[_6590]]) + 32
                                                mem[_6590 + ceil32(return_data.size)] = _6806
                                                require return_data.size >= _6698 + (32 * _6806) + 32
                                                t = _6590 + _6698 + 32
                                                u = _6590 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _6806:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                if _6806 < 1:
                                                    revert with 0, 17
                                                if _6806 - 1 >= _6806:
                                                    revert with 0, 50
                                                _9451 = mem[(32 * _6806 - 1) + _6590 + ceil32(return_data.size) + 32]
                                                if mem[(32 * _6806 - 1) + _6590 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6806 - 1) + _6590 + ceil32(return_data.size) + 32]:
                                                    revert with 0, 17
                                                if block.timestamp > -601:
                                                    revert with 0, 17
                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                mem[mem[64] + 36] = _9451 * slippageFactor / 1000
                                                mem[mem[64] + 68] = 160
                                                _9938 = mem[_3513]
                                                mem[mem[64] + 164] = mem[_3513]
                                                s = 0
                                                t = _3513 + 32
                                                u = mem[64] + 196
                                                while s < _9938:
                                                    mem[u] = mem[t + 12 len 20]
                                                    s = s + 1
                                                    t = t + 32
                                                    u = u + 32
                                                    continue 
                                                mem[mem[64] + 100] = this.address
                                                mem[mem[64] + 132] = block.timestamp + 600
                                                require ext_code.size(uniRouterAddress)
                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9451 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9938) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12421 = mem[64]
                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _12583 = mem[_12421]
                                                require mem[_12421] <= test266151307()
                                                require _12421 + return_data.size > _12421 + mem[_12421] + 31
                                                _12745 = mem[_12421 + mem[_12421]]
                                                if mem[_12421 + mem[_12421]] > test266151307():
                                                    revert with 0, 65
                                                if (32 * mem[_12421 + mem[_12421]]) + 32 < 0 or _12421 + ceil32(return_data.size) + (32 * mem[_12421 + mem[_12421]]) + 32 > test266151307():
                                                    revert with 0, 65
                                                mem[64] = _12421 + ceil32(return_data.size) + (32 * mem[_12421 + mem[_12421]]) + 32
                                                mem[_12421 + ceil32(return_data.size)] = _12745
                                                require return_data.size >= _12583 + (32 * _12745) + 32
                                                t = _12421 + _12583 + 32
                                                u = _12421 + ceil32(return_data.size) + 32
                                                s = 0
                                                while s < _12745:
                                                    mem[u] = mem[t]
                                                    t = t + 32
                                                    u = u + 32
                                                    s = s + 1
                                                    continue 
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14959 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_14959] < _3459:
                                                    revert with 0, 17
                                                if 0 > !(mem[_14959] - _3459):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14959] - _3459):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14959] - _3459
                                            else:
                                                mem[0] = 11
                                                mem[_3513 + 32] = address(sub_c1e22a65.field_0)
                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3513 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6591 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _6699 = mem[_6591]
                                                    require mem[_6591] <= test266151307()
                                                    require _6591 + return_data.size > _6591 + mem[_6591] + 31
                                                    _6807 = mem[_6591 + mem[_6591]]
                                                    if mem[_6591 + mem[_6591]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_6591 + mem[_6591]]) + 32 < 0 or _6591 + ceil32(return_data.size) + (32 * mem[_6591 + mem[_6591]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _6591 + ceil32(return_data.size) + (32 * mem[_6591 + mem[_6591]]) + 32
                                                    mem[_6591 + ceil32(return_data.size)] = _6807
                                                    require return_data.size >= _6699 + (32 * _6807) + 32
                                                    t = _6591 + _6699 + 32
                                                    u = _6591 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _6807:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _6807 < 1:
                                                        revert with 0, 17
                                                    if _6807 - 1 >= _6807:
                                                        revert with 0, 50
                                                    if mem[(32 * _6807 - 1) + _6591 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6807 - 1) + _6591 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _6807 - 1) + _6591 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _9939 = mem[_3513]
                                                    mem[mem[64] + 164] = mem[_3513]
                                                    s = 0
                                                    t = _3513 + 32
                                                    u = mem[64] + 196
                                                    while s < _9939:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9939) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12423 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12585 = mem[_12423]
                                                    require mem[_12423] <= test266151307()
                                                    require _12423 + return_data.size > _12423 + mem[_12423] + 31
                                                    _12747 = mem[_12423 + mem[_12423]]
                                                    if mem[_12423 + mem[_12423]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12423 + mem[_12423]]) + 32 < 0 or _12423 + ceil32(return_data.size) + (32 * mem[_12423 + mem[_12423]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12423 + ceil32(return_data.size) + (32 * mem[_12423 + mem[_12423]]) + 32
                                                    mem[_12423 + ceil32(return_data.size)] = _12747
                                                    require return_data.size >= _12585 + (32 * _12747) + 32
                                                    t = _12423 + _12585 + 32
                                                    u = _12423 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12747:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14961 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_14961] < _3459:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_14961] - _3459):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14961] - _3459):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14961] - _3459
                                                else:
                                                    mem[_3513 + 64] = address(sub_c1e22a65.field_256)
                                                    s = _3513 + 64
                                                    t = sha3(11) + 1
                                                    while _3513 + (32 * sub_c1e22a65.length) > s:
                                                        mem[s + 32] = stor1[t]
                                                        s = s + 32
                                                        t = t + 1
                                                        continue 
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3513 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12422 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12584 = mem[_12422]
                                                    require mem[_12422] <= test266151307()
                                                    require _12422 + return_data.size > _12422 + mem[_12422] + 31
                                                    _12746 = mem[_12422 + mem[_12422]]
                                                    if mem[_12422 + mem[_12422]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12422 + mem[_12422]]) + 32 < 0 or _12422 + ceil32(return_data.size) + (32 * mem[_12422 + mem[_12422]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12422 + ceil32(return_data.size) + (32 * mem[_12422 + mem[_12422]]) + 32
                                                    mem[_12422 + ceil32(return_data.size)] = _12746
                                                    require return_data.size >= _12584 + (32 * _12746) + 32
                                                    t = _12422 + _12584 + 32
                                                    u = _12422 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12746:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _12746 < 1:
                                                        revert with 0, 17
                                                    if _12746 - 1 >= _12746:
                                                        revert with 0, 50
                                                    if mem[(32 * _12746 - 1) + _12422 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12746 - 1) + _12422 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _12746 - 1) + _12422 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _15231 = mem[_3513]
                                                    mem[mem[64] + 164] = mem[_3513]
                                                    s = 0
                                                    t = _3513 + 32
                                                    u = mem[64] + 196
                                                    while s < _15231:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15231) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _15987 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _16041 = mem[_15987]
                                                    require mem[_15987] <= test266151307()
                                                    require _15987 + return_data.size > _15987 + mem[_15987] + 31
                                                    _16095 = mem[_15987 + mem[_15987]]
                                                    if mem[_15987 + mem[_15987]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_15987 + mem[_15987]]) + 32 < 0 or _15987 + ceil32(return_data.size) + (32 * mem[_15987 + mem[_15987]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _15987 + ceil32(return_data.size) + (32 * mem[_15987 + mem[_15987]]) + 32
                                                    mem[_15987 + ceil32(return_data.size)] = _16095
                                                    require return_data.size >= _16041 + (32 * _16095) + 32
                                                    t = _15987 + _16041 + 32
                                                    u = _15987 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _16095:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16635 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16635] < _3459:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_16635] - _3459):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16635] - _3459):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16635] - _3459
                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not PRECISION_FACTOR:
                                    revert with 0, 18
                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                    revert with 0, 17
                                if not sub_88bbb0c1:
                                    revert with 0, 18
                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                        mem[32] = 26
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        mem[0] = 25
                        idx = 0
                        while idx < userStakes[msg.sender].field_0:
                            mem[0] = sha3(msg.sender, 26)
                            if userStakes[msg.sender][idx].field_0 == arg2:
                                if userStakes[msg.sender][idx].field_256:
                                    if not arg1:
                                        if arg1 < arg1:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 < 0:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 > -1:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                            revert with 0, 17
                                        if totalStaked < 0:
                                            revert with 0, 17
                                        if totalStaked > -1:
                                            revert with 0, 17
                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                        stor1.length = 1
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = 0
                                        else:
                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 -= arg1
                                    else:
                                        if sub_6e707b73Address == stakingTokenAddress:
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        else:
                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _3404 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _3458 = mem[_3404]
                                                _3512 = mem[64]
                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                mem[_3512] = sub_c1e22a65.length
                                                if not sub_c1e22a65.length:
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3512 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6588 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _6696 = mem[_6588]
                                                    require mem[_6588] <= test266151307()
                                                    require _6588 + return_data.size > _6588 + mem[_6588] + 31
                                                    _6804 = mem[_6588 + mem[_6588]]
                                                    if mem[_6588 + mem[_6588]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_6588 + mem[_6588]]) + 32 < 0 or _6588 + ceil32(return_data.size) + (32 * mem[_6588 + mem[_6588]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _6588 + ceil32(return_data.size) + (32 * mem[_6588 + mem[_6588]]) + 32
                                                    mem[_6588 + ceil32(return_data.size)] = _6804
                                                    require return_data.size >= _6696 + (32 * _6804) + 32
                                                    t = _6588 + _6696 + 32
                                                    u = _6588 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _6804:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _6804 < 1:
                                                        revert with 0, 17
                                                    if _6804 - 1 >= _6804:
                                                        revert with 0, 50
                                                    if mem[(32 * _6804 - 1) + _6588 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6804 - 1) + _6588 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _6804 - 1) + _6588 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _9936 = mem[_3512]
                                                    mem[mem[64] + 164] = mem[_3512]
                                                    s = 0
                                                    t = _3512 + 32
                                                    u = mem[64] + 196
                                                    while s < _9936:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9936) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12418 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12580 = mem[_12418]
                                                    require mem[_12418] <= test266151307()
                                                    require _12418 + return_data.size > _12418 + mem[_12418] + 31
                                                    _12742 = mem[_12418 + mem[_12418]]
                                                    if mem[_12418 + mem[_12418]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12418 + mem[_12418]]) + 32 < 0 or _12418 + ceil32(return_data.size) + (32 * mem[_12418 + mem[_12418]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12418 + ceil32(return_data.size) + (32 * mem[_12418 + mem[_12418]]) + 32
                                                    mem[_12418 + ceil32(return_data.size)] = _12742
                                                    require return_data.size >= _12580 + (32 * _12742) + 32
                                                    t = _12418 + _12580 + 32
                                                    u = _12418 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12742:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14956 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_14956] < _3458:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_14956] - _3458):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14956] - _3458):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14956] - _3458
                                                else:
                                                    mem[0] = 11
                                                    mem[_3512 + 32] = address(sub_c1e22a65.field_0)
                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3512 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6589 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6697 = mem[_6589]
                                                        require mem[_6589] <= test266151307()
                                                        require _6589 + return_data.size > _6589 + mem[_6589] + 31
                                                        _6805 = mem[_6589 + mem[_6589]]
                                                        if mem[_6589 + mem[_6589]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6589 + mem[_6589]]) + 32 < 0 or _6589 + ceil32(return_data.size) + (32 * mem[_6589 + mem[_6589]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6589 + ceil32(return_data.size) + (32 * mem[_6589 + mem[_6589]]) + 32
                                                        mem[_6589 + ceil32(return_data.size)] = _6805
                                                        require return_data.size >= _6697 + (32 * _6805) + 32
                                                        t = _6589 + _6697 + 32
                                                        u = _6589 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6805:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6805 < 1:
                                                            revert with 0, 17
                                                        if _6805 - 1 >= _6805:
                                                            revert with 0, 50
                                                        if mem[(32 * _6805 - 1) + _6589 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6805 - 1) + _6589 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6805 - 1) + _6589 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9937 = mem[_3512]
                                                        mem[mem[64] + 164] = mem[_3512]
                                                        s = 0
                                                        t = _3512 + 32
                                                        u = mem[64] + 196
                                                        while s < _9937:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9937) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12420 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12582 = mem[_12420]
                                                        require mem[_12420] <= test266151307()
                                                        require _12420 + return_data.size > _12420 + mem[_12420] + 31
                                                        _12744 = mem[_12420 + mem[_12420]]
                                                        if mem[_12420 + mem[_12420]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12420 + mem[_12420]]) + 32 < 0 or _12420 + ceil32(return_data.size) + (32 * mem[_12420 + mem[_12420]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12420 + ceil32(return_data.size) + (32 * mem[_12420 + mem[_12420]]) + 32
                                                        mem[_12420 + ceil32(return_data.size)] = _12744
                                                        require return_data.size >= _12582 + (32 * _12744) + 32
                                                        t = _12420 + _12582 + 32
                                                        u = _12420 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12744:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14958 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14958] < _3458:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14958] - _3458):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14958] - _3458):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14958] - _3458
                                                    else:
                                                        mem[_3512 + 64] = address(sub_c1e22a65.field_256)
                                                        s = _3512 + 64
                                                        t = sha3(11) + 1
                                                        while _3512 + (32 * sub_c1e22a65.length) > s:
                                                            mem[s + 32] = stor1[t]
                                                            s = s + 32
                                                            t = t + 1
                                                            continue 
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3512 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12419 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12581 = mem[_12419]
                                                        require mem[_12419] <= test266151307()
                                                        require _12419 + return_data.size > _12419 + mem[_12419] + 31
                                                        _12743 = mem[_12419 + mem[_12419]]
                                                        if mem[_12419 + mem[_12419]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12419 + mem[_12419]]) + 32 < 0 or _12419 + ceil32(return_data.size) + (32 * mem[_12419 + mem[_12419]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12419 + ceil32(return_data.size) + (32 * mem[_12419 + mem[_12419]]) + 32
                                                        mem[_12419 + ceil32(return_data.size)] = _12743
                                                        require return_data.size >= _12581 + (32 * _12743) + 32
                                                        t = _12419 + _12581 + 32
                                                        u = _12419 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12743:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _12743 < 1:
                                                            revert with 0, 17
                                                        if _12743 - 1 >= _12743:
                                                            revert with 0, 50
                                                        _15014 = mem[(32 * _12743 - 1) + _12419 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _12743 - 1) + _12419 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12743 - 1) + _12419 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = _15014 * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _15230 = mem[_3512]
                                                        mem[mem[64] + 164] = mem[_3512]
                                                        s = 0
                                                        t = _3512 + 32
                                                        u = mem[64] + 196
                                                        while s < _15230:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _15014 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15230) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _15986 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _16040 = mem[_15986]
                                                        require mem[_15986] <= test266151307()
                                                        require _15986 + return_data.size > _15986 + mem[_15986] + 31
                                                        _16094 = mem[_15986 + mem[_15986]]
                                                        if mem[_15986 + mem[_15986]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_15986 + mem[_15986]]) + 32 < 0 or _15986 + ceil32(return_data.size) + (32 * mem[_15986 + mem[_15986]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _15986 + ceil32(return_data.size) + (32 * mem[_15986 + mem[_15986]]) + 32
                                                        mem[_15986 + ceil32(return_data.size)] = _16094
                                                        require return_data.size >= _16040 + (32 * _16094) + 32
                                                        t = _15986 + _16040 + 32
                                                        u = _15986 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _16094:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _16634 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_16634] < _3458:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_16634] - _3458):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16634] - _3458):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16634] - _3458
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        if block.number <= bonusEndBlock:
                            if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                revert with 0, 17
                            if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                revert with 0, 17
                            if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                revert with 0, 17
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                revert with 0, 18
                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                revert with 0, 17
                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3403 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3457 = mem[_3403]
                                                    _3511 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3511] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3511 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6586 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6694 = mem[_6586]
                                                        require mem[_6586] <= test266151307()
                                                        require _6586 + return_data.size > _6586 + mem[_6586] + 31
                                                        _6802 = mem[_6586 + mem[_6586]]
                                                        if mem[_6586 + mem[_6586]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6586 + mem[_6586]]) + 32 < 0 or _6586 + ceil32(return_data.size) + (32 * mem[_6586 + mem[_6586]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6586 + ceil32(return_data.size) + (32 * mem[_6586 + mem[_6586]]) + 32
                                                        mem[_6586 + ceil32(return_data.size)] = _6802
                                                        require return_data.size >= _6694 + (32 * _6802) + 32
                                                        t = _6586 + _6694 + 32
                                                        u = _6586 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6802:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6802 < 1:
                                                            revert with 0, 17
                                                        if _6802 - 1 >= _6802:
                                                            revert with 0, 50
                                                        if mem[(32 * _6802 - 1) + _6586 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6802 - 1) + _6586 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6802 - 1) + _6586 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9934 = mem[_3511]
                                                        mem[mem[64] + 164] = mem[_3511]
                                                        s = 0
                                                        t = _3511 + 32
                                                        u = mem[64] + 196
                                                        while s < _9934:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9934) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12415 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12577 = mem[_12415]
                                                        require mem[_12415] <= test266151307()
                                                        require _12415 + return_data.size > _12415 + mem[_12415] + 31
                                                        _12739 = mem[_12415 + mem[_12415]]
                                                        if mem[_12415 + mem[_12415]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12415 + mem[_12415]]) + 32 < 0 or _12415 + ceil32(return_data.size) + (32 * mem[_12415 + mem[_12415]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12415 + ceil32(return_data.size) + (32 * mem[_12415 + mem[_12415]]) + 32
                                                        mem[_12415 + ceil32(return_data.size)] = _12739
                                                        require return_data.size >= _12577 + (32 * _12739) + 32
                                                        t = _12415 + _12577 + 32
                                                        u = _12415 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12739:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14953 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14953] < _3457:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14953] - _3457):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14953] - _3457):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14953] - _3457
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3511 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3511 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6587 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6695 = mem[_6587]
                                                            require mem[_6587] <= test266151307()
                                                            require _6587 + return_data.size > _6587 + mem[_6587] + 31
                                                            _6803 = mem[_6587 + mem[_6587]]
                                                            if mem[_6587 + mem[_6587]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6587 + mem[_6587]]) + 32 < 0 or _6587 + ceil32(return_data.size) + (32 * mem[_6587 + mem[_6587]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6587 + ceil32(return_data.size) + (32 * mem[_6587 + mem[_6587]]) + 32
                                                            mem[_6587 + ceil32(return_data.size)] = _6803
                                                            require return_data.size >= _6695 + (32 * _6803) + 32
                                                            t = _6587 + _6695 + 32
                                                            u = _6587 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6803:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6803 < 1:
                                                                revert with 0, 17
                                                            if _6803 - 1 >= _6803:
                                                                revert with 0, 50
                                                            if mem[(32 * _6803 - 1) + _6587 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6803 - 1) + _6587 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6803 - 1) + _6587 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9935 = mem[_3511]
                                                            mem[mem[64] + 164] = mem[_3511]
                                                            s = 0
                                                            t = _3511 + 32
                                                            u = mem[64] + 196
                                                            while s < _9935:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9935) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12417 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12579 = mem[_12417]
                                                            require mem[_12417] <= test266151307()
                                                            require _12417 + return_data.size > _12417 + mem[_12417] + 31
                                                            _12741 = mem[_12417 + mem[_12417]]
                                                            if mem[_12417 + mem[_12417]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12417 + mem[_12417]]) + 32 < 0 or _12417 + ceil32(return_data.size) + (32 * mem[_12417 + mem[_12417]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12417 + ceil32(return_data.size) + (32 * mem[_12417 + mem[_12417]]) + 32
                                                            mem[_12417 + ceil32(return_data.size)] = _12741
                                                            require return_data.size >= _12579 + (32 * _12741) + 32
                                                            t = _12417 + _12579 + 32
                                                            u = _12417 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12741:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14955 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14955] < _3457:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14955] - _3457):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14955] - _3457):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14955] - _3457
                                                        else:
                                                            mem[_3511 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3511 + 64
                                                            t = sha3(11) + 1
                                                            while _3511 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3511 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12416 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12578 = mem[_12416]
                                                            require mem[_12416] <= test266151307()
                                                            require _12416 + return_data.size > _12416 + mem[_12416] + 31
                                                            _12740 = mem[_12416 + mem[_12416]]
                                                            if mem[_12416 + mem[_12416]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12416 + mem[_12416]]) + 32 < 0 or _12416 + ceil32(return_data.size) + (32 * mem[_12416 + mem[_12416]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12416 + ceil32(return_data.size) + (32 * mem[_12416 + mem[_12416]]) + 32
                                                            mem[_12416 + ceil32(return_data.size)] = _12740
                                                            require return_data.size >= _12578 + (32 * _12740) + 32
                                                            t = _12416 + _12578 + 32
                                                            u = _12416 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12740:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12740 < 1:
                                                                revert with 0, 17
                                                            if _12740 - 1 >= _12740:
                                                                revert with 0, 50
                                                            _15013 = mem[(32 * _12740 - 1) + _12416 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _12740 - 1) + _12416 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12740 - 1) + _12416 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = _15013 * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15229 = mem[_3511]
                                                            mem[mem[64] + 164] = mem[_3511]
                                                            s = 0
                                                            t = _3511 + 32
                                                            u = mem[64] + 196
                                                            while s < _15229:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _15013 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15229) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15985 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _16039 = mem[_15985]
                                                            require mem[_15985] <= test266151307()
                                                            require _15985 + return_data.size > _15985 + mem[_15985] + 31
                                                            _16093 = mem[_15985 + mem[_15985]]
                                                            if mem[_15985 + mem[_15985]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15985 + mem[_15985]]) + 32 < 0 or _15985 + ceil32(return_data.size) + (32 * mem[_15985 + mem[_15985]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15985 + ceil32(return_data.size) + (32 * mem[_15985 + mem[_15985]]) + 32
                                                            mem[_15985 + ceil32(return_data.size)] = _16093
                                                            require return_data.size >= _16039 + (32 * _16093) + 32
                                                            t = _15985 + _16039 + 32
                                                            u = _15985 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16093:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16633 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16633] < _3457:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16633] - _3457):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16633] - _3457):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16633] - _3457
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                    revert with 0, 17
                                if False and PRECISION_FACTOR > 0:
                                    revert with 0, 17
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                    revert with 0, 18
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                    revert with 0, 17
                                sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3402 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3456 = mem[_3402]
                                                        _3510 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3510] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3510 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6584 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6692 = mem[_6584]
                                                            require mem[_6584] <= test266151307()
                                                            require _6584 + return_data.size > _6584 + mem[_6584] + 31
                                                            _6800 = mem[_6584 + mem[_6584]]
                                                            if mem[_6584 + mem[_6584]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6584 + mem[_6584]]) + 32 < 0 or _6584 + ceil32(return_data.size) + (32 * mem[_6584 + mem[_6584]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6584 + ceil32(return_data.size) + (32 * mem[_6584 + mem[_6584]]) + 32
                                                            mem[_6584 + ceil32(return_data.size)] = _6800
                                                            require return_data.size >= _6692 + (32 * _6800) + 32
                                                            t = _6584 + _6692 + 32
                                                            u = _6584 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6800:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6800 < 1:
                                                                revert with 0, 17
                                                            if _6800 - 1 >= _6800:
                                                                revert with 0, 50
                                                            if mem[(32 * _6800 - 1) + _6584 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6800 - 1) + _6584 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6800 - 1) + _6584 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9932 = mem[_3510]
                                                            mem[mem[64] + 164] = mem[_3510]
                                                            s = 0
                                                            t = _3510 + 32
                                                            u = mem[64] + 196
                                                            while s < _9932:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9932) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12412 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12574 = mem[_12412]
                                                            require mem[_12412] <= test266151307()
                                                            require _12412 + return_data.size > _12412 + mem[_12412] + 31
                                                            _12736 = mem[_12412 + mem[_12412]]
                                                            if mem[_12412 + mem[_12412]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12412 + mem[_12412]]) + 32 < 0 or _12412 + ceil32(return_data.size) + (32 * mem[_12412 + mem[_12412]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12412 + ceil32(return_data.size) + (32 * mem[_12412 + mem[_12412]]) + 32
                                                            mem[_12412 + ceil32(return_data.size)] = _12736
                                                            require return_data.size >= _12574 + (32 * _12736) + 32
                                                            t = _12412 + _12574 + 32
                                                            u = _12412 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12736:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14950 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14950] < _3456:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14950] - _3456):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14950] - _3456):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14950] - _3456
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3510 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3510 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6585 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6693 = mem[_6585]
                                                                require mem[_6585] <= test266151307()
                                                                require _6585 + return_data.size > _6585 + mem[_6585] + 31
                                                                _6801 = mem[_6585 + mem[_6585]]
                                                                if mem[_6585 + mem[_6585]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6585 + mem[_6585]]) + 32 < 0 or _6585 + ceil32(return_data.size) + (32 * mem[_6585 + mem[_6585]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6585 + ceil32(return_data.size) + (32 * mem[_6585 + mem[_6585]]) + 32
                                                                mem[_6585 + ceil32(return_data.size)] = _6801
                                                                require return_data.size >= _6693 + (32 * _6801) + 32
                                                                t = _6585 + _6693 + 32
                                                                u = _6585 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6801:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6801 < 1:
                                                                    revert with 0, 17
                                                                if _6801 - 1 >= _6801:
                                                                    revert with 0, 50
                                                                _9444 = mem[(32 * _6801 - 1) + _6585 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6801 - 1) + _6585 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6801 - 1) + _6585 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9444 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9933 = mem[_3510]
                                                                mem[mem[64] + 164] = mem[_3510]
                                                                s = 0
                                                                t = _3510 + 32
                                                                u = mem[64] + 196
                                                                while s < _9933:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9444 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9933) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12414 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12576 = mem[_12414]
                                                                require mem[_12414] <= test266151307()
                                                                require _12414 + return_data.size > _12414 + mem[_12414] + 31
                                                                _12738 = mem[_12414 + mem[_12414]]
                                                                if mem[_12414 + mem[_12414]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12414 + mem[_12414]]) + 32 < 0 or _12414 + ceil32(return_data.size) + (32 * mem[_12414 + mem[_12414]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12414 + ceil32(return_data.size) + (32 * mem[_12414 + mem[_12414]]) + 32
                                                                mem[_12414 + ceil32(return_data.size)] = _12738
                                                                require return_data.size >= _12576 + (32 * _12738) + 32
                                                                t = _12414 + _12576 + 32
                                                                u = _12414 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12738:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14952 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14952] < _3456:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14952] - _3456):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14952] - _3456):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14952] - _3456
                                                            else:
                                                                mem[_3510 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3510 + 64
                                                                t = sha3(11) + 1
                                                                while _3510 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3510 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12413 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12575 = mem[_12413]
                                                                require mem[_12413] <= test266151307()
                                                                require _12413 + return_data.size > _12413 + mem[_12413] + 31
                                                                _12737 = mem[_12413 + mem[_12413]]
                                                                if mem[_12413 + mem[_12413]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12413 + mem[_12413]]) + 32 < 0 or _12413 + ceil32(return_data.size) + (32 * mem[_12413 + mem[_12413]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12413 + ceil32(return_data.size) + (32 * mem[_12413 + mem[_12413]]) + 32
                                                                mem[_12413 + ceil32(return_data.size)] = _12737
                                                                require return_data.size >= _12575 + (32 * _12737) + 32
                                                                t = _12413 + _12575 + 32
                                                                u = _12413 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12737:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12737 < 1:
                                                                    revert with 0, 17
                                                                if _12737 - 1 >= _12737:
                                                                    revert with 0, 50
                                                                if mem[(32 * _12737 - 1) + _12413 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12737 - 1) + _12413 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _12737 - 1) + _12413 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15228 = mem[_3510]
                                                                mem[mem[64] + 164] = mem[_3510]
                                                                s = 0
                                                                t = _3510 + 32
                                                                u = mem[64] + 196
                                                                while s < _15228:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15228) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15984 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16038 = mem[_15984]
                                                                require mem[_15984] <= test266151307()
                                                                require _15984 + return_data.size > _15984 + mem[_15984] + 31
                                                                _16092 = mem[_15984 + mem[_15984]]
                                                                if mem[_15984 + mem[_15984]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15984 + mem[_15984]]) + 32 < 0 or _15984 + ceil32(return_data.size) + (32 * mem[_15984 + mem[_15984]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15984 + ceil32(return_data.size) + (32 * mem[_15984 + mem[_15984]]) + 32
                                                                mem[_15984 + ceil32(return_data.size)] = _16092
                                                                require return_data.size >= _16038 + (32 * _16092) + 32
                                                                t = _15984 + _16038 + 32
                                                                u = _15984 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16092:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16632 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16632] < _3456:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16632] - _3456):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16632] - _3456):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16632] - _3456
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                    revert with 0, 17
                                if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                    revert with 0, 17
                                if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                    revert with 0, 17
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                    revert with 0, 18
                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                    revert with 0, 17
                                sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3401 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3455 = mem[_3401]
                                                        _3509 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3509] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3509 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6582 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6690 = mem[_6582]
                                                            require mem[_6582] <= test266151307()
                                                            require _6582 + return_data.size > _6582 + mem[_6582] + 31
                                                            _6798 = mem[_6582 + mem[_6582]]
                                                            if mem[_6582 + mem[_6582]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6582 + mem[_6582]]) + 32 < 0 or _6582 + ceil32(return_data.size) + (32 * mem[_6582 + mem[_6582]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6582 + ceil32(return_data.size) + (32 * mem[_6582 + mem[_6582]]) + 32
                                                            mem[_6582 + ceil32(return_data.size)] = _6798
                                                            require return_data.size >= _6690 + (32 * _6798) + 32
                                                            t = _6582 + _6690 + 32
                                                            u = _6582 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6798:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6798 < 1:
                                                                revert with 0, 17
                                                            if _6798 - 1 >= _6798:
                                                                revert with 0, 50
                                                            if mem[(32 * _6798 - 1) + _6582 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6798 - 1) + _6582 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6798 - 1) + _6582 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9930 = mem[_3509]
                                                            mem[mem[64] + 164] = mem[_3509]
                                                            s = 0
                                                            t = _3509 + 32
                                                            u = mem[64] + 196
                                                            while s < _9930:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9930) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12409 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12571 = mem[_12409]
                                                            require mem[_12409] <= test266151307()
                                                            require _12409 + return_data.size > _12409 + mem[_12409] + 31
                                                            _12733 = mem[_12409 + mem[_12409]]
                                                            if mem[_12409 + mem[_12409]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12409 + mem[_12409]]) + 32 < 0 or _12409 + ceil32(return_data.size) + (32 * mem[_12409 + mem[_12409]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12409 + ceil32(return_data.size) + (32 * mem[_12409 + mem[_12409]]) + 32
                                                            mem[_12409 + ceil32(return_data.size)] = _12733
                                                            require return_data.size >= _12571 + (32 * _12733) + 32
                                                            t = _12409 + _12571 + 32
                                                            u = _12409 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12733:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14947 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14947] < _3455:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14947] - _3455):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14947] - _3455):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14947] - _3455
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3509 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3509 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6583 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6691 = mem[_6583]
                                                                require mem[_6583] <= test266151307()
                                                                require _6583 + return_data.size > _6583 + mem[_6583] + 31
                                                                _6799 = mem[_6583 + mem[_6583]]
                                                                if mem[_6583 + mem[_6583]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6583 + mem[_6583]]) + 32 < 0 or _6583 + ceil32(return_data.size) + (32 * mem[_6583 + mem[_6583]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6583 + ceil32(return_data.size) + (32 * mem[_6583 + mem[_6583]]) + 32
                                                                mem[_6583 + ceil32(return_data.size)] = _6799
                                                                require return_data.size >= _6691 + (32 * _6799) + 32
                                                                t = _6583 + _6691 + 32
                                                                u = _6583 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6799:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6799 < 1:
                                                                    revert with 0, 17
                                                                if _6799 - 1 >= _6799:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6799 - 1) + _6583 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6799 - 1) + _6583 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _9819 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6799 - 1) + _6583 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9931 = mem[_3509]
                                                                mem[mem[64] + 164] = mem[_3509]
                                                                s = 0
                                                                t = _3509 + 32
                                                                u = mem[64] + 196
                                                                while s < _9931:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_9819 + 100] = this.address
                                                                mem[_9819 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9819 + (32 * _9931) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12411 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12573 = mem[_12411]
                                                                require mem[_12411] <= test266151307()
                                                                require _12411 + return_data.size > _12411 + mem[_12411] + 31
                                                                _12735 = mem[_12411 + mem[_12411]]
                                                                if mem[_12411 + mem[_12411]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12411 + mem[_12411]]) + 32 < 0 or _12411 + ceil32(return_data.size) + (32 * mem[_12411 + mem[_12411]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12411 + ceil32(return_data.size) + (32 * mem[_12411 + mem[_12411]]) + 32
                                                                mem[_12411 + ceil32(return_data.size)] = _12735
                                                                require return_data.size >= _12573 + (32 * _12735) + 32
                                                                t = _12411 + _12573 + 32
                                                                u = _12411 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12735:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14949 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14949] < _3455:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14949] - _3455):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14949] - _3455):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14949] - _3455
                                                            else:
                                                                mem[_3509 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3509 + 64
                                                                t = sha3(11) + 1
                                                                while _3509 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3509 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12410 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12572 = mem[_12410]
                                                                require mem[_12410] <= test266151307()
                                                                require _12410 + return_data.size > _12410 + mem[_12410] + 31
                                                                _12734 = mem[_12410 + mem[_12410]]
                                                                if mem[_12410 + mem[_12410]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12410 + mem[_12410]]) + 32 < 0 or _12410 + ceil32(return_data.size) + (32 * mem[_12410 + mem[_12410]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12410 + ceil32(return_data.size) + (32 * mem[_12410 + mem[_12410]]) + 32
                                                                mem[_12410 + ceil32(return_data.size)] = _12734
                                                                require return_data.size >= _12572 + (32 * _12734) + 32
                                                                t = _12410 + _12572 + 32
                                                                u = _12410 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12734:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12734 < 1:
                                                                    revert with 0, 17
                                                                if _12734 - 1 >= _12734:
                                                                    revert with 0, 50
                                                                _15011 = mem[(32 * _12734 - 1) + _12410 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _12734 - 1) + _12410 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12734 - 1) + _12410 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _15011 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15227 = mem[_3509]
                                                                mem[mem[64] + 164] = mem[_3509]
                                                                s = 0
                                                                t = _3509 + 32
                                                                u = mem[64] + 196
                                                                while s < _15227:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _15011 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15227) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15983 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16037 = mem[_15983]
                                                                require mem[_15983] <= test266151307()
                                                                require _15983 + return_data.size > _15983 + mem[_15983] + 31
                                                                _16091 = mem[_15983 + mem[_15983]]
                                                                if mem[_15983 + mem[_15983]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15983 + mem[_15983]]) + 32 < 0 or _15983 + ceil32(return_data.size) + (32 * mem[_15983 + mem[_15983]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15983 + ceil32(return_data.size) + (32 * mem[_15983 + mem[_15983]]) + 32
                                                                mem[_15983 + ceil32(return_data.size)] = _16091
                                                                require return_data.size >= _16037 + (32 * _16091) + 32
                                                                t = _15983 + _16037 + 32
                                                                u = _15983 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16091:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16631 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16631] < _3455:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16631] - _3455):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16631] - _3455):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16631] - _3455
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
        else:
            require ext_code.size(dividendTokenAddress)
            staticcall dividendTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(stakingTokenAddress)
            staticcall stakingTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            if sub_6e707b73Address != dividendTokenAddress:
                if stakingTokenAddress != dividendTokenAddress:
                    if ext_call.return_data[0] < stor23:
                        revert with 0, 17
                    if ext_call.return_data[0] - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                    stor23 = ext_call.return_data[0]
                    if arg2 >= sub_8e6f4fb7.length:
                        revert with 0, 50
                    if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                        mem[32] = 26
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        mem[0] = 25
                        idx = 0
                        while idx < userStakes[msg.sender].field_0:
                            mem[0] = sha3(msg.sender, 26)
                            if userStakes[msg.sender][idx].field_0 == arg2:
                                if userStakes[msg.sender][idx].field_256:
                                    if not arg1:
                                        if arg1 < arg1:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 < 0:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 > -1:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                            revert with 0, 17
                                        if totalStaked < 0:
                                            revert with 0, 17
                                        if totalStaked > -1:
                                            revert with 0, 17
                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                        stor1.length = 1
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = 0
                                        else:
                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 -= arg1
                                    else:
                                        if sub_6e707b73Address == stakingTokenAddress:
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        else:
                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _3358 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _3412 = mem[_3358]
                                                _3466 = mem[64]
                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                mem[_3466] = sub_c1e22a65.length
                                                if not sub_c1e22a65.length:
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3466 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6496 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _6604 = mem[_6496]
                                                    require mem[_6496] <= test266151307()
                                                    require _6496 + return_data.size > _6496 + mem[_6496] + 31
                                                    _6712 = mem[_6496 + mem[_6496]]
                                                    if mem[_6496 + mem[_6496]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_6496 + mem[_6496]]) + 32 < 0 or _6496 + ceil32(return_data.size) + (32 * mem[_6496 + mem[_6496]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _6496 + ceil32(return_data.size) + (32 * mem[_6496 + mem[_6496]]) + 32
                                                    mem[_6496 + ceil32(return_data.size)] = _6712
                                                    require return_data.size >= _6604 + (32 * _6712) + 32
                                                    t = _6496 + _6604 + 32
                                                    u = _6496 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _6712:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _6712 < 1:
                                                        revert with 0, 17
                                                    if _6712 - 1 >= _6712:
                                                        revert with 0, 50
                                                    if mem[(32 * _6712 - 1) + _6496 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6712 - 1) + _6496 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _6712 - 1) + _6496 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _9844 = mem[_3466]
                                                    mem[mem[64] + 164] = mem[_3466]
                                                    s = 0
                                                    t = _3466 + 32
                                                    u = mem[64] + 196
                                                    while s < _9844:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9844) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12280 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12442 = mem[_12280]
                                                    require mem[_12280] <= test266151307()
                                                    require _12280 + return_data.size > _12280 + mem[_12280] + 31
                                                    _12604 = mem[_12280 + mem[_12280]]
                                                    if mem[_12280 + mem[_12280]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12280 + mem[_12280]]) + 32 < 0 or _12280 + ceil32(return_data.size) + (32 * mem[_12280 + mem[_12280]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12280 + ceil32(return_data.size) + (32 * mem[_12280 + mem[_12280]]) + 32
                                                    mem[_12280 + ceil32(return_data.size)] = _12604
                                                    require return_data.size >= _12442 + (32 * _12604) + 32
                                                    t = _12280 + _12442 + 32
                                                    u = _12280 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12604:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14818 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_14818] < _3412:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_14818] - _3412):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14818] - _3412):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14818] - _3412
                                                else:
                                                    mem[0] = 11
                                                    mem[_3466 + 32] = address(sub_c1e22a65.field_0)
                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3466 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6497 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6605 = mem[_6497]
                                                        require mem[_6497] <= test266151307()
                                                        require _6497 + return_data.size > _6497 + mem[_6497] + 31
                                                        _6713 = mem[_6497 + mem[_6497]]
                                                        if mem[_6497 + mem[_6497]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6497 + mem[_6497]]) + 32 < 0 or _6497 + ceil32(return_data.size) + (32 * mem[_6497 + mem[_6497]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6497 + ceil32(return_data.size) + (32 * mem[_6497 + mem[_6497]]) + 32
                                                        mem[_6497 + ceil32(return_data.size)] = _6713
                                                        require return_data.size >= _6605 + (32 * _6713) + 32
                                                        t = _6497 + _6605 + 32
                                                        u = _6497 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6713:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6713 < 1:
                                                            revert with 0, 17
                                                        if _6713 - 1 >= _6713:
                                                            revert with 0, 50
                                                        _9312 = mem[(32 * _6713 - 1) + _6497 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _6713 - 1) + _6497 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6713 - 1) + _6497 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = _9312 * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9845 = mem[_3466]
                                                        mem[mem[64] + 164] = mem[_3466]
                                                        s = 0
                                                        t = _3466 + 32
                                                        u = mem[64] + 196
                                                        while s < _9845:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9312 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9845) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12282 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12444 = mem[_12282]
                                                        require mem[_12282] <= test266151307()
                                                        require _12282 + return_data.size > _12282 + mem[_12282] + 31
                                                        _12606 = mem[_12282 + mem[_12282]]
                                                        if mem[_12282 + mem[_12282]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12282 + mem[_12282]]) + 32 < 0 or _12282 + ceil32(return_data.size) + (32 * mem[_12282 + mem[_12282]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12282 + ceil32(return_data.size) + (32 * mem[_12282 + mem[_12282]]) + 32
                                                        mem[_12282 + ceil32(return_data.size)] = _12606
                                                        require return_data.size >= _12444 + (32 * _12606) + 32
                                                        t = _12282 + _12444 + 32
                                                        u = _12282 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12606:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14820 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14820] < _3412:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14820] - _3412):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14820] - _3412):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14820] - _3412
                                                    else:
                                                        mem[_3466 + 64] = address(sub_c1e22a65.field_256)
                                                        s = _3466 + 64
                                                        t = sha3(11) + 1
                                                        while _3466 + (32 * sub_c1e22a65.length) > s:
                                                            mem[s + 32] = stor1[t]
                                                            s = s + 32
                                                            t = t + 1
                                                            continue 
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3466 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12281 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12443 = mem[_12281]
                                                        require mem[_12281] <= test266151307()
                                                        require _12281 + return_data.size > _12281 + mem[_12281] + 31
                                                        _12605 = mem[_12281 + mem[_12281]]
                                                        if mem[_12281 + mem[_12281]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12281 + mem[_12281]]) + 32 < 0 or _12281 + ceil32(return_data.size) + (32 * mem[_12281 + mem[_12281]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12281 + ceil32(return_data.size) + (32 * mem[_12281 + mem[_12281]]) + 32
                                                        mem[_12281 + ceil32(return_data.size)] = _12605
                                                        require return_data.size >= _12443 + (32 * _12605) + 32
                                                        t = _12281 + _12443 + 32
                                                        u = _12281 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12605:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _12605 < 1:
                                                            revert with 0, 17
                                                        if _12605 - 1 >= _12605:
                                                            revert with 0, 50
                                                        if mem[(32 * _12605 - 1) + _12281 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12605 - 1) + _12281 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        _15130 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _12605 - 1) + _12281 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _15184 = mem[_3466]
                                                        mem[mem[64] + 164] = mem[_3466]
                                                        s = 0
                                                        t = _3466 + 32
                                                        u = mem[64] + 196
                                                        while s < _15184:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[_15130 + 100] = this.address
                                                        mem[_15130 + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _15130 + (32 * _15184) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _15940 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _15994 = mem[_15940]
                                                        require mem[_15940] <= test266151307()
                                                        require _15940 + return_data.size > _15940 + mem[_15940] + 31
                                                        _16048 = mem[_15940 + mem[_15940]]
                                                        if mem[_15940 + mem[_15940]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_15940 + mem[_15940]]) + 32 < 0 or _15940 + ceil32(return_data.size) + (32 * mem[_15940 + mem[_15940]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _15940 + ceil32(return_data.size) + (32 * mem[_15940 + mem[_15940]]) + 32
                                                        mem[_15940 + ceil32(return_data.size)] = _16048
                                                        require return_data.size >= _15994 + (32 * _16048) + 32
                                                        t = _15940 + _15994 + 32
                                                        u = _15940 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _16048:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _16588 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_16588] < _3412:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_16588] - _3412):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16588] - _3412):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16588] - _3412
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3363 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3417 = mem[_3363]
                                                    _3471 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3471] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3471 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6506 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6614 = mem[_6506]
                                                        require mem[_6506] <= test266151307()
                                                        require _6506 + return_data.size > _6506 + mem[_6506] + 31
                                                        _6722 = mem[_6506 + mem[_6506]]
                                                        if mem[_6506 + mem[_6506]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6506 + mem[_6506]]) + 32 < 0 or _6506 + ceil32(return_data.size) + (32 * mem[_6506 + mem[_6506]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6506 + ceil32(return_data.size) + (32 * mem[_6506 + mem[_6506]]) + 32
                                                        mem[_6506 + ceil32(return_data.size)] = _6722
                                                        require return_data.size >= _6614 + (32 * _6722) + 32
                                                        t = _6506 + _6614 + 32
                                                        u = _6506 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6722:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6722 < 1:
                                                            revert with 0, 17
                                                        if _6722 - 1 >= _6722:
                                                            revert with 0, 50
                                                        if mem[(32 * _6722 - 1) + _6506 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6722 - 1) + _6506 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6722 - 1) + _6506 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9854 = mem[_3471]
                                                        mem[mem[64] + 164] = mem[_3471]
                                                        s = 0
                                                        t = _3471 + 32
                                                        u = mem[64] + 196
                                                        while s < _9854:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9854) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12295 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12457 = mem[_12295]
                                                        require mem[_12295] <= test266151307()
                                                        require _12295 + return_data.size > _12295 + mem[_12295] + 31
                                                        _12619 = mem[_12295 + mem[_12295]]
                                                        if mem[_12295 + mem[_12295]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12295 + mem[_12295]]) + 32 < 0 or _12295 + ceil32(return_data.size) + (32 * mem[_12295 + mem[_12295]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12295 + ceil32(return_data.size) + (32 * mem[_12295 + mem[_12295]]) + 32
                                                        mem[_12295 + ceil32(return_data.size)] = _12619
                                                        require return_data.size >= _12457 + (32 * _12619) + 32
                                                        t = _12295 + _12457 + 32
                                                        u = _12295 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12619:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14833 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14833] < _3417:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14833] - _3417):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14833] - _3417):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14833] - _3417
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3471 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3471 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6507 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6615 = mem[_6507]
                                                            require mem[_6507] <= test266151307()
                                                            require _6507 + return_data.size > _6507 + mem[_6507] + 31
                                                            _6723 = mem[_6507 + mem[_6507]]
                                                            if mem[_6507 + mem[_6507]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6507 + mem[_6507]]) + 32 < 0 or _6507 + ceil32(return_data.size) + (32 * mem[_6507 + mem[_6507]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6507 + ceil32(return_data.size) + (32 * mem[_6507 + mem[_6507]]) + 32
                                                            mem[_6507 + ceil32(return_data.size)] = _6723
                                                            require return_data.size >= _6615 + (32 * _6723) + 32
                                                            t = _6507 + _6615 + 32
                                                            u = _6507 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6723:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6723 < 1:
                                                                revert with 0, 17
                                                            if _6723 - 1 >= _6723:
                                                                revert with 0, 50
                                                            _9327 = mem[(32 * _6723 - 1) + _6507 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _6723 - 1) + _6507 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6723 - 1) + _6507 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = _9327 * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9855 = mem[_3471]
                                                            mem[mem[64] + 164] = mem[_3471]
                                                            s = 0
                                                            t = _3471 + 32
                                                            u = mem[64] + 196
                                                            while s < _9855:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9327 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9855) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12297 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12459 = mem[_12297]
                                                            require mem[_12297] <= test266151307()
                                                            require _12297 + return_data.size > _12297 + mem[_12297] + 31
                                                            _12621 = mem[_12297 + mem[_12297]]
                                                            if mem[_12297 + mem[_12297]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12297 + mem[_12297]]) + 32 < 0 or _12297 + ceil32(return_data.size) + (32 * mem[_12297 + mem[_12297]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12297 + ceil32(return_data.size) + (32 * mem[_12297 + mem[_12297]]) + 32
                                                            mem[_12297 + ceil32(return_data.size)] = _12621
                                                            require return_data.size >= _12459 + (32 * _12621) + 32
                                                            t = _12297 + _12459 + 32
                                                            u = _12297 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12621:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14835 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14835] < _3417:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14835] - _3417):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14835] - _3417):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14835] - _3417
                                                        else:
                                                            mem[_3471 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3471 + 64
                                                            t = sha3(11) + 1
                                                            while _3471 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3471 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12296 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12458 = mem[_12296]
                                                            require mem[_12296] <= test266151307()
                                                            require _12296 + return_data.size > _12296 + mem[_12296] + 31
                                                            _12620 = mem[_12296 + mem[_12296]]
                                                            if mem[_12296 + mem[_12296]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12296 + mem[_12296]]) + 32 < 0 or _12296 + ceil32(return_data.size) + (32 * mem[_12296 + mem[_12296]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12296 + ceil32(return_data.size) + (32 * mem[_12296 + mem[_12296]]) + 32
                                                            mem[_12296 + ceil32(return_data.size)] = _12620
                                                            require return_data.size >= _12458 + (32 * _12620) + 32
                                                            t = _12296 + _12458 + 32
                                                            u = _12296 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12620:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12620 < 1:
                                                                revert with 0, 17
                                                            if _12620 - 1 >= _12620:
                                                                revert with 0, 50
                                                            if mem[(32 * _12620 - 1) + _12296 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12620 - 1) + _12296 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _12620 - 1) + _12296 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15189 = mem[_3471]
                                                            mem[mem[64] + 164] = mem[_3471]
                                                            s = 0
                                                            t = _3471 + 32
                                                            u = mem[64] + 196
                                                            while s < _15189:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15189) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15945 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _15999 = mem[_15945]
                                                            require mem[_15945] <= test266151307()
                                                            require _15945 + return_data.size > _15945 + mem[_15945] + 31
                                                            _16053 = mem[_15945 + mem[_15945]]
                                                            if mem[_15945 + mem[_15945]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15945 + mem[_15945]]) + 32 < 0 or _15945 + ceil32(return_data.size) + (32 * mem[_15945 + mem[_15945]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15945 + ceil32(return_data.size) + (32 * mem[_15945 + mem[_15945]]) + 32
                                                            mem[_15945 + ceil32(return_data.size)] = _16053
                                                            require return_data.size >= _15999 + (32 * _16053) + 32
                                                            t = _15945 + _15999 + 32
                                                            u = _15945 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16053:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16593 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16593] < _3417:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16593] - _3417):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16593] - _3417):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16593] - _3417
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3362 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3416 = mem[_3362]
                                                        _3470 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3470] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3470 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6504 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6612 = mem[_6504]
                                                            require mem[_6504] <= test266151307()
                                                            require _6504 + return_data.size > _6504 + mem[_6504] + 31
                                                            _6720 = mem[_6504 + mem[_6504]]
                                                            if mem[_6504 + mem[_6504]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6504 + mem[_6504]]) + 32 < 0 or _6504 + ceil32(return_data.size) + (32 * mem[_6504 + mem[_6504]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6504 + ceil32(return_data.size) + (32 * mem[_6504 + mem[_6504]]) + 32
                                                            mem[_6504 + ceil32(return_data.size)] = _6720
                                                            require return_data.size >= _6612 + (32 * _6720) + 32
                                                            t = _6504 + _6612 + 32
                                                            u = _6504 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6720:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6720 < 1:
                                                                revert with 0, 17
                                                            if _6720 - 1 >= _6720:
                                                                revert with 0, 50
                                                            if mem[(32 * _6720 - 1) + _6504 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6720 - 1) + _6504 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6720 - 1) + _6504 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9852 = mem[_3470]
                                                            mem[mem[64] + 164] = mem[_3470]
                                                            s = 0
                                                            t = _3470 + 32
                                                            u = mem[64] + 196
                                                            while s < _9852:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9852) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12292 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12454 = mem[_12292]
                                                            require mem[_12292] <= test266151307()
                                                            require _12292 + return_data.size > _12292 + mem[_12292] + 31
                                                            _12616 = mem[_12292 + mem[_12292]]
                                                            if mem[_12292 + mem[_12292]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12292 + mem[_12292]]) + 32 < 0 or _12292 + ceil32(return_data.size) + (32 * mem[_12292 + mem[_12292]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12292 + ceil32(return_data.size) + (32 * mem[_12292 + mem[_12292]]) + 32
                                                            mem[_12292 + ceil32(return_data.size)] = _12616
                                                            require return_data.size >= _12454 + (32 * _12616) + 32
                                                            t = _12292 + _12454 + 32
                                                            u = _12292 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12616:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14830 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14830] < _3416:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14830] - _3416):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14830] - _3416):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14830] - _3416
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3470 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3470 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6505 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6613 = mem[_6505]
                                                                require mem[_6505] <= test266151307()
                                                                require _6505 + return_data.size > _6505 + mem[_6505] + 31
                                                                _6721 = mem[_6505 + mem[_6505]]
                                                                if mem[_6505 + mem[_6505]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6505 + mem[_6505]]) + 32 < 0 or _6505 + ceil32(return_data.size) + (32 * mem[_6505 + mem[_6505]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6505 + ceil32(return_data.size) + (32 * mem[_6505 + mem[_6505]]) + 32
                                                                mem[_6505 + ceil32(return_data.size)] = _6721
                                                                require return_data.size >= _6613 + (32 * _6721) + 32
                                                                t = _6505 + _6613 + 32
                                                                u = _6505 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6721:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6721 < 1:
                                                                    revert with 0, 17
                                                                if _6721 - 1 >= _6721:
                                                                    revert with 0, 50
                                                                _9324 = mem[(32 * _6721 - 1) + _6505 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6721 - 1) + _6505 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6721 - 1) + _6505 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9324 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9853 = mem[_3470]
                                                                mem[mem[64] + 164] = mem[_3470]
                                                                s = 0
                                                                t = _3470 + 32
                                                                u = mem[64] + 196
                                                                while s < _9853:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9324 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9853) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12294 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12456 = mem[_12294]
                                                                require mem[_12294] <= test266151307()
                                                                require _12294 + return_data.size > _12294 + mem[_12294] + 31
                                                                _12618 = mem[_12294 + mem[_12294]]
                                                                if mem[_12294 + mem[_12294]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12294 + mem[_12294]]) + 32 < 0 or _12294 + ceil32(return_data.size) + (32 * mem[_12294 + mem[_12294]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12294 + ceil32(return_data.size) + (32 * mem[_12294 + mem[_12294]]) + 32
                                                                mem[_12294 + ceil32(return_data.size)] = _12618
                                                                require return_data.size >= _12456 + (32 * _12618) + 32
                                                                t = _12294 + _12456 + 32
                                                                u = _12294 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12618:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14832 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14832] < _3416:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14832] - _3416):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14832] - _3416):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14832] - _3416
                                                            else:
                                                                mem[_3470 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3470 + 64
                                                                t = sha3(11) + 1
                                                                while _3470 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3470 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12293 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12455 = mem[_12293]
                                                                require mem[_12293] <= test266151307()
                                                                require _12293 + return_data.size > _12293 + mem[_12293] + 31
                                                                _12617 = mem[_12293 + mem[_12293]]
                                                                if mem[_12293 + mem[_12293]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12293 + mem[_12293]]) + 32 < 0 or _12293 + ceil32(return_data.size) + (32 * mem[_12293 + mem[_12293]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12293 + ceil32(return_data.size) + (32 * mem[_12293 + mem[_12293]]) + 32
                                                                mem[_12293 + ceil32(return_data.size)] = _12617
                                                                require return_data.size >= _12455 + (32 * _12617) + 32
                                                                t = _12293 + _12455 + 32
                                                                u = _12293 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12617:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12617 < 1:
                                                                    revert with 0, 17
                                                                if _12617 - 1 >= _12617:
                                                                    revert with 0, 50
                                                                if mem[(32 * _12617 - 1) + _12293 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12617 - 1) + _12293 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _15134 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _12617 - 1) + _12293 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15188 = mem[_3470]
                                                                mem[mem[64] + 164] = mem[_3470]
                                                                s = 0
                                                                t = _3470 + 32
                                                                u = mem[64] + 196
                                                                while s < _15188:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_15134 + 100] = this.address
                                                                mem[_15134 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _15134 + (32 * _15188) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15944 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _15998 = mem[_15944]
                                                                require mem[_15944] <= test266151307()
                                                                require _15944 + return_data.size > _15944 + mem[_15944] + 31
                                                                _16052 = mem[_15944 + mem[_15944]]
                                                                if mem[_15944 + mem[_15944]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15944 + mem[_15944]]) + 32 < 0 or _15944 + ceil32(return_data.size) + (32 * mem[_15944 + mem[_15944]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15944 + ceil32(return_data.size) + (32 * mem[_15944 + mem[_15944]]) + 32
                                                                mem[_15944 + ceil32(return_data.size)] = _16052
                                                                require return_data.size >= _15998 + (32 * _16052) + 32
                                                                t = _15944 + _15998 + 32
                                                                u = _15944 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16052:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16592 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16592] < _3416:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16592] - _3416):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16592] - _3416):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16592] - _3416
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if block.number <= bonusEndBlock:
                                    if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                        revert with 0, 17
                                    if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                        revert with 0, 17
                                    if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                        revert with 0, 17
                                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                        revert with 0, 18
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                        revert with 0, 17
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3361 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3415 = mem[_3361]
                                                            _3469 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3469] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3469 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6502 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6610 = mem[_6502]
                                                                require mem[_6502] <= test266151307()
                                                                require _6502 + return_data.size > _6502 + mem[_6502] + 31
                                                                _6718 = mem[_6502 + mem[_6502]]
                                                                if mem[_6502 + mem[_6502]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6502 + mem[_6502]]) + 32 < 0 or _6502 + ceil32(return_data.size) + (32 * mem[_6502 + mem[_6502]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6502 + ceil32(return_data.size) + (32 * mem[_6502 + mem[_6502]]) + 32
                                                                mem[_6502 + ceil32(return_data.size)] = _6718
                                                                require return_data.size >= _6610 + (32 * _6718) + 32
                                                                t = _6502 + _6610 + 32
                                                                u = _6502 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6718:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6718 < 1:
                                                                    revert with 0, 17
                                                                if _6718 - 1 >= _6718:
                                                                    revert with 0, 50
                                                                _9319 = mem[(32 * _6718 - 1) + _6502 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6718 - 1) + _6502 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6718 - 1) + _6502 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9319 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9850 = mem[_3469]
                                                                mem[mem[64] + 164] = mem[_3469]
                                                                s = 0
                                                                t = _3469 + 32
                                                                u = mem[64] + 196
                                                                while s < _9850:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9319 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9850) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12289 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12451 = mem[_12289]
                                                                require mem[_12289] <= test266151307()
                                                                require _12289 + return_data.size > _12289 + mem[_12289] + 31
                                                                _12613 = mem[_12289 + mem[_12289]]
                                                                if mem[_12289 + mem[_12289]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12289 + mem[_12289]]) + 32 < 0 or _12289 + ceil32(return_data.size) + (32 * mem[_12289 + mem[_12289]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12289 + ceil32(return_data.size) + (32 * mem[_12289 + mem[_12289]]) + 32
                                                                mem[_12289 + ceil32(return_data.size)] = _12613
                                                                require return_data.size >= _12451 + (32 * _12613) + 32
                                                                t = _12289 + _12451 + 32
                                                                u = _12289 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12613:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14827 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14827] < _3415:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14827] - _3415):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14827] - _3415):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14827] - _3415
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3469 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3469 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6503 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6611 = mem[_6503]
                                                                    require mem[_6503] <= test266151307()
                                                                    require _6503 + return_data.size > _6503 + mem[_6503] + 31
                                                                    _6719 = mem[_6503 + mem[_6503]]
                                                                    if mem[_6503 + mem[_6503]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6503 + mem[_6503]]) + 32 < 0 or _6503 + ceil32(return_data.size) + (32 * mem[_6503 + mem[_6503]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6503 + ceil32(return_data.size) + (32 * mem[_6503 + mem[_6503]]) + 32
                                                                    mem[_6503 + ceil32(return_data.size)] = _6719
                                                                    require return_data.size >= _6611 + (32 * _6719) + 32
                                                                    t = _6503 + _6611 + 32
                                                                    u = _6503 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6719:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6719 < 1:
                                                                        revert with 0, 17
                                                                    if _6719 - 1 >= _6719:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6719 - 1) + _6503 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6719 - 1) + _6503 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6719 - 1) + _6503 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9851 = mem[_3469]
                                                                    mem[mem[64] + 164] = mem[_3469]
                                                                    s = 0
                                                                    t = _3469 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9851:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9851) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12291 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12453 = mem[_12291]
                                                                    require mem[_12291] <= test266151307()
                                                                    require _12291 + return_data.size > _12291 + mem[_12291] + 31
                                                                    _12615 = mem[_12291 + mem[_12291]]
                                                                    if mem[_12291 + mem[_12291]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12291 + mem[_12291]]) + 32 < 0 or _12291 + ceil32(return_data.size) + (32 * mem[_12291 + mem[_12291]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12291 + ceil32(return_data.size) + (32 * mem[_12291 + mem[_12291]]) + 32
                                                                    mem[_12291 + ceil32(return_data.size)] = _12615
                                                                    require return_data.size >= _12453 + (32 * _12615) + 32
                                                                    t = _12291 + _12453 + 32
                                                                    u = _12291 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12615:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14829 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14829] < _3415:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14829] - _3415):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14829] - _3415):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14829] - _3415
                                                                else:
                                                                    mem[_3469 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3469 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3469 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3469 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12290 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12452 = mem[_12290]
                                                                    require mem[_12290] <= test266151307()
                                                                    require _12290 + return_data.size > _12290 + mem[_12290] + 31
                                                                    _12614 = mem[_12290 + mem[_12290]]
                                                                    if mem[_12290 + mem[_12290]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12290 + mem[_12290]]) + 32 < 0 or _12290 + ceil32(return_data.size) + (32 * mem[_12290 + mem[_12290]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12290 + ceil32(return_data.size) + (32 * mem[_12290 + mem[_12290]]) + 32
                                                                    mem[_12290 + ceil32(return_data.size)] = _12614
                                                                    require return_data.size >= _12452 + (32 * _12614) + 32
                                                                    t = _12290 + _12452 + 32
                                                                    u = _12290 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12614:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12614 < 1:
                                                                        revert with 0, 17
                                                                    if _12614 - 1 >= _12614:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12614 - 1) + _12290 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12614 - 1) + _12290 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    _15133 = mem[64]
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12614 - 1) + _12290 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15187 = mem[_3469]
                                                                    mem[mem[64] + 164] = mem[_3469]
                                                                    s = 0
                                                                    t = _3469 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15187:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_15133 + 100] = this.address
                                                                    mem[_15133 + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.mem[mem[64] len 4] with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _15133 + (32 * _15187) + -mem[64] + 192]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15943 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _15997 = mem[_15943]
                                                                    require mem[_15943] <= test266151307()
                                                                    require _15943 + return_data.size > _15943 + mem[_15943] + 31
                                                                    _16051 = mem[_15943 + mem[_15943]]
                                                                    if mem[_15943 + mem[_15943]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15943 + mem[_15943]]) + 32 < 0 or _15943 + ceil32(return_data.size) + (32 * mem[_15943 + mem[_15943]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15943 + ceil32(return_data.size) + (32 * mem[_15943 + mem[_15943]]) + 32
                                                                    mem[_15943 + ceil32(return_data.size)] = _16051
                                                                    require return_data.size >= _15997 + (32 * _16051) + 32
                                                                    t = _15943 + _15997 + 32
                                                                    u = _15943 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16051:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16591 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16591] < _3415:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16591] - _3415):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16591] - _3415):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16591] - _3415
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                        if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                            revert with 0, 17
                                        if False and PRECISION_FACTOR > 0:
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3360 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3414 = mem[_3360]
                                                                _3468 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3468] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3468 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6500 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6608 = mem[_6500]
                                                                    require mem[_6500] <= test266151307()
                                                                    require _6500 + return_data.size > _6500 + mem[_6500] + 31
                                                                    _6716 = mem[_6500 + mem[_6500]]
                                                                    if mem[_6500 + mem[_6500]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6500 + mem[_6500]]) + 32 < 0 or _6500 + ceil32(return_data.size) + (32 * mem[_6500 + mem[_6500]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6500 + ceil32(return_data.size) + (32 * mem[_6500 + mem[_6500]]) + 32
                                                                    mem[_6500 + ceil32(return_data.size)] = _6716
                                                                    require return_data.size >= _6608 + (32 * _6716) + 32
                                                                    t = _6500 + _6608 + 32
                                                                    u = _6500 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6716:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6716 < 1:
                                                                        revert with 0, 17
                                                                    if _6716 - 1 >= _6716:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6716 - 1) + _6500 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6716 - 1) + _6500 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6716 - 1) + _6500 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9848 = mem[_3468]
                                                                    mem[mem[64] + 164] = mem[_3468]
                                                                    s = 0
                                                                    t = _3468 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9848:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9848) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12286 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12448 = mem[_12286]
                                                                    require mem[_12286] <= test266151307()
                                                                    require _12286 + return_data.size > _12286 + mem[_12286] + 31
                                                                    _12610 = mem[_12286 + mem[_12286]]
                                                                    if mem[_12286 + mem[_12286]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12286 + mem[_12286]]) + 32 < 0 or _12286 + ceil32(return_data.size) + (32 * mem[_12286 + mem[_12286]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12286 + ceil32(return_data.size) + (32 * mem[_12286 + mem[_12286]]) + 32
                                                                    mem[_12286 + ceil32(return_data.size)] = _12610
                                                                    require return_data.size >= _12448 + (32 * _12610) + 32
                                                                    t = _12286 + _12448 + 32
                                                                    u = _12286 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12610:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14824 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14824] < _3414:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14824] - _3414):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14824] - _3414):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14824] - _3414
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3468 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3468 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6501 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6609 = mem[_6501]
                                                                        require mem[_6501] <= test266151307()
                                                                        require _6501 + return_data.size > _6501 + mem[_6501] + 31
                                                                        _6717 = mem[_6501 + mem[_6501]]
                                                                        if mem[_6501 + mem[_6501]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6501 + mem[_6501]]) + 32 < 0 or _6501 + ceil32(return_data.size) + (32 * mem[_6501 + mem[_6501]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6501 + ceil32(return_data.size) + (32 * mem[_6501 + mem[_6501]]) + 32
                                                                        mem[_6501 + ceil32(return_data.size)] = _6717
                                                                        require return_data.size >= _6609 + (32 * _6717) + 32
                                                                        t = _6501 + _6609 + 32
                                                                        u = _6501 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6717:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6717 < 1:
                                                                            revert with 0, 17
                                                                        if _6717 - 1 >= _6717:
                                                                            revert with 0, 50
                                                                        _9318 = mem[(32 * _6717 - 1) + _6501 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6717 - 1) + _6501 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6717 - 1) + _6501 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9318 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9849 = mem[_3468]
                                                                        mem[mem[64] + 164] = mem[_3468]
                                                                        s = 0
                                                                        t = _3468 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9849:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9318 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9849) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12288 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12450 = mem[_12288]
                                                                        require mem[_12288] <= test266151307()
                                                                        require _12288 + return_data.size > _12288 + mem[_12288] + 31
                                                                        _12612 = mem[_12288 + mem[_12288]]
                                                                        if mem[_12288 + mem[_12288]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12288 + mem[_12288]]) + 32 < 0 or _12288 + ceil32(return_data.size) + (32 * mem[_12288 + mem[_12288]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12288 + ceil32(return_data.size) + (32 * mem[_12288 + mem[_12288]]) + 32
                                                                        mem[_12288 + ceil32(return_data.size)] = _12612
                                                                        require return_data.size >= _12450 + (32 * _12612) + 32
                                                                        t = _12288 + _12450 + 32
                                                                        u = _12288 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12612:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14826 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14826] < _3414:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14826] - _3414):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14826] - _3414):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14826] - _3414
                                                                    else:
                                                                        mem[_3468 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3468 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3468 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3468 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12287 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12449 = mem[_12287]
                                                                        require mem[_12287] <= test266151307()
                                                                        require _12287 + return_data.size > _12287 + mem[_12287] + 31
                                                                        _12611 = mem[_12287 + mem[_12287]]
                                                                        if mem[_12287 + mem[_12287]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12287 + mem[_12287]]) + 32 < 0 or _12287 + ceil32(return_data.size) + (32 * mem[_12287 + mem[_12287]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12287 + ceil32(return_data.size) + (32 * mem[_12287 + mem[_12287]]) + 32
                                                                        mem[_12287 + ceil32(return_data.size)] = _12611
                                                                        require return_data.size >= _12449 + (32 * _12611) + 32
                                                                        t = _12287 + _12449 + 32
                                                                        u = _12287 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12611:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12611 < 1:
                                                                            revert with 0, 17
                                                                        if _12611 - 1 >= _12611:
                                                                            revert with 0, 50
                                                                        _14970 = mem[(32 * _12611 - 1) + _12287 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _12611 - 1) + _12287 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12611 - 1) + _12287 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _14970 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15186 = mem[_3468]
                                                                        mem[mem[64] + 164] = mem[_3468]
                                                                        s = 0
                                                                        t = _3468 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15186:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14970 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15186) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15942 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _15996 = mem[_15942]
                                                                        require mem[_15942] <= test266151307()
                                                                        require _15942 + return_data.size > _15942 + mem[_15942] + 31
                                                                        _16050 = mem[_15942 + mem[_15942]]
                                                                        if mem[_15942 + mem[_15942]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15942 + mem[_15942]]) + 32 < 0 or _15942 + ceil32(return_data.size) + (32 * mem[_15942 + mem[_15942]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15942 + ceil32(return_data.size) + (32 * mem[_15942 + mem[_15942]]) + 32
                                                                        mem[_15942 + ceil32(return_data.size)] = _16050
                                                                        require return_data.size >= _15996 + (32 * _16050) + 32
                                                                        t = _15942 + _15996 + 32
                                                                        u = _15942 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16050:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16590 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16590] < _3414:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16590] - _3414):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16590] - _3414):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16590] - _3414
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3359 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3413 = mem[_3359]
                                                                _3467 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3467] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3467 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6498 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6606 = mem[_6498]
                                                                    require mem[_6498] <= test266151307()
                                                                    require _6498 + return_data.size > _6498 + mem[_6498] + 31
                                                                    _6714 = mem[_6498 + mem[_6498]]
                                                                    if mem[_6498 + mem[_6498]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6498 + mem[_6498]]) + 32 < 0 or _6498 + ceil32(return_data.size) + (32 * mem[_6498 + mem[_6498]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6498 + ceil32(return_data.size) + (32 * mem[_6498 + mem[_6498]]) + 32
                                                                    mem[_6498 + ceil32(return_data.size)] = _6714
                                                                    require return_data.size >= _6606 + (32 * _6714) + 32
                                                                    t = _6498 + _6606 + 32
                                                                    u = _6498 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6714:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6714 < 1:
                                                                        revert with 0, 17
                                                                    if _6714 - 1 >= _6714:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6714 - 1) + _6498 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6714 - 1) + _6498 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6714 - 1) + _6498 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9846 = mem[_3467]
                                                                    mem[mem[64] + 164] = mem[_3467]
                                                                    s = 0
                                                                    t = _3467 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9846:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9846) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12283 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12445 = mem[_12283]
                                                                    require mem[_12283] <= test266151307()
                                                                    require _12283 + return_data.size > _12283 + mem[_12283] + 31
                                                                    _12607 = mem[_12283 + mem[_12283]]
                                                                    if mem[_12283 + mem[_12283]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12283 + mem[_12283]]) + 32 < 0 or _12283 + ceil32(return_data.size) + (32 * mem[_12283 + mem[_12283]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12283 + ceil32(return_data.size) + (32 * mem[_12283 + mem[_12283]]) + 32
                                                                    mem[_12283 + ceil32(return_data.size)] = _12607
                                                                    require return_data.size >= _12445 + (32 * _12607) + 32
                                                                    t = _12283 + _12445 + 32
                                                                    u = _12283 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12607:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14821 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14821] < _3413:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14821] - _3413):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14821] - _3413):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14821] - _3413
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3467 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3467 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6499 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6607 = mem[_6499]
                                                                        require mem[_6499] <= test266151307()
                                                                        require _6499 + return_data.size > _6499 + mem[_6499] + 31
                                                                        _6715 = mem[_6499 + mem[_6499]]
                                                                        if mem[_6499 + mem[_6499]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6499 + mem[_6499]]) + 32 < 0 or _6499 + ceil32(return_data.size) + (32 * mem[_6499 + mem[_6499]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6499 + ceil32(return_data.size) + (32 * mem[_6499 + mem[_6499]]) + 32
                                                                        mem[_6499 + ceil32(return_data.size)] = _6715
                                                                        require return_data.size >= _6607 + (32 * _6715) + 32
                                                                        t = _6499 + _6607 + 32
                                                                        u = _6499 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6715:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6715 < 1:
                                                                            revert with 0, 17
                                                                        if _6715 - 1 >= _6715:
                                                                            revert with 0, 50
                                                                        _9315 = mem[(32 * _6715 - 1) + _6499 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6715 - 1) + _6499 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6715 - 1) + _6499 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9315 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9847 = mem[_3467]
                                                                        mem[mem[64] + 164] = mem[_3467]
                                                                        s = 0
                                                                        t = _3467 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9847:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9315 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9847) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12285 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12447 = mem[_12285]
                                                                        require mem[_12285] <= test266151307()
                                                                        require _12285 + return_data.size > _12285 + mem[_12285] + 31
                                                                        _12609 = mem[_12285 + mem[_12285]]
                                                                        if mem[_12285 + mem[_12285]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12285 + mem[_12285]]) + 32 < 0 or _12285 + ceil32(return_data.size) + (32 * mem[_12285 + mem[_12285]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12285 + ceil32(return_data.size) + (32 * mem[_12285 + mem[_12285]]) + 32
                                                                        mem[_12285 + ceil32(return_data.size)] = _12609
                                                                        require return_data.size >= _12447 + (32 * _12609) + 32
                                                                        t = _12285 + _12447 + 32
                                                                        u = _12285 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12609:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14823 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14823] < _3413:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14823] - _3413):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14823] - _3413):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14823] - _3413
                                                                    else:
                                                                        mem[_3467 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3467 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3467 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3467 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12284 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12446 = mem[_12284]
                                                                        require mem[_12284] <= test266151307()
                                                                        require _12284 + return_data.size > _12284 + mem[_12284] + 31
                                                                        _12608 = mem[_12284 + mem[_12284]]
                                                                        if mem[_12284 + mem[_12284]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12284 + mem[_12284]]) + 32 < 0 or _12284 + ceil32(return_data.size) + (32 * mem[_12284 + mem[_12284]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12284 + ceil32(return_data.size) + (32 * mem[_12284 + mem[_12284]]) + 32
                                                                        mem[_12284 + ceil32(return_data.size)] = _12608
                                                                        require return_data.size >= _12446 + (32 * _12608) + 32
                                                                        t = _12284 + _12446 + 32
                                                                        u = _12284 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12608:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12608 < 1:
                                                                            revert with 0, 17
                                                                        if _12608 - 1 >= _12608:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _12608 - 1) + _12284 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12608 - 1) + _12284 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _12608 - 1) + _12284 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15185 = mem[_3467]
                                                                        mem[mem[64] + 164] = mem[_3467]
                                                                        s = 0
                                                                        t = _3467 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15185:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15185) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15941 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _15995 = mem[_15941]
                                                                        require mem[_15941] <= test266151307()
                                                                        require _15941 + return_data.size > _15941 + mem[_15941] + 31
                                                                        _16049 = mem[_15941 + mem[_15941]]
                                                                        if mem[_15941 + mem[_15941]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15941 + mem[_15941]]) + 32 < 0 or _15941 + ceil32(return_data.size) + (32 * mem[_15941 + mem[_15941]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15941 + ceil32(return_data.size) + (32 * mem[_15941 + mem[_15941]]) + 32
                                                                        mem[_15941 + ceil32(return_data.size)] = _16049
                                                                        require return_data.size >= _15995 + (32 * _16049) + 32
                                                                        t = _15941 + _15995 + 32
                                                                        u = _15941 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16049:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16589 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16589] < _3413:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16589] - _3413):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16589] - _3413):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16589] - _3413
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                else:
                    if ext_call.return_data[0] >= totalStaked:
                        if ext_call.return_data[0] - totalStaked < stor23:
                            revert with 0, 17
                        if ext_call.return_data[0] - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - totalStaked - stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                        stor23 = ext_call.return_data[0] - totalStaked
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3364 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3418 = mem[_3364]
                                                    _3472 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3472] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3472 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6508 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6616 = mem[_6508]
                                                        require mem[_6508] <= test266151307()
                                                        require _6508 + return_data.size > _6508 + mem[_6508] + 31
                                                        _6724 = mem[_6508 + mem[_6508]]
                                                        if mem[_6508 + mem[_6508]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6508 + mem[_6508]]) + 32 < 0 or _6508 + ceil32(return_data.size) + (32 * mem[_6508 + mem[_6508]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6508 + ceil32(return_data.size) + (32 * mem[_6508 + mem[_6508]]) + 32
                                                        mem[_6508 + ceil32(return_data.size)] = _6724
                                                        require return_data.size >= _6616 + (32 * _6724) + 32
                                                        t = _6508 + _6616 + 32
                                                        u = _6508 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6724:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6724 < 1:
                                                            revert with 0, 17
                                                        if _6724 - 1 >= _6724:
                                                            revert with 0, 50
                                                        if mem[(32 * _6724 - 1) + _6508 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6724 - 1) + _6508 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6724 - 1) + _6508 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9856 = mem[_3472]
                                                        mem[mem[64] + 164] = mem[_3472]
                                                        s = 0
                                                        t = _3472 + 32
                                                        u = mem[64] + 196
                                                        while s < _9856:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9856) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12298 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12460 = mem[_12298]
                                                        require mem[_12298] <= test266151307()
                                                        require _12298 + return_data.size > _12298 + mem[_12298] + 31
                                                        _12622 = mem[_12298 + mem[_12298]]
                                                        if mem[_12298 + mem[_12298]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12298 + mem[_12298]]) + 32 < 0 or _12298 + ceil32(return_data.size) + (32 * mem[_12298 + mem[_12298]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12298 + ceil32(return_data.size) + (32 * mem[_12298 + mem[_12298]]) + 32
                                                        mem[_12298 + ceil32(return_data.size)] = _12622
                                                        require return_data.size >= _12460 + (32 * _12622) + 32
                                                        t = _12298 + _12460 + 32
                                                        u = _12298 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12622:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14836 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14836] < _3418:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14836] - _3418):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14836] - _3418):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14836] - _3418
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3472 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3472 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6509 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6617 = mem[_6509]
                                                            require mem[_6509] <= test266151307()
                                                            require _6509 + return_data.size > _6509 + mem[_6509] + 31
                                                            _6725 = mem[_6509 + mem[_6509]]
                                                            if mem[_6509 + mem[_6509]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6509 + mem[_6509]]) + 32 < 0 or _6509 + ceil32(return_data.size) + (32 * mem[_6509 + mem[_6509]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6509 + ceil32(return_data.size) + (32 * mem[_6509 + mem[_6509]]) + 32
                                                            mem[_6509 + ceil32(return_data.size)] = _6725
                                                            require return_data.size >= _6617 + (32 * _6725) + 32
                                                            t = _6509 + _6617 + 32
                                                            u = _6509 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6725:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6725 < 1:
                                                                revert with 0, 17
                                                            if _6725 - 1 >= _6725:
                                                                revert with 0, 50
                                                            _9330 = mem[(32 * _6725 - 1) + _6509 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _6725 - 1) + _6509 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6725 - 1) + _6509 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = _9330 * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9857 = mem[_3472]
                                                            mem[mem[64] + 164] = mem[_3472]
                                                            s = 0
                                                            t = _3472 + 32
                                                            u = mem[64] + 196
                                                            while s < _9857:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9330 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9857) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12300 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12462 = mem[_12300]
                                                            require mem[_12300] <= test266151307()
                                                            require _12300 + return_data.size > _12300 + mem[_12300] + 31
                                                            _12624 = mem[_12300 + mem[_12300]]
                                                            if mem[_12300 + mem[_12300]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12300 + mem[_12300]]) + 32 < 0 or _12300 + ceil32(return_data.size) + (32 * mem[_12300 + mem[_12300]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12300 + ceil32(return_data.size) + (32 * mem[_12300 + mem[_12300]]) + 32
                                                            mem[_12300 + ceil32(return_data.size)] = _12624
                                                            require return_data.size >= _12462 + (32 * _12624) + 32
                                                            t = _12300 + _12462 + 32
                                                            u = _12300 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12624:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14838 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14838] < _3418:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14838] - _3418):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14838] - _3418):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14838] - _3418
                                                        else:
                                                            mem[_3472 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3472 + 64
                                                            t = sha3(11) + 1
                                                            while _3472 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3472 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12299 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12461 = mem[_12299]
                                                            require mem[_12299] <= test266151307()
                                                            require _12299 + return_data.size > _12299 + mem[_12299] + 31
                                                            _12623 = mem[_12299 + mem[_12299]]
                                                            if mem[_12299 + mem[_12299]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12299 + mem[_12299]]) + 32 < 0 or _12299 + ceil32(return_data.size) + (32 * mem[_12299 + mem[_12299]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12299 + ceil32(return_data.size) + (32 * mem[_12299 + mem[_12299]]) + 32
                                                            mem[_12299 + ceil32(return_data.size)] = _12623
                                                            require return_data.size >= _12461 + (32 * _12623) + 32
                                                            t = _12299 + _12461 + 32
                                                            u = _12299 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12623:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12623 < 1:
                                                                revert with 0, 17
                                                            if _12623 - 1 >= _12623:
                                                                revert with 0, 50
                                                            if mem[(32 * _12623 - 1) + _12299 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12623 - 1) + _12299 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _12623 - 1) + _12299 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15190 = mem[_3472]
                                                            mem[mem[64] + 164] = mem[_3472]
                                                            s = 0
                                                            t = _3472 + 32
                                                            u = mem[64] + 196
                                                            while s < _15190:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15190) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15946 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _16000 = mem[_15946]
                                                            require mem[_15946] <= test266151307()
                                                            require _15946 + return_data.size > _15946 + mem[_15946] + 31
                                                            _16054 = mem[_15946 + mem[_15946]]
                                                            if mem[_15946 + mem[_15946]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15946 + mem[_15946]]) + 32 < 0 or _15946 + ceil32(return_data.size) + (32 * mem[_15946 + mem[_15946]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15946 + ceil32(return_data.size) + (32 * mem[_15946 + mem[_15946]]) + 32
                                                            mem[_15946 + ceil32(return_data.size)] = _16054
                                                            require return_data.size >= _16000 + (32 * _16054) + 32
                                                            t = _15946 + _16000 + 32
                                                            u = _15946 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16054:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16594 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16594] < _3418:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16594] - _3418):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16594] - _3418):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16594] - _3418
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3369 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3423 = mem[_3369]
                                                        _3477 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3477] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3477 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6518 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6626 = mem[_6518]
                                                            require mem[_6518] <= test266151307()
                                                            require _6518 + return_data.size > _6518 + mem[_6518] + 31
                                                            _6734 = mem[_6518 + mem[_6518]]
                                                            if mem[_6518 + mem[_6518]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6518 + mem[_6518]]) + 32 < 0 or _6518 + ceil32(return_data.size) + (32 * mem[_6518 + mem[_6518]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6518 + ceil32(return_data.size) + (32 * mem[_6518 + mem[_6518]]) + 32
                                                            mem[_6518 + ceil32(return_data.size)] = _6734
                                                            require return_data.size >= _6626 + (32 * _6734) + 32
                                                            t = _6518 + _6626 + 32
                                                            u = _6518 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6734:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6734 < 1:
                                                                revert with 0, 17
                                                            if _6734 - 1 >= _6734:
                                                                revert with 0, 50
                                                            if mem[(32 * _6734 - 1) + _6518 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6734 - 1) + _6518 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6734 - 1) + _6518 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9866 = mem[_3477]
                                                            mem[mem[64] + 164] = mem[_3477]
                                                            s = 0
                                                            t = _3477 + 32
                                                            u = mem[64] + 196
                                                            while s < _9866:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9866) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12313 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12475 = mem[_12313]
                                                            require mem[_12313] <= test266151307()
                                                            require _12313 + return_data.size > _12313 + mem[_12313] + 31
                                                            _12637 = mem[_12313 + mem[_12313]]
                                                            if mem[_12313 + mem[_12313]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12313 + mem[_12313]]) + 32 < 0 or _12313 + ceil32(return_data.size) + (32 * mem[_12313 + mem[_12313]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12313 + ceil32(return_data.size) + (32 * mem[_12313 + mem[_12313]]) + 32
                                                            mem[_12313 + ceil32(return_data.size)] = _12637
                                                            require return_data.size >= _12475 + (32 * _12637) + 32
                                                            t = _12313 + _12475 + 32
                                                            u = _12313 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12637:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14851 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14851] < _3423:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14851] - _3423):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14851] - _3423):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14851] - _3423
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3477 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3477 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6519 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6627 = mem[_6519]
                                                                require mem[_6519] <= test266151307()
                                                                require _6519 + return_data.size > _6519 + mem[_6519] + 31
                                                                _6735 = mem[_6519 + mem[_6519]]
                                                                if mem[_6519 + mem[_6519]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6519 + mem[_6519]]) + 32 < 0 or _6519 + ceil32(return_data.size) + (32 * mem[_6519 + mem[_6519]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6519 + ceil32(return_data.size) + (32 * mem[_6519 + mem[_6519]]) + 32
                                                                mem[_6519 + ceil32(return_data.size)] = _6735
                                                                require return_data.size >= _6627 + (32 * _6735) + 32
                                                                t = _6519 + _6627 + 32
                                                                u = _6519 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6735:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6735 < 1:
                                                                    revert with 0, 17
                                                                if _6735 - 1 >= _6735:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6735 - 1) + _6519 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6735 - 1) + _6519 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _9723 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6735 - 1) + _6519 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9867 = mem[_3477]
                                                                mem[mem[64] + 164] = mem[_3477]
                                                                s = 0
                                                                t = _3477 + 32
                                                                u = mem[64] + 196
                                                                while s < _9867:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_9723 + 100] = this.address
                                                                mem[_9723 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9723 + (32 * _9867) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12315 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12477 = mem[_12315]
                                                                require mem[_12315] <= test266151307()
                                                                require _12315 + return_data.size > _12315 + mem[_12315] + 31
                                                                _12639 = mem[_12315 + mem[_12315]]
                                                                if mem[_12315 + mem[_12315]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12315 + mem[_12315]]) + 32 < 0 or _12315 + ceil32(return_data.size) + (32 * mem[_12315 + mem[_12315]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12315 + ceil32(return_data.size) + (32 * mem[_12315 + mem[_12315]]) + 32
                                                                mem[_12315 + ceil32(return_data.size)] = _12639
                                                                require return_data.size >= _12477 + (32 * _12639) + 32
                                                                t = _12315 + _12477 + 32
                                                                u = _12315 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12639:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14853 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14853] < _3423:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14853] - _3423):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14853] - _3423):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14853] - _3423
                                                            else:
                                                                mem[_3477 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3477 + 64
                                                                t = sha3(11) + 1
                                                                while _3477 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3477 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12314 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12476 = mem[_12314]
                                                                require mem[_12314] <= test266151307()
                                                                require _12314 + return_data.size > _12314 + mem[_12314] + 31
                                                                _12638 = mem[_12314 + mem[_12314]]
                                                                if mem[_12314 + mem[_12314]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12314 + mem[_12314]]) + 32 < 0 or _12314 + ceil32(return_data.size) + (32 * mem[_12314 + mem[_12314]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12314 + ceil32(return_data.size) + (32 * mem[_12314 + mem[_12314]]) + 32
                                                                mem[_12314 + ceil32(return_data.size)] = _12638
                                                                require return_data.size >= _12476 + (32 * _12638) + 32
                                                                t = _12314 + _12476 + 32
                                                                u = _12314 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12638:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12638 < 1:
                                                                    revert with 0, 17
                                                                if _12638 - 1 >= _12638:
                                                                    revert with 0, 50
                                                                if mem[(32 * _12638 - 1) + _12314 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12638 - 1) + _12314 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _12638 - 1) + _12314 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15195 = mem[_3477]
                                                                mem[mem[64] + 164] = mem[_3477]
                                                                s = 0
                                                                t = _3477 + 32
                                                                u = mem[64] + 196
                                                                while s < _15195:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15195) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15951 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16005 = mem[_15951]
                                                                require mem[_15951] <= test266151307()
                                                                require _15951 + return_data.size > _15951 + mem[_15951] + 31
                                                                _16059 = mem[_15951 + mem[_15951]]
                                                                if mem[_15951 + mem[_15951]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15951 + mem[_15951]]) + 32 < 0 or _15951 + ceil32(return_data.size) + (32 * mem[_15951 + mem[_15951]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15951 + ceil32(return_data.size) + (32 * mem[_15951 + mem[_15951]]) + 32
                                                                mem[_15951 + ceil32(return_data.size)] = _16059
                                                                require return_data.size >= _16005 + (32 * _16059) + 32
                                                                t = _15951 + _16005 + 32
                                                                u = _15951 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16059:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16599 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16599] < _3423:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16599] - _3423):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16599] - _3423):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16599] - _3423
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3368 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3422 = mem[_3368]
                                                            _3476 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3476] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3476 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6516 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6624 = mem[_6516]
                                                                require mem[_6516] <= test266151307()
                                                                require _6516 + return_data.size > _6516 + mem[_6516] + 31
                                                                _6732 = mem[_6516 + mem[_6516]]
                                                                if mem[_6516 + mem[_6516]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6516 + mem[_6516]]) + 32 < 0 or _6516 + ceil32(return_data.size) + (32 * mem[_6516 + mem[_6516]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6516 + ceil32(return_data.size) + (32 * mem[_6516 + mem[_6516]]) + 32
                                                                mem[_6516 + ceil32(return_data.size)] = _6732
                                                                require return_data.size >= _6624 + (32 * _6732) + 32
                                                                t = _6516 + _6624 + 32
                                                                u = _6516 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6732:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6732 < 1:
                                                                    revert with 0, 17
                                                                if _6732 - 1 >= _6732:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6732 - 1) + _6516 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6732 - 1) + _6516 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6732 - 1) + _6516 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9864 = mem[_3476]
                                                                mem[mem[64] + 164] = mem[_3476]
                                                                s = 0
                                                                t = _3476 + 32
                                                                u = mem[64] + 196
                                                                while s < _9864:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9864) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12310 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12472 = mem[_12310]
                                                                require mem[_12310] <= test266151307()
                                                                require _12310 + return_data.size > _12310 + mem[_12310] + 31
                                                                _12634 = mem[_12310 + mem[_12310]]
                                                                if mem[_12310 + mem[_12310]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12310 + mem[_12310]]) + 32 < 0 or _12310 + ceil32(return_data.size) + (32 * mem[_12310 + mem[_12310]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12310 + ceil32(return_data.size) + (32 * mem[_12310 + mem[_12310]]) + 32
                                                                mem[_12310 + ceil32(return_data.size)] = _12634
                                                                require return_data.size >= _12472 + (32 * _12634) + 32
                                                                t = _12310 + _12472 + 32
                                                                u = _12310 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12634:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14848 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14848] < _3422:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14848] - _3422):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14848] - _3422):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14848] - _3422
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3476 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3476 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6517 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6625 = mem[_6517]
                                                                    require mem[_6517] <= test266151307()
                                                                    require _6517 + return_data.size > _6517 + mem[_6517] + 31
                                                                    _6733 = mem[_6517 + mem[_6517]]
                                                                    if mem[_6517 + mem[_6517]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6517 + mem[_6517]]) + 32 < 0 or _6517 + ceil32(return_data.size) + (32 * mem[_6517 + mem[_6517]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6517 + ceil32(return_data.size) + (32 * mem[_6517 + mem[_6517]]) + 32
                                                                    mem[_6517 + ceil32(return_data.size)] = _6733
                                                                    require return_data.size >= _6625 + (32 * _6733) + 32
                                                                    t = _6517 + _6625 + 32
                                                                    u = _6517 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6733:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6733 < 1:
                                                                        revert with 0, 17
                                                                    if _6733 - 1 >= _6733:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6733 - 1) + _6517 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6733 - 1) + _6517 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6733 - 1) + _6517 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9865 = mem[_3476]
                                                                    mem[mem[64] + 164] = mem[_3476]
                                                                    s = 0
                                                                    t = _3476 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9865:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9865) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12312 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12474 = mem[_12312]
                                                                    require mem[_12312] <= test266151307()
                                                                    require _12312 + return_data.size > _12312 + mem[_12312] + 31
                                                                    _12636 = mem[_12312 + mem[_12312]]
                                                                    if mem[_12312 + mem[_12312]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12312 + mem[_12312]]) + 32 < 0 or _12312 + ceil32(return_data.size) + (32 * mem[_12312 + mem[_12312]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12312 + ceil32(return_data.size) + (32 * mem[_12312 + mem[_12312]]) + 32
                                                                    mem[_12312 + ceil32(return_data.size)] = _12636
                                                                    require return_data.size >= _12474 + (32 * _12636) + 32
                                                                    t = _12312 + _12474 + 32
                                                                    u = _12312 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12636:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14850 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14850] < _3422:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14850] - _3422):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14850] - _3422):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14850] - _3422
                                                                else:
                                                                    mem[_3476 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3476 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3476 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3476 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12311 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12473 = mem[_12311]
                                                                    require mem[_12311] <= test266151307()
                                                                    require _12311 + return_data.size > _12311 + mem[_12311] + 31
                                                                    _12635 = mem[_12311 + mem[_12311]]
                                                                    if mem[_12311 + mem[_12311]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12311 + mem[_12311]]) + 32 < 0 or _12311 + ceil32(return_data.size) + (32 * mem[_12311 + mem[_12311]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12311 + ceil32(return_data.size) + (32 * mem[_12311 + mem[_12311]]) + 32
                                                                    mem[_12311 + ceil32(return_data.size)] = _12635
                                                                    require return_data.size >= _12473 + (32 * _12635) + 32
                                                                    t = _12311 + _12473 + 32
                                                                    u = _12311 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12635:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12635 < 1:
                                                                        revert with 0, 17
                                                                    if _12635 - 1 >= _12635:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12635 - 1) + _12311 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12635 - 1) + _12311 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    _15140 = mem[64]
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12635 - 1) + _12311 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15194 = mem[_3476]
                                                                    mem[mem[64] + 164] = mem[_3476]
                                                                    s = 0
                                                                    t = _3476 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15194:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_15140 + 100] = this.address
                                                                    mem[_15140 + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.mem[mem[64] len 4] with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _15140 + (32 * _15194) + -mem[64] + 192]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15950 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _16004 = mem[_15950]
                                                                    require mem[_15950] <= test266151307()
                                                                    require _15950 + return_data.size > _15950 + mem[_15950] + 31
                                                                    _16058 = mem[_15950 + mem[_15950]]
                                                                    if mem[_15950 + mem[_15950]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15950 + mem[_15950]]) + 32 < 0 or _15950 + ceil32(return_data.size) + (32 * mem[_15950 + mem[_15950]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15950 + ceil32(return_data.size) + (32 * mem[_15950 + mem[_15950]]) + 32
                                                                    mem[_15950 + ceil32(return_data.size)] = _16058
                                                                    require return_data.size >= _16004 + (32 * _16058) + 32
                                                                    t = _15950 + _16004 + 32
                                                                    u = _15950 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16058:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16598 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16598] < _3422:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16598] - _3422):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16598] - _3422):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16598] - _3422
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if block.number <= bonusEndBlock:
                                        if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3367 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3421 = mem[_3367]
                                                                _3475 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3475] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3475 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6514 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6622 = mem[_6514]
                                                                    require mem[_6514] <= test266151307()
                                                                    require _6514 + return_data.size > _6514 + mem[_6514] + 31
                                                                    _6730 = mem[_6514 + mem[_6514]]
                                                                    if mem[_6514 + mem[_6514]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6514 + mem[_6514]]) + 32 < 0 or _6514 + ceil32(return_data.size) + (32 * mem[_6514 + mem[_6514]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6514 + ceil32(return_data.size) + (32 * mem[_6514 + mem[_6514]]) + 32
                                                                    mem[_6514 + ceil32(return_data.size)] = _6730
                                                                    require return_data.size >= _6622 + (32 * _6730) + 32
                                                                    t = _6514 + _6622 + 32
                                                                    u = _6514 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6730:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6730 < 1:
                                                                        revert with 0, 17
                                                                    if _6730 - 1 >= _6730:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6730 - 1) + _6514 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6730 - 1) + _6514 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6730 - 1) + _6514 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9862 = mem[_3475]
                                                                    mem[mem[64] + 164] = mem[_3475]
                                                                    s = 0
                                                                    t = _3475 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9862:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9862) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12307 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12469 = mem[_12307]
                                                                    require mem[_12307] <= test266151307()
                                                                    require _12307 + return_data.size > _12307 + mem[_12307] + 31
                                                                    _12631 = mem[_12307 + mem[_12307]]
                                                                    if mem[_12307 + mem[_12307]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12307 + mem[_12307]]) + 32 < 0 or _12307 + ceil32(return_data.size) + (32 * mem[_12307 + mem[_12307]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12307 + ceil32(return_data.size) + (32 * mem[_12307 + mem[_12307]]) + 32
                                                                    mem[_12307 + ceil32(return_data.size)] = _12631
                                                                    require return_data.size >= _12469 + (32 * _12631) + 32
                                                                    t = _12307 + _12469 + 32
                                                                    u = _12307 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12631:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14845 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14845] < _3421:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14845] - _3421):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14845] - _3421):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14845] - _3421
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3475 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3475 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6515 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6623 = mem[_6515]
                                                                        require mem[_6515] <= test266151307()
                                                                        require _6515 + return_data.size > _6515 + mem[_6515] + 31
                                                                        _6731 = mem[_6515 + mem[_6515]]
                                                                        if mem[_6515 + mem[_6515]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6515 + mem[_6515]]) + 32 < 0 or _6515 + ceil32(return_data.size) + (32 * mem[_6515 + mem[_6515]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6515 + ceil32(return_data.size) + (32 * mem[_6515 + mem[_6515]]) + 32
                                                                        mem[_6515 + ceil32(return_data.size)] = _6731
                                                                        require return_data.size >= _6623 + (32 * _6731) + 32
                                                                        t = _6515 + _6623 + 32
                                                                        u = _6515 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6731:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6731 < 1:
                                                                            revert with 0, 17
                                                                        if _6731 - 1 >= _6731:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6731 - 1) + _6515 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6731 - 1) + _6515 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        _9717 = mem[64]
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6731 - 1) + _6515 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9863 = mem[_3475]
                                                                        mem[mem[64] + 164] = mem[_3475]
                                                                        s = 0
                                                                        t = _3475 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9863:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[_9717 + 100] = this.address
                                                                        mem[_9717 + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.mem[mem[64] len 4] with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len _9717 + (32 * _9863) + -mem[64] + 192]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12309 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12471 = mem[_12309]
                                                                        require mem[_12309] <= test266151307()
                                                                        require _12309 + return_data.size > _12309 + mem[_12309] + 31
                                                                        _12633 = mem[_12309 + mem[_12309]]
                                                                        if mem[_12309 + mem[_12309]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12309 + mem[_12309]]) + 32 < 0 or _12309 + ceil32(return_data.size) + (32 * mem[_12309 + mem[_12309]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12309 + ceil32(return_data.size) + (32 * mem[_12309 + mem[_12309]]) + 32
                                                                        mem[_12309 + ceil32(return_data.size)] = _12633
                                                                        require return_data.size >= _12471 + (32 * _12633) + 32
                                                                        t = _12309 + _12471 + 32
                                                                        u = _12309 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12633:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14847 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14847] < _3421:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14847] - _3421):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14847] - _3421):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14847] - _3421
                                                                    else:
                                                                        mem[_3475 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3475 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3475 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3475 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12308 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12470 = mem[_12308]
                                                                        require mem[_12308] <= test266151307()
                                                                        require _12308 + return_data.size > _12308 + mem[_12308] + 31
                                                                        _12632 = mem[_12308 + mem[_12308]]
                                                                        if mem[_12308 + mem[_12308]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12308 + mem[_12308]]) + 32 < 0 or _12308 + ceil32(return_data.size) + (32 * mem[_12308 + mem[_12308]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12308 + ceil32(return_data.size) + (32 * mem[_12308 + mem[_12308]]) + 32
                                                                        mem[_12308 + ceil32(return_data.size)] = _12632
                                                                        require return_data.size >= _12470 + (32 * _12632) + 32
                                                                        t = _12308 + _12470 + 32
                                                                        u = _12308 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12632:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12632 < 1:
                                                                            revert with 0, 17
                                                                        if _12632 - 1 >= _12632:
                                                                            revert with 0, 50
                                                                        _14977 = mem[(32 * _12632 - 1) + _12308 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _12632 - 1) + _12308 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12632 - 1) + _12308 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _14977 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15193 = mem[_3475]
                                                                        mem[mem[64] + 164] = mem[_3475]
                                                                        s = 0
                                                                        t = _3475 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15193:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14977 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15193) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15949 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16003 = mem[_15949]
                                                                        require mem[_15949] <= test266151307()
                                                                        require _15949 + return_data.size > _15949 + mem[_15949] + 31
                                                                        _16057 = mem[_15949 + mem[_15949]]
                                                                        if mem[_15949 + mem[_15949]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15949 + mem[_15949]]) + 32 < 0 or _15949 + ceil32(return_data.size) + (32 * mem[_15949 + mem[_15949]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15949 + ceil32(return_data.size) + (32 * mem[_15949 + mem[_15949]]) + 32
                                                                        mem[_15949 + ceil32(return_data.size)] = _16057
                                                                        require return_data.size >= _16003 + (32 * _16057) + 32
                                                                        t = _15949 + _16003 + 32
                                                                        u = _15949 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16057:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16597 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16597] < _3421:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16597] - _3421):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16597] - _3421):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16597] - _3421
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                            if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                                revert with 0, 17
                                            if False and PRECISION_FACTOR > 0:
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3366 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3420 = mem[_3366]
                                                                    _3474 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3474] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3474 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6512 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6620 = mem[_6512]
                                                                        require mem[_6512] <= test266151307()
                                                                        require _6512 + return_data.size > _6512 + mem[_6512] + 31
                                                                        _6728 = mem[_6512 + mem[_6512]]
                                                                        if mem[_6512 + mem[_6512]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6512 + mem[_6512]]) + 32 < 0 or _6512 + ceil32(return_data.size) + (32 * mem[_6512 + mem[_6512]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6512 + ceil32(return_data.size) + (32 * mem[_6512 + mem[_6512]]) + 32
                                                                        mem[_6512 + ceil32(return_data.size)] = _6728
                                                                        require return_data.size >= _6620 + (32 * _6728) + 32
                                                                        t = _6512 + _6620 + 32
                                                                        u = _6512 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6728:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6728 < 1:
                                                                            revert with 0, 17
                                                                        if _6728 - 1 >= _6728:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6728 - 1) + _6512 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6728 - 1) + _6512 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6728 - 1) + _6512 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9860 = mem[_3474]
                                                                        mem[mem[64] + 164] = mem[_3474]
                                                                        s = 0
                                                                        t = _3474 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9860:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9860) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12304 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12466 = mem[_12304]
                                                                        require mem[_12304] <= test266151307()
                                                                        require _12304 + return_data.size > _12304 + mem[_12304] + 31
                                                                        _12628 = mem[_12304 + mem[_12304]]
                                                                        if mem[_12304 + mem[_12304]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12304 + mem[_12304]]) + 32 < 0 or _12304 + ceil32(return_data.size) + (32 * mem[_12304 + mem[_12304]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12304 + ceil32(return_data.size) + (32 * mem[_12304 + mem[_12304]]) + 32
                                                                        mem[_12304 + ceil32(return_data.size)] = _12628
                                                                        require return_data.size >= _12466 + (32 * _12628) + 32
                                                                        t = _12304 + _12466 + 32
                                                                        u = _12304 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12628:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14842 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14842] < _3420:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14842] - _3420):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14842] - _3420):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14842] - _3420
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3474 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3474 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6513 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6621 = mem[_6513]
                                                                            require mem[_6513] <= test266151307()
                                                                            require _6513 + return_data.size > _6513 + mem[_6513] + 31
                                                                            _6729 = mem[_6513 + mem[_6513]]
                                                                            if mem[_6513 + mem[_6513]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6513 + mem[_6513]]) + 32 < 0 or _6513 + ceil32(return_data.size) + (32 * mem[_6513 + mem[_6513]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6513 + ceil32(return_data.size) + (32 * mem[_6513 + mem[_6513]]) + 32
                                                                            mem[_6513 + ceil32(return_data.size)] = _6729
                                                                            require return_data.size >= _6621 + (32 * _6729) + 32
                                                                            t = _6513 + _6621 + 32
                                                                            u = _6513 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6729:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6729 < 1:
                                                                                revert with 0, 17
                                                                            if _6729 - 1 >= _6729:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6729 - 1) + _6513 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6729 - 1) + _6513 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            _9714 = mem[64]
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6729 - 1) + _6513 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9861 = mem[_3474]
                                                                            mem[mem[64] + 164] = mem[_3474]
                                                                            s = 0
                                                                            t = _3474 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9861:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[_9714 + 100] = this.address
                                                                            mem[_9714 + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len _9714 + (32 * _9861) + -mem[64] + 192]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12306 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12468 = mem[_12306]
                                                                            require mem[_12306] <= test266151307()
                                                                            require _12306 + return_data.size > _12306 + mem[_12306] + 31
                                                                            _12630 = mem[_12306 + mem[_12306]]
                                                                            if mem[_12306 + mem[_12306]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12306 + mem[_12306]]) + 32 < 0 or _12306 + ceil32(return_data.size) + (32 * mem[_12306 + mem[_12306]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12306 + ceil32(return_data.size) + (32 * mem[_12306 + mem[_12306]]) + 32
                                                                            mem[_12306 + ceil32(return_data.size)] = _12630
                                                                            require return_data.size >= _12468 + (32 * _12630) + 32
                                                                            t = _12306 + _12468 + 32
                                                                            u = _12306 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12630:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14844 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14844] < _3420:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14844] - _3420):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14844] - _3420):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14844] - _3420
                                                                        else:
                                                                            mem[_3474 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3474 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3474 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3474 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12305 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12467 = mem[_12305]
                                                                            require mem[_12305] <= test266151307()
                                                                            require _12305 + return_data.size > _12305 + mem[_12305] + 31
                                                                            _12629 = mem[_12305 + mem[_12305]]
                                                                            if mem[_12305 + mem[_12305]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12305 + mem[_12305]]) + 32 < 0 or _12305 + ceil32(return_data.size) + (32 * mem[_12305 + mem[_12305]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12305 + ceil32(return_data.size) + (32 * mem[_12305 + mem[_12305]]) + 32
                                                                            mem[_12305 + ceil32(return_data.size)] = _12629
                                                                            require return_data.size >= _12467 + (32 * _12629) + 32
                                                                            t = _12305 + _12467 + 32
                                                                            u = _12305 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12629:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12629 < 1:
                                                                                revert with 0, 17
                                                                            if _12629 - 1 >= _12629:
                                                                                revert with 0, 50
                                                                            _14976 = mem[(32 * _12629 - 1) + _12305 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _12629 - 1) + _12305 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12629 - 1) + _12305 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _14976 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15192 = mem[_3474]
                                                                            mem[mem[64] + 164] = mem[_3474]
                                                                            s = 0
                                                                            t = _3474 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15192:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14976 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15192) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15948 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16002 = mem[_15948]
                                                                            require mem[_15948] <= test266151307()
                                                                            require _15948 + return_data.size > _15948 + mem[_15948] + 31
                                                                            _16056 = mem[_15948 + mem[_15948]]
                                                                            if mem[_15948 + mem[_15948]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15948 + mem[_15948]]) + 32 < 0 or _15948 + ceil32(return_data.size) + (32 * mem[_15948 + mem[_15948]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15948 + ceil32(return_data.size) + (32 * mem[_15948 + mem[_15948]]) + 32
                                                                            mem[_15948 + ceil32(return_data.size)] = _16056
                                                                            require return_data.size >= _16002 + (32 * _16056) + 32
                                                                            t = _15948 + _16002 + 32
                                                                            u = _15948 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16056:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16596 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16596] < _3420:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16596] - _3420):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16596] - _3420):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16596] - _3420
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                        else:
                                            if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3365 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3419 = mem[_3365]
                                                                    _3473 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3473] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3473 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6510 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6618 = mem[_6510]
                                                                        require mem[_6510] <= test266151307()
                                                                        require _6510 + return_data.size > _6510 + mem[_6510] + 31
                                                                        _6726 = mem[_6510 + mem[_6510]]
                                                                        if mem[_6510 + mem[_6510]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6510 + mem[_6510]]) + 32 < 0 or _6510 + ceil32(return_data.size) + (32 * mem[_6510 + mem[_6510]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6510 + ceil32(return_data.size) + (32 * mem[_6510 + mem[_6510]]) + 32
                                                                        mem[_6510 + ceil32(return_data.size)] = _6726
                                                                        require return_data.size >= _6618 + (32 * _6726) + 32
                                                                        t = _6510 + _6618 + 32
                                                                        u = _6510 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6726:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6726 < 1:
                                                                            revert with 0, 17
                                                                        if _6726 - 1 >= _6726:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6726 - 1) + _6510 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6726 - 1) + _6510 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6726 - 1) + _6510 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9858 = mem[_3473]
                                                                        mem[mem[64] + 164] = mem[_3473]
                                                                        s = 0
                                                                        t = _3473 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9858:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9858) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12301 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12463 = mem[_12301]
                                                                        require mem[_12301] <= test266151307()
                                                                        require _12301 + return_data.size > _12301 + mem[_12301] + 31
                                                                        _12625 = mem[_12301 + mem[_12301]]
                                                                        if mem[_12301 + mem[_12301]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12301 + mem[_12301]]) + 32 < 0 or _12301 + ceil32(return_data.size) + (32 * mem[_12301 + mem[_12301]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12301 + ceil32(return_data.size) + (32 * mem[_12301 + mem[_12301]]) + 32
                                                                        mem[_12301 + ceil32(return_data.size)] = _12625
                                                                        require return_data.size >= _12463 + (32 * _12625) + 32
                                                                        t = _12301 + _12463 + 32
                                                                        u = _12301 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12625:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14839 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14839] < _3419:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14839] - _3419):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14839] - _3419):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14839] - _3419
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3473 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3473 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6511 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6619 = mem[_6511]
                                                                            require mem[_6511] <= test266151307()
                                                                            require _6511 + return_data.size > _6511 + mem[_6511] + 31
                                                                            _6727 = mem[_6511 + mem[_6511]]
                                                                            if mem[_6511 + mem[_6511]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6511 + mem[_6511]]) + 32 < 0 or _6511 + ceil32(return_data.size) + (32 * mem[_6511 + mem[_6511]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6511 + ceil32(return_data.size) + (32 * mem[_6511 + mem[_6511]]) + 32
                                                                            mem[_6511 + ceil32(return_data.size)] = _6727
                                                                            require return_data.size >= _6619 + (32 * _6727) + 32
                                                                            t = _6511 + _6619 + 32
                                                                            u = _6511 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6727:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6727 < 1:
                                                                                revert with 0, 17
                                                                            if _6727 - 1 >= _6727:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6727 - 1) + _6511 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6727 - 1) + _6511 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6727 - 1) + _6511 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9859 = mem[_3473]
                                                                            mem[mem[64] + 164] = mem[_3473]
                                                                            s = 0
                                                                            t = _3473 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9859:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9859) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12303 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12465 = mem[_12303]
                                                                            require mem[_12303] <= test266151307()
                                                                            require _12303 + return_data.size > _12303 + mem[_12303] + 31
                                                                            _12627 = mem[_12303 + mem[_12303]]
                                                                            if mem[_12303 + mem[_12303]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12303 + mem[_12303]]) + 32 < 0 or _12303 + ceil32(return_data.size) + (32 * mem[_12303 + mem[_12303]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12303 + ceil32(return_data.size) + (32 * mem[_12303 + mem[_12303]]) + 32
                                                                            mem[_12303 + ceil32(return_data.size)] = _12627
                                                                            require return_data.size >= _12465 + (32 * _12627) + 32
                                                                            t = _12303 + _12465 + 32
                                                                            u = _12303 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12627:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14841 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14841] < _3419:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14841] - _3419):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14841] - _3419):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14841] - _3419
                                                                        else:
                                                                            mem[_3473 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3473 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3473 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3473 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12302 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12464 = mem[_12302]
                                                                            require mem[_12302] <= test266151307()
                                                                            require _12302 + return_data.size > _12302 + mem[_12302] + 31
                                                                            _12626 = mem[_12302 + mem[_12302]]
                                                                            if mem[_12302 + mem[_12302]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12302 + mem[_12302]]) + 32 < 0 or _12302 + ceil32(return_data.size) + (32 * mem[_12302 + mem[_12302]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12302 + ceil32(return_data.size) + (32 * mem[_12302 + mem[_12302]]) + 32
                                                                            mem[_12302 + ceil32(return_data.size)] = _12626
                                                                            require return_data.size >= _12464 + (32 * _12626) + 32
                                                                            t = _12302 + _12464 + 32
                                                                            u = _12302 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12626:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12626 < 1:
                                                                                revert with 0, 17
                                                                            if _12626 - 1 >= _12626:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _12626 - 1) + _12302 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12626 - 1) + _12302 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _12626 - 1) + _12302 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15191 = mem[_3473]
                                                                            mem[mem[64] + 164] = mem[_3473]
                                                                            s = 0
                                                                            t = _3473 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15191:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15191) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15947 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16001 = mem[_15947]
                                                                            require mem[_15947] <= test266151307()
                                                                            require _15947 + return_data.size > _15947 + mem[_15947] + 31
                                                                            _16055 = mem[_15947 + mem[_15947]]
                                                                            if mem[_15947 + mem[_15947]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15947 + mem[_15947]]) + 32 < 0 or _15947 + ceil32(return_data.size) + (32 * mem[_15947 + mem[_15947]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15947 + ceil32(return_data.size) + (32 * mem[_15947 + mem[_15947]]) + 32
                                                                            mem[_15947 + ceil32(return_data.size)] = _16055
                                                                            require return_data.size >= _16001 + (32 * _16055) + 32
                                                                            t = _15947 + _16001 + 32
                                                                            u = _15947 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16055:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16595 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16595] < _3419:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16595] - _3419):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16595] - _3419):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16595] - _3419
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                    else:
                        if 0 < stor23:
                            revert with 0, 17
                        if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                        stor23 = 0
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3370 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3424 = mem[_3370]
                                                    _3478 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3478] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3478 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6520 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6628 = mem[_6520]
                                                        require mem[_6520] <= test266151307()
                                                        require _6520 + return_data.size > _6520 + mem[_6520] + 31
                                                        _6736 = mem[_6520 + mem[_6520]]
                                                        if mem[_6520 + mem[_6520]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6520 + mem[_6520]]) + 32 < 0 or _6520 + ceil32(return_data.size) + (32 * mem[_6520 + mem[_6520]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6520 + ceil32(return_data.size) + (32 * mem[_6520 + mem[_6520]]) + 32
                                                        mem[_6520 + ceil32(return_data.size)] = _6736
                                                        require return_data.size >= _6628 + (32 * _6736) + 32
                                                        t = _6520 + _6628 + 32
                                                        u = _6520 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6736:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6736 < 1:
                                                            revert with 0, 17
                                                        if _6736 - 1 >= _6736:
                                                            revert with 0, 50
                                                        if mem[(32 * _6736 - 1) + _6520 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6736 - 1) + _6520 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6736 - 1) + _6520 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9868 = mem[_3478]
                                                        mem[mem[64] + 164] = mem[_3478]
                                                        s = 0
                                                        t = _3478 + 32
                                                        u = mem[64] + 196
                                                        while s < _9868:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9868) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12316 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12478 = mem[_12316]
                                                        require mem[_12316] <= test266151307()
                                                        require _12316 + return_data.size > _12316 + mem[_12316] + 31
                                                        _12640 = mem[_12316 + mem[_12316]]
                                                        if mem[_12316 + mem[_12316]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12316 + mem[_12316]]) + 32 < 0 or _12316 + ceil32(return_data.size) + (32 * mem[_12316 + mem[_12316]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12316 + ceil32(return_data.size) + (32 * mem[_12316 + mem[_12316]]) + 32
                                                        mem[_12316 + ceil32(return_data.size)] = _12640
                                                        require return_data.size >= _12478 + (32 * _12640) + 32
                                                        t = _12316 + _12478 + 32
                                                        u = _12316 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12640:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14854 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14854] < _3424:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14854] - _3424):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14854] - _3424):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14854] - _3424
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3478 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3478 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6521 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6629 = mem[_6521]
                                                            require mem[_6521] <= test266151307()
                                                            require _6521 + return_data.size > _6521 + mem[_6521] + 31
                                                            _6737 = mem[_6521 + mem[_6521]]
                                                            if mem[_6521 + mem[_6521]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6521 + mem[_6521]]) + 32 < 0 or _6521 + ceil32(return_data.size) + (32 * mem[_6521 + mem[_6521]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6521 + ceil32(return_data.size) + (32 * mem[_6521 + mem[_6521]]) + 32
                                                            mem[_6521 + ceil32(return_data.size)] = _6737
                                                            require return_data.size >= _6629 + (32 * _6737) + 32
                                                            t = _6521 + _6629 + 32
                                                            u = _6521 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6737:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6737 < 1:
                                                                revert with 0, 17
                                                            if _6737 - 1 >= _6737:
                                                                revert with 0, 50
                                                            if mem[(32 * _6737 - 1) + _6521 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6737 - 1) + _6521 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6737 - 1) + _6521 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9869 = mem[_3478]
                                                            mem[mem[64] + 164] = mem[_3478]
                                                            s = 0
                                                            t = _3478 + 32
                                                            u = mem[64] + 196
                                                            while s < _9869:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9869) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12318 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12480 = mem[_12318]
                                                            require mem[_12318] <= test266151307()
                                                            require _12318 + return_data.size > _12318 + mem[_12318] + 31
                                                            _12642 = mem[_12318 + mem[_12318]]
                                                            if mem[_12318 + mem[_12318]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12318 + mem[_12318]]) + 32 < 0 or _12318 + ceil32(return_data.size) + (32 * mem[_12318 + mem[_12318]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12318 + ceil32(return_data.size) + (32 * mem[_12318 + mem[_12318]]) + 32
                                                            mem[_12318 + ceil32(return_data.size)] = _12642
                                                            require return_data.size >= _12480 + (32 * _12642) + 32
                                                            t = _12318 + _12480 + 32
                                                            u = _12318 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12642:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14856 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14856] < _3424:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14856] - _3424):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14856] - _3424):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14856] - _3424
                                                        else:
                                                            mem[_3478 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3478 + 64
                                                            t = sha3(11) + 1
                                                            while _3478 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3478 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12317 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12479 = mem[_12317]
                                                            require mem[_12317] <= test266151307()
                                                            require _12317 + return_data.size > _12317 + mem[_12317] + 31
                                                            _12641 = mem[_12317 + mem[_12317]]
                                                            if mem[_12317 + mem[_12317]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12317 + mem[_12317]]) + 32 < 0 or _12317 + ceil32(return_data.size) + (32 * mem[_12317 + mem[_12317]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12317 + ceil32(return_data.size) + (32 * mem[_12317 + mem[_12317]]) + 32
                                                            mem[_12317 + ceil32(return_data.size)] = _12641
                                                            require return_data.size >= _12479 + (32 * _12641) + 32
                                                            t = _12317 + _12479 + 32
                                                            u = _12317 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12641:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12641 < 1:
                                                                revert with 0, 17
                                                            if _12641 - 1 >= _12641:
                                                                revert with 0, 50
                                                            _14980 = mem[(32 * _12641 - 1) + _12317 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _12641 - 1) + _12317 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12641 - 1) + _12317 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = _14980 * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15196 = mem[_3478]
                                                            mem[mem[64] + 164] = mem[_3478]
                                                            s = 0
                                                            t = _3478 + 32
                                                            u = mem[64] + 196
                                                            while s < _15196:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14980 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15196) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15952 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _16006 = mem[_15952]
                                                            require mem[_15952] <= test266151307()
                                                            require _15952 + return_data.size > _15952 + mem[_15952] + 31
                                                            _16060 = mem[_15952 + mem[_15952]]
                                                            if mem[_15952 + mem[_15952]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15952 + mem[_15952]]) + 32 < 0 or _15952 + ceil32(return_data.size) + (32 * mem[_15952 + mem[_15952]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15952 + ceil32(return_data.size) + (32 * mem[_15952 + mem[_15952]]) + 32
                                                            mem[_15952 + ceil32(return_data.size)] = _16060
                                                            require return_data.size >= _16006 + (32 * _16060) + 32
                                                            t = _15952 + _16006 + 32
                                                            u = _15952 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16060:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16600 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16600] < _3424:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16600] - _3424):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16600] - _3424):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16600] - _3424
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3375 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3429 = mem[_3375]
                                                        _3483 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3483] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3483 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6530 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6638 = mem[_6530]
                                                            require mem[_6530] <= test266151307()
                                                            require _6530 + return_data.size > _6530 + mem[_6530] + 31
                                                            _6746 = mem[_6530 + mem[_6530]]
                                                            if mem[_6530 + mem[_6530]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6530 + mem[_6530]]) + 32 < 0 or _6530 + ceil32(return_data.size) + (32 * mem[_6530 + mem[_6530]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6530 + ceil32(return_data.size) + (32 * mem[_6530 + mem[_6530]]) + 32
                                                            mem[_6530 + ceil32(return_data.size)] = _6746
                                                            require return_data.size >= _6638 + (32 * _6746) + 32
                                                            t = _6530 + _6638 + 32
                                                            u = _6530 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6746:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6746 < 1:
                                                                revert with 0, 17
                                                            if _6746 - 1 >= _6746:
                                                                revert with 0, 50
                                                            if mem[(32 * _6746 - 1) + _6530 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6746 - 1) + _6530 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            _9739 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6746 - 1) + _6530 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9878 = mem[_3483]
                                                            mem[mem[64] + 164] = mem[_3483]
                                                            s = 0
                                                            t = _3483 + 32
                                                            u = mem[64] + 196
                                                            while s < _9878:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_9739 + 100] = this.address
                                                            mem[_9739 + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9739 + (32 * _9878) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12331 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12493 = mem[_12331]
                                                            require mem[_12331] <= test266151307()
                                                            require _12331 + return_data.size > _12331 + mem[_12331] + 31
                                                            _12655 = mem[_12331 + mem[_12331]]
                                                            if mem[_12331 + mem[_12331]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12331 + mem[_12331]]) + 32 < 0 or _12331 + ceil32(return_data.size) + (32 * mem[_12331 + mem[_12331]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12331 + ceil32(return_data.size) + (32 * mem[_12331 + mem[_12331]]) + 32
                                                            mem[_12331 + ceil32(return_data.size)] = _12655
                                                            require return_data.size >= _12493 + (32 * _12655) + 32
                                                            t = _12331 + _12493 + 32
                                                            u = _12331 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12655:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14869 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14869] < _3429:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14869] - _3429):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14869] - _3429):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14869] - _3429
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3483 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3483 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6531 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6639 = mem[_6531]
                                                                require mem[_6531] <= test266151307()
                                                                require _6531 + return_data.size > _6531 + mem[_6531] + 31
                                                                _6747 = mem[_6531 + mem[_6531]]
                                                                if mem[_6531 + mem[_6531]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6531 + mem[_6531]]) + 32 < 0 or _6531 + ceil32(return_data.size) + (32 * mem[_6531 + mem[_6531]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6531 + ceil32(return_data.size) + (32 * mem[_6531 + mem[_6531]]) + 32
                                                                mem[_6531 + ceil32(return_data.size)] = _6747
                                                                require return_data.size >= _6639 + (32 * _6747) + 32
                                                                t = _6531 + _6639 + 32
                                                                u = _6531 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6747:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6747 < 1:
                                                                    revert with 0, 17
                                                                if _6747 - 1 >= _6747:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6747 - 1) + _6531 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6747 - 1) + _6531 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6747 - 1) + _6531 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9879 = mem[_3483]
                                                                mem[mem[64] + 164] = mem[_3483]
                                                                s = 0
                                                                t = _3483 + 32
                                                                u = mem[64] + 196
                                                                while s < _9879:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9879) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12333 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12495 = mem[_12333]
                                                                require mem[_12333] <= test266151307()
                                                                require _12333 + return_data.size > _12333 + mem[_12333] + 31
                                                                _12657 = mem[_12333 + mem[_12333]]
                                                                if mem[_12333 + mem[_12333]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12333 + mem[_12333]]) + 32 < 0 or _12333 + ceil32(return_data.size) + (32 * mem[_12333 + mem[_12333]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12333 + ceil32(return_data.size) + (32 * mem[_12333 + mem[_12333]]) + 32
                                                                mem[_12333 + ceil32(return_data.size)] = _12657
                                                                require return_data.size >= _12495 + (32 * _12657) + 32
                                                                t = _12333 + _12495 + 32
                                                                u = _12333 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12657:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14871 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14871] < _3429:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14871] - _3429):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14871] - _3429):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14871] - _3429
                                                            else:
                                                                mem[_3483 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3483 + 64
                                                                t = sha3(11) + 1
                                                                while _3483 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3483 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12332 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12494 = mem[_12332]
                                                                require mem[_12332] <= test266151307()
                                                                require _12332 + return_data.size > _12332 + mem[_12332] + 31
                                                                _12656 = mem[_12332 + mem[_12332]]
                                                                if mem[_12332 + mem[_12332]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12332 + mem[_12332]]) + 32 < 0 or _12332 + ceil32(return_data.size) + (32 * mem[_12332 + mem[_12332]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12332 + ceil32(return_data.size) + (32 * mem[_12332 + mem[_12332]]) + 32
                                                                mem[_12332 + ceil32(return_data.size)] = _12656
                                                                require return_data.size >= _12494 + (32 * _12656) + 32
                                                                t = _12332 + _12494 + 32
                                                                u = _12332 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12656:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12656 < 1:
                                                                    revert with 0, 17
                                                                if _12656 - 1 >= _12656:
                                                                    revert with 0, 50
                                                                _14985 = mem[(32 * _12656 - 1) + _12332 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _12656 - 1) + _12332 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12656 - 1) + _12332 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _14985 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15201 = mem[_3483]
                                                                mem[mem[64] + 164] = mem[_3483]
                                                                s = 0
                                                                t = _3483 + 32
                                                                u = mem[64] + 196
                                                                while s < _15201:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14985 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15201) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15957 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16011 = mem[_15957]
                                                                require mem[_15957] <= test266151307()
                                                                require _15957 + return_data.size > _15957 + mem[_15957] + 31
                                                                _16065 = mem[_15957 + mem[_15957]]
                                                                if mem[_15957 + mem[_15957]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15957 + mem[_15957]]) + 32 < 0 or _15957 + ceil32(return_data.size) + (32 * mem[_15957 + mem[_15957]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15957 + ceil32(return_data.size) + (32 * mem[_15957 + mem[_15957]]) + 32
                                                                mem[_15957 + ceil32(return_data.size)] = _16065
                                                                require return_data.size >= _16011 + (32 * _16065) + 32
                                                                t = _15957 + _16011 + 32
                                                                u = _15957 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16065:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16605 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16605] < _3429:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16605] - _3429):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16605] - _3429):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16605] - _3429
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3374 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3428 = mem[_3374]
                                                            _3482 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3482] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3482 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6528 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6636 = mem[_6528]
                                                                require mem[_6528] <= test266151307()
                                                                require _6528 + return_data.size > _6528 + mem[_6528] + 31
                                                                _6744 = mem[_6528 + mem[_6528]]
                                                                if mem[_6528 + mem[_6528]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6528 + mem[_6528]]) + 32 < 0 or _6528 + ceil32(return_data.size) + (32 * mem[_6528 + mem[_6528]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6528 + ceil32(return_data.size) + (32 * mem[_6528 + mem[_6528]]) + 32
                                                                mem[_6528 + ceil32(return_data.size)] = _6744
                                                                require return_data.size >= _6636 + (32 * _6744) + 32
                                                                t = _6528 + _6636 + 32
                                                                u = _6528 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6744:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6744 < 1:
                                                                    revert with 0, 17
                                                                if _6744 - 1 >= _6744:
                                                                    revert with 0, 50
                                                                _9358 = mem[(32 * _6744 - 1) + _6528 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6744 - 1) + _6528 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6744 - 1) + _6528 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9358 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9876 = mem[_3482]
                                                                mem[mem[64] + 164] = mem[_3482]
                                                                s = 0
                                                                t = _3482 + 32
                                                                u = mem[64] + 196
                                                                while s < _9876:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9358 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9876) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12328 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12490 = mem[_12328]
                                                                require mem[_12328] <= test266151307()
                                                                require _12328 + return_data.size > _12328 + mem[_12328] + 31
                                                                _12652 = mem[_12328 + mem[_12328]]
                                                                if mem[_12328 + mem[_12328]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12328 + mem[_12328]]) + 32 < 0 or _12328 + ceil32(return_data.size) + (32 * mem[_12328 + mem[_12328]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12328 + ceil32(return_data.size) + (32 * mem[_12328 + mem[_12328]]) + 32
                                                                mem[_12328 + ceil32(return_data.size)] = _12652
                                                                require return_data.size >= _12490 + (32 * _12652) + 32
                                                                t = _12328 + _12490 + 32
                                                                u = _12328 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12652:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14866 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14866] < _3428:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14866] - _3428):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14866] - _3428):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14866] - _3428
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3482 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3482 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6529 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6637 = mem[_6529]
                                                                    require mem[_6529] <= test266151307()
                                                                    require _6529 + return_data.size > _6529 + mem[_6529] + 31
                                                                    _6745 = mem[_6529 + mem[_6529]]
                                                                    if mem[_6529 + mem[_6529]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6529 + mem[_6529]]) + 32 < 0 or _6529 + ceil32(return_data.size) + (32 * mem[_6529 + mem[_6529]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6529 + ceil32(return_data.size) + (32 * mem[_6529 + mem[_6529]]) + 32
                                                                    mem[_6529 + ceil32(return_data.size)] = _6745
                                                                    require return_data.size >= _6637 + (32 * _6745) + 32
                                                                    t = _6529 + _6637 + 32
                                                                    u = _6529 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6745:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6745 < 1:
                                                                        revert with 0, 17
                                                                    if _6745 - 1 >= _6745:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6745 - 1) + _6529 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6745 - 1) + _6529 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6745 - 1) + _6529 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9877 = mem[_3482]
                                                                    mem[mem[64] + 164] = mem[_3482]
                                                                    s = 0
                                                                    t = _3482 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9877:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9877) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12330 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12492 = mem[_12330]
                                                                    require mem[_12330] <= test266151307()
                                                                    require _12330 + return_data.size > _12330 + mem[_12330] + 31
                                                                    _12654 = mem[_12330 + mem[_12330]]
                                                                    if mem[_12330 + mem[_12330]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12330 + mem[_12330]]) + 32 < 0 or _12330 + ceil32(return_data.size) + (32 * mem[_12330 + mem[_12330]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12330 + ceil32(return_data.size) + (32 * mem[_12330 + mem[_12330]]) + 32
                                                                    mem[_12330 + ceil32(return_data.size)] = _12654
                                                                    require return_data.size >= _12492 + (32 * _12654) + 32
                                                                    t = _12330 + _12492 + 32
                                                                    u = _12330 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12654:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14868 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14868] < _3428:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14868] - _3428):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14868] - _3428):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14868] - _3428
                                                                else:
                                                                    mem[_3482 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3482 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3482 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3482 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12329 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12491 = mem[_12329]
                                                                    require mem[_12329] <= test266151307()
                                                                    require _12329 + return_data.size > _12329 + mem[_12329] + 31
                                                                    _12653 = mem[_12329 + mem[_12329]]
                                                                    if mem[_12329 + mem[_12329]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12329 + mem[_12329]]) + 32 < 0 or _12329 + ceil32(return_data.size) + (32 * mem[_12329 + mem[_12329]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12329 + ceil32(return_data.size) + (32 * mem[_12329 + mem[_12329]]) + 32
                                                                    mem[_12329 + ceil32(return_data.size)] = _12653
                                                                    require return_data.size >= _12491 + (32 * _12653) + 32
                                                                    t = _12329 + _12491 + 32
                                                                    u = _12329 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12653:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12653 < 1:
                                                                        revert with 0, 17
                                                                    if _12653 - 1 >= _12653:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12653 - 1) + _12329 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12653 - 1) + _12329 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12653 - 1) + _12329 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15200 = mem[_3482]
                                                                    mem[mem[64] + 164] = mem[_3482]
                                                                    s = 0
                                                                    t = _3482 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15200:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15200) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15956 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _16010 = mem[_15956]
                                                                    require mem[_15956] <= test266151307()
                                                                    require _15956 + return_data.size > _15956 + mem[_15956] + 31
                                                                    _16064 = mem[_15956 + mem[_15956]]
                                                                    if mem[_15956 + mem[_15956]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15956 + mem[_15956]]) + 32 < 0 or _15956 + ceil32(return_data.size) + (32 * mem[_15956 + mem[_15956]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15956 + ceil32(return_data.size) + (32 * mem[_15956 + mem[_15956]]) + 32
                                                                    mem[_15956 + ceil32(return_data.size)] = _16064
                                                                    require return_data.size >= _16010 + (32 * _16064) + 32
                                                                    t = _15956 + _16010 + 32
                                                                    u = _15956 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16064:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16604 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16604] < _3428:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16604] - _3428):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16604] - _3428):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16604] - _3428
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if block.number <= bonusEndBlock:
                                        if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3373 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3427 = mem[_3373]
                                                                _3481 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3481] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3481 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6526 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6634 = mem[_6526]
                                                                    require mem[_6526] <= test266151307()
                                                                    require _6526 + return_data.size > _6526 + mem[_6526] + 31
                                                                    _6742 = mem[_6526 + mem[_6526]]
                                                                    if mem[_6526 + mem[_6526]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6526 + mem[_6526]]) + 32 < 0 or _6526 + ceil32(return_data.size) + (32 * mem[_6526 + mem[_6526]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6526 + ceil32(return_data.size) + (32 * mem[_6526 + mem[_6526]]) + 32
                                                                    mem[_6526 + ceil32(return_data.size)] = _6742
                                                                    require return_data.size >= _6634 + (32 * _6742) + 32
                                                                    t = _6526 + _6634 + 32
                                                                    u = _6526 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6742:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6742 < 1:
                                                                        revert with 0, 17
                                                                    if _6742 - 1 >= _6742:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6742 - 1) + _6526 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6742 - 1) + _6526 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6742 - 1) + _6526 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9874 = mem[_3481]
                                                                    mem[mem[64] + 164] = mem[_3481]
                                                                    s = 0
                                                                    t = _3481 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9874:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9874) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12325 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12487 = mem[_12325]
                                                                    require mem[_12325] <= test266151307()
                                                                    require _12325 + return_data.size > _12325 + mem[_12325] + 31
                                                                    _12649 = mem[_12325 + mem[_12325]]
                                                                    if mem[_12325 + mem[_12325]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12325 + mem[_12325]]) + 32 < 0 or _12325 + ceil32(return_data.size) + (32 * mem[_12325 + mem[_12325]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12325 + ceil32(return_data.size) + (32 * mem[_12325 + mem[_12325]]) + 32
                                                                    mem[_12325 + ceil32(return_data.size)] = _12649
                                                                    require return_data.size >= _12487 + (32 * _12649) + 32
                                                                    t = _12325 + _12487 + 32
                                                                    u = _12325 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12649:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14863 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14863] < _3427:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14863] - _3427):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14863] - _3427):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14863] - _3427
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3481 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3481 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6527 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6635 = mem[_6527]
                                                                        require mem[_6527] <= test266151307()
                                                                        require _6527 + return_data.size > _6527 + mem[_6527] + 31
                                                                        _6743 = mem[_6527 + mem[_6527]]
                                                                        if mem[_6527 + mem[_6527]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6527 + mem[_6527]]) + 32 < 0 or _6527 + ceil32(return_data.size) + (32 * mem[_6527 + mem[_6527]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6527 + ceil32(return_data.size) + (32 * mem[_6527 + mem[_6527]]) + 32
                                                                        mem[_6527 + ceil32(return_data.size)] = _6743
                                                                        require return_data.size >= _6635 + (32 * _6743) + 32
                                                                        t = _6527 + _6635 + 32
                                                                        u = _6527 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6743:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6743 < 1:
                                                                            revert with 0, 17
                                                                        if _6743 - 1 >= _6743:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6743 - 1) + _6527 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6743 - 1) + _6527 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6743 - 1) + _6527 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9875 = mem[_3481]
                                                                        mem[mem[64] + 164] = mem[_3481]
                                                                        s = 0
                                                                        t = _3481 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9875:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9875) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12327 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12489 = mem[_12327]
                                                                        require mem[_12327] <= test266151307()
                                                                        require _12327 + return_data.size > _12327 + mem[_12327] + 31
                                                                        _12651 = mem[_12327 + mem[_12327]]
                                                                        if mem[_12327 + mem[_12327]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12327 + mem[_12327]]) + 32 < 0 or _12327 + ceil32(return_data.size) + (32 * mem[_12327 + mem[_12327]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12327 + ceil32(return_data.size) + (32 * mem[_12327 + mem[_12327]]) + 32
                                                                        mem[_12327 + ceil32(return_data.size)] = _12651
                                                                        require return_data.size >= _12489 + (32 * _12651) + 32
                                                                        t = _12327 + _12489 + 32
                                                                        u = _12327 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12651:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14865 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14865] < _3427:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14865] - _3427):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14865] - _3427):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14865] - _3427
                                                                    else:
                                                                        mem[_3481 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3481 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3481 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3481 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12326 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12488 = mem[_12326]
                                                                        require mem[_12326] <= test266151307()
                                                                        require _12326 + return_data.size > _12326 + mem[_12326] + 31
                                                                        _12650 = mem[_12326 + mem[_12326]]
                                                                        if mem[_12326 + mem[_12326]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12326 + mem[_12326]]) + 32 < 0 or _12326 + ceil32(return_data.size) + (32 * mem[_12326 + mem[_12326]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12326 + ceil32(return_data.size) + (32 * mem[_12326 + mem[_12326]]) + 32
                                                                        mem[_12326 + ceil32(return_data.size)] = _12650
                                                                        require return_data.size >= _12488 + (32 * _12650) + 32
                                                                        t = _12326 + _12488 + 32
                                                                        u = _12326 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12650:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12650 < 1:
                                                                            revert with 0, 17
                                                                        if _12650 - 1 >= _12650:
                                                                            revert with 0, 50
                                                                        _14983 = mem[(32 * _12650 - 1) + _12326 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _12650 - 1) + _12326 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12650 - 1) + _12326 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _14983 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15199 = mem[_3481]
                                                                        mem[mem[64] + 164] = mem[_3481]
                                                                        s = 0
                                                                        t = _3481 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15199:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14983 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15199) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15955 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16009 = mem[_15955]
                                                                        require mem[_15955] <= test266151307()
                                                                        require _15955 + return_data.size > _15955 + mem[_15955] + 31
                                                                        _16063 = mem[_15955 + mem[_15955]]
                                                                        if mem[_15955 + mem[_15955]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15955 + mem[_15955]]) + 32 < 0 or _15955 + ceil32(return_data.size) + (32 * mem[_15955 + mem[_15955]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15955 + ceil32(return_data.size) + (32 * mem[_15955 + mem[_15955]]) + 32
                                                                        mem[_15955 + ceil32(return_data.size)] = _16063
                                                                        require return_data.size >= _16009 + (32 * _16063) + 32
                                                                        t = _15955 + _16009 + 32
                                                                        u = _15955 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16063:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16603 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16603] < _3427:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16603] - _3427):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16603] - _3427):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16603] - _3427
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                            if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                                revert with 0, 17
                                            if False and PRECISION_FACTOR > 0:
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3372 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3426 = mem[_3372]
                                                                    _3480 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3480] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3480 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6524 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6632 = mem[_6524]
                                                                        require mem[_6524] <= test266151307()
                                                                        require _6524 + return_data.size > _6524 + mem[_6524] + 31
                                                                        _6740 = mem[_6524 + mem[_6524]]
                                                                        if mem[_6524 + mem[_6524]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6524 + mem[_6524]]) + 32 < 0 or _6524 + ceil32(return_data.size) + (32 * mem[_6524 + mem[_6524]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6524 + ceil32(return_data.size) + (32 * mem[_6524 + mem[_6524]]) + 32
                                                                        mem[_6524 + ceil32(return_data.size)] = _6740
                                                                        require return_data.size >= _6632 + (32 * _6740) + 32
                                                                        t = _6524 + _6632 + 32
                                                                        u = _6524 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6740:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6740 < 1:
                                                                            revert with 0, 17
                                                                        if _6740 - 1 >= _6740:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6740 - 1) + _6524 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6740 - 1) + _6524 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6740 - 1) + _6524 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9872 = mem[_3480]
                                                                        mem[mem[64] + 164] = mem[_3480]
                                                                        s = 0
                                                                        t = _3480 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9872:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9872) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12322 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12484 = mem[_12322]
                                                                        require mem[_12322] <= test266151307()
                                                                        require _12322 + return_data.size > _12322 + mem[_12322] + 31
                                                                        _12646 = mem[_12322 + mem[_12322]]
                                                                        if mem[_12322 + mem[_12322]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12322 + mem[_12322]]) + 32 < 0 or _12322 + ceil32(return_data.size) + (32 * mem[_12322 + mem[_12322]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12322 + ceil32(return_data.size) + (32 * mem[_12322 + mem[_12322]]) + 32
                                                                        mem[_12322 + ceil32(return_data.size)] = _12646
                                                                        require return_data.size >= _12484 + (32 * _12646) + 32
                                                                        t = _12322 + _12484 + 32
                                                                        u = _12322 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12646:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14860 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14860] < _3426:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14860] - _3426):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14860] - _3426):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14860] - _3426
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3480 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3480 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6525 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6633 = mem[_6525]
                                                                            require mem[_6525] <= test266151307()
                                                                            require _6525 + return_data.size > _6525 + mem[_6525] + 31
                                                                            _6741 = mem[_6525 + mem[_6525]]
                                                                            if mem[_6525 + mem[_6525]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6525 + mem[_6525]]) + 32 < 0 or _6525 + ceil32(return_data.size) + (32 * mem[_6525 + mem[_6525]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6525 + ceil32(return_data.size) + (32 * mem[_6525 + mem[_6525]]) + 32
                                                                            mem[_6525 + ceil32(return_data.size)] = _6741
                                                                            require return_data.size >= _6633 + (32 * _6741) + 32
                                                                            t = _6525 + _6633 + 32
                                                                            u = _6525 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6741:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6741 < 1:
                                                                                revert with 0, 17
                                                                            if _6741 - 1 >= _6741:
                                                                                revert with 0, 50
                                                                            _9354 = mem[(32 * _6741 - 1) + _6525 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _6741 - 1) + _6525 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6741 - 1) + _6525 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _9354 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9873 = mem[_3480]
                                                                            mem[mem[64] + 164] = mem[_3480]
                                                                            s = 0
                                                                            t = _3480 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9873:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9354 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9873) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12324 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12486 = mem[_12324]
                                                                            require mem[_12324] <= test266151307()
                                                                            require _12324 + return_data.size > _12324 + mem[_12324] + 31
                                                                            _12648 = mem[_12324 + mem[_12324]]
                                                                            if mem[_12324 + mem[_12324]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12324 + mem[_12324]]) + 32 < 0 or _12324 + ceil32(return_data.size) + (32 * mem[_12324 + mem[_12324]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12324 + ceil32(return_data.size) + (32 * mem[_12324 + mem[_12324]]) + 32
                                                                            mem[_12324 + ceil32(return_data.size)] = _12648
                                                                            require return_data.size >= _12486 + (32 * _12648) + 32
                                                                            t = _12324 + _12486 + 32
                                                                            u = _12324 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12648:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14862 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14862] < _3426:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14862] - _3426):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14862] - _3426):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14862] - _3426
                                                                        else:
                                                                            mem[_3480 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3480 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3480 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3480 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12323 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12485 = mem[_12323]
                                                                            require mem[_12323] <= test266151307()
                                                                            require _12323 + return_data.size > _12323 + mem[_12323] + 31
                                                                            _12647 = mem[_12323 + mem[_12323]]
                                                                            if mem[_12323 + mem[_12323]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12323 + mem[_12323]]) + 32 < 0 or _12323 + ceil32(return_data.size) + (32 * mem[_12323 + mem[_12323]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12323 + ceil32(return_data.size) + (32 * mem[_12323 + mem[_12323]]) + 32
                                                                            mem[_12323 + ceil32(return_data.size)] = _12647
                                                                            require return_data.size >= _12485 + (32 * _12647) + 32
                                                                            t = _12323 + _12485 + 32
                                                                            u = _12323 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12647:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12647 < 1:
                                                                                revert with 0, 17
                                                                            if _12647 - 1 >= _12647:
                                                                                revert with 0, 50
                                                                            _14982 = mem[(32 * _12647 - 1) + _12323 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _12647 - 1) + _12323 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12647 - 1) + _12323 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _14982 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15198 = mem[_3480]
                                                                            mem[mem[64] + 164] = mem[_3480]
                                                                            s = 0
                                                                            t = _3480 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15198:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14982 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15198) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15954 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16008 = mem[_15954]
                                                                            require mem[_15954] <= test266151307()
                                                                            require _15954 + return_data.size > _15954 + mem[_15954] + 31
                                                                            _16062 = mem[_15954 + mem[_15954]]
                                                                            if mem[_15954 + mem[_15954]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15954 + mem[_15954]]) + 32 < 0 or _15954 + ceil32(return_data.size) + (32 * mem[_15954 + mem[_15954]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15954 + ceil32(return_data.size) + (32 * mem[_15954 + mem[_15954]]) + 32
                                                                            mem[_15954 + ceil32(return_data.size)] = _16062
                                                                            require return_data.size >= _16008 + (32 * _16062) + 32
                                                                            t = _15954 + _16008 + 32
                                                                            u = _15954 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16062:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16602 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16602] < _3426:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16602] - _3426):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16602] - _3426):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16602] - _3426
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                        else:
                                            if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3371 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3425 = mem[_3371]
                                                                    _3479 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3479] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3479 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6522 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6630 = mem[_6522]
                                                                        require mem[_6522] <= test266151307()
                                                                        require _6522 + return_data.size > _6522 + mem[_6522] + 31
                                                                        _6738 = mem[_6522 + mem[_6522]]
                                                                        if mem[_6522 + mem[_6522]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6522 + mem[_6522]]) + 32 < 0 or _6522 + ceil32(return_data.size) + (32 * mem[_6522 + mem[_6522]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6522 + ceil32(return_data.size) + (32 * mem[_6522 + mem[_6522]]) + 32
                                                                        mem[_6522 + ceil32(return_data.size)] = _6738
                                                                        require return_data.size >= _6630 + (32 * _6738) + 32
                                                                        t = _6522 + _6630 + 32
                                                                        u = _6522 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6738:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6738 < 1:
                                                                            revert with 0, 17
                                                                        if _6738 - 1 >= _6738:
                                                                            revert with 0, 50
                                                                        _9349 = mem[(32 * _6738 - 1) + _6522 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6738 - 1) + _6522 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6738 - 1) + _6522 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9349 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9870 = mem[_3479]
                                                                        mem[mem[64] + 164] = mem[_3479]
                                                                        s = 0
                                                                        t = _3479 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9870:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9349 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9870) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12319 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12481 = mem[_12319]
                                                                        require mem[_12319] <= test266151307()
                                                                        require _12319 + return_data.size > _12319 + mem[_12319] + 31
                                                                        _12643 = mem[_12319 + mem[_12319]]
                                                                        if mem[_12319 + mem[_12319]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12319 + mem[_12319]]) + 32 < 0 or _12319 + ceil32(return_data.size) + (32 * mem[_12319 + mem[_12319]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12319 + ceil32(return_data.size) + (32 * mem[_12319 + mem[_12319]]) + 32
                                                                        mem[_12319 + ceil32(return_data.size)] = _12643
                                                                        require return_data.size >= _12481 + (32 * _12643) + 32
                                                                        t = _12319 + _12481 + 32
                                                                        u = _12319 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12643:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14857 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14857] < _3425:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14857] - _3425):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14857] - _3425):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14857] - _3425
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3479 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3479 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6523 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6631 = mem[_6523]
                                                                            require mem[_6523] <= test266151307()
                                                                            require _6523 + return_data.size > _6523 + mem[_6523] + 31
                                                                            _6739 = mem[_6523 + mem[_6523]]
                                                                            if mem[_6523 + mem[_6523]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6523 + mem[_6523]]) + 32 < 0 or _6523 + ceil32(return_data.size) + (32 * mem[_6523 + mem[_6523]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6523 + ceil32(return_data.size) + (32 * mem[_6523 + mem[_6523]]) + 32
                                                                            mem[_6523 + ceil32(return_data.size)] = _6739
                                                                            require return_data.size >= _6631 + (32 * _6739) + 32
                                                                            t = _6523 + _6631 + 32
                                                                            u = _6523 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6739:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6739 < 1:
                                                                                revert with 0, 17
                                                                            if _6739 - 1 >= _6739:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6739 - 1) + _6523 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6739 - 1) + _6523 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6739 - 1) + _6523 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9871 = mem[_3479]
                                                                            mem[mem[64] + 164] = mem[_3479]
                                                                            s = 0
                                                                            t = _3479 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9871:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9871) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12321 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12483 = mem[_12321]
                                                                            require mem[_12321] <= test266151307()
                                                                            require _12321 + return_data.size > _12321 + mem[_12321] + 31
                                                                            _12645 = mem[_12321 + mem[_12321]]
                                                                            if mem[_12321 + mem[_12321]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12321 + mem[_12321]]) + 32 < 0 or _12321 + ceil32(return_data.size) + (32 * mem[_12321 + mem[_12321]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12321 + ceil32(return_data.size) + (32 * mem[_12321 + mem[_12321]]) + 32
                                                                            mem[_12321 + ceil32(return_data.size)] = _12645
                                                                            require return_data.size >= _12483 + (32 * _12645) + 32
                                                                            t = _12321 + _12483 + 32
                                                                            u = _12321 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12645:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14859 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14859] < _3425:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14859] - _3425):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14859] - _3425):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14859] - _3425
                                                                        else:
                                                                            mem[_3479 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3479 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3479 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3479 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12320 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12482 = mem[_12320]
                                                                            require mem[_12320] <= test266151307()
                                                                            require _12320 + return_data.size > _12320 + mem[_12320] + 31
                                                                            _12644 = mem[_12320 + mem[_12320]]
                                                                            if mem[_12320 + mem[_12320]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12320 + mem[_12320]]) + 32 < 0 or _12320 + ceil32(return_data.size) + (32 * mem[_12320 + mem[_12320]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12320 + ceil32(return_data.size) + (32 * mem[_12320 + mem[_12320]]) + 32
                                                                            mem[_12320 + ceil32(return_data.size)] = _12644
                                                                            require return_data.size >= _12482 + (32 * _12644) + 32
                                                                            t = _12320 + _12482 + 32
                                                                            u = _12320 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12644:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12644 < 1:
                                                                                revert with 0, 17
                                                                            if _12644 - 1 >= _12644:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _12644 - 1) + _12320 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12644 - 1) + _12320 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _12644 - 1) + _12320 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15197 = mem[_3479]
                                                                            mem[mem[64] + 164] = mem[_3479]
                                                                            s = 0
                                                                            t = _3479 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15197:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15197) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15953 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16007 = mem[_15953]
                                                                            require mem[_15953] <= test266151307()
                                                                            require _15953 + return_data.size > _15953 + mem[_15953] + 31
                                                                            _16061 = mem[_15953 + mem[_15953]]
                                                                            if mem[_15953 + mem[_15953]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15953 + mem[_15953]]) + 32 < 0 or _15953 + ceil32(return_data.size) + (32 * mem[_15953 + mem[_15953]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15953 + ceil32(return_data.size) + (32 * mem[_15953 + mem[_15953]]) + 32
                                                                            mem[_15953 + ceil32(return_data.size)] = _16061
                                                                            require return_data.size >= _16007 + (32 * _16061) + 32
                                                                            t = _15953 + _16007 + 32
                                                                            u = _15953 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16061:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16601 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16601] < _3425:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16601] - _3425):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16601] - _3425):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16601] - _3425
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
            else:
                if ext_call.return_data[0] < stor22:
                    if 0 < stor23:
                        revert with 0, 17
                    if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 18
                    if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                        revert with 0, 17
                    sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                    stor23 = 0
                    if arg2 >= sub_8e6f4fb7.length:
                        revert with 0, 50
                    if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                        mem[32] = 26
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        mem[0] = 25
                        idx = 0
                        while idx < userStakes[msg.sender].field_0:
                            mem[0] = sha3(msg.sender, 26)
                            if userStakes[msg.sender][idx].field_0 == arg2:
                                if userStakes[msg.sender][idx].field_256:
                                    if not arg1:
                                        if arg1 < arg1:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 < 0:
                                            revert with 0, 17
                                        if userStaked[msg.sender].field_0 > -1:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                            revert with 0, 17
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                            revert with 0, 17
                                        if totalStaked < 0:
                                            revert with 0, 17
                                        if totalStaked > -1:
                                            revert with 0, 17
                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                        stor1.length = 1
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                        revert with 0, 17
                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                        revert with 0, 17
                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = 0
                                        else:
                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 -= arg1
                                    else:
                                        if sub_6e707b73Address == stakingTokenAddress:
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                        else:
                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingTokenAddress)
                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _3394 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _3448 = mem[_3394]
                                                _3502 = mem[64]
                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                mem[_3502] = sub_c1e22a65.length
                                                if not sub_c1e22a65.length:
                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = 64
                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                    s = 0
                                                    t = _3502 + 32
                                                    u = mem[64] + 100
                                                    while s < sub_c1e22a65.length:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    require ext_code.size(uniRouterAddress)
                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6568 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _6676 = mem[_6568]
                                                    require mem[_6568] <= test266151307()
                                                    require _6568 + return_data.size > _6568 + mem[_6568] + 31
                                                    _6784 = mem[_6568 + mem[_6568]]
                                                    if mem[_6568 + mem[_6568]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_6568 + mem[_6568]]) + 32 < 0 or _6568 + ceil32(return_data.size) + (32 * mem[_6568 + mem[_6568]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _6568 + ceil32(return_data.size) + (32 * mem[_6568 + mem[_6568]]) + 32
                                                    mem[_6568 + ceil32(return_data.size)] = _6784
                                                    require return_data.size >= _6676 + (32 * _6784) + 32
                                                    t = _6568 + _6676 + 32
                                                    u = _6568 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _6784:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    if _6784 < 1:
                                                        revert with 0, 17
                                                    if _6784 - 1 >= _6784:
                                                        revert with 0, 50
                                                    if mem[(32 * _6784 - 1) + _6568 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6784 - 1) + _6568 + ceil32(return_data.size) + 32]:
                                                        revert with 0, 17
                                                    if block.timestamp > -601:
                                                        revert with 0, 17
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    mem[mem[64] + 36] = mem[(32 * _6784 - 1) + _6568 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                    mem[mem[64] + 68] = 160
                                                    _9916 = mem[_3502]
                                                    mem[mem[64] + 164] = mem[_3502]
                                                    s = 0
                                                    t = _3502 + 32
                                                    u = mem[64] + 196
                                                    while s < _9916:
                                                        mem[u] = mem[t + 12 len 20]
                                                        s = s + 1
                                                        t = t + 32
                                                        u = u + 32
                                                        continue 
                                                    mem[mem[64] + 100] = this.address
                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                    require ext_code.size(uniRouterAddress)
                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9916) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12388 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _12550 = mem[_12388]
                                                    require mem[_12388] <= test266151307()
                                                    require _12388 + return_data.size > _12388 + mem[_12388] + 31
                                                    _12712 = mem[_12388 + mem[_12388]]
                                                    if mem[_12388 + mem[_12388]] > test266151307():
                                                        revert with 0, 65
                                                    if (32 * mem[_12388 + mem[_12388]]) + 32 < 0 or _12388 + ceil32(return_data.size) + (32 * mem[_12388 + mem[_12388]]) + 32 > test266151307():
                                                        revert with 0, 65
                                                    mem[64] = _12388 + ceil32(return_data.size) + (32 * mem[_12388 + mem[_12388]]) + 32
                                                    mem[_12388 + ceil32(return_data.size)] = _12712
                                                    require return_data.size >= _12550 + (32 * _12712) + 32
                                                    t = _12388 + _12550 + 32
                                                    u = _12388 + ceil32(return_data.size) + 32
                                                    s = 0
                                                    while s < _12712:
                                                        mem[u] = mem[t]
                                                        t = t + 32
                                                        u = u + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14926 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_14926] < _3448:
                                                        revert with 0, 17
                                                    if 0 > !(mem[_14926] - _3448):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14926] - _3448):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14926] - _3448
                                                else:
                                                    mem[0] = 11
                                                    mem[_3502 + 32] = address(sub_c1e22a65.field_0)
                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3502 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6569 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6677 = mem[_6569]
                                                        require mem[_6569] <= test266151307()
                                                        require _6569 + return_data.size > _6569 + mem[_6569] + 31
                                                        _6785 = mem[_6569 + mem[_6569]]
                                                        if mem[_6569 + mem[_6569]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6569 + mem[_6569]]) + 32 < 0 or _6569 + ceil32(return_data.size) + (32 * mem[_6569 + mem[_6569]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6569 + ceil32(return_data.size) + (32 * mem[_6569 + mem[_6569]]) + 32
                                                        mem[_6569 + ceil32(return_data.size)] = _6785
                                                        require return_data.size >= _6677 + (32 * _6785) + 32
                                                        t = _6569 + _6677 + 32
                                                        u = _6569 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6785:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6785 < 1:
                                                            revert with 0, 17
                                                        if _6785 - 1 >= _6785:
                                                            revert with 0, 50
                                                        if mem[(32 * _6785 - 1) + _6569 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6785 - 1) + _6569 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6785 - 1) + _6569 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9917 = mem[_3502]
                                                        mem[mem[64] + 164] = mem[_3502]
                                                        s = 0
                                                        t = _3502 + 32
                                                        u = mem[64] + 196
                                                        while s < _9917:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9917) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12390 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12552 = mem[_12390]
                                                        require mem[_12390] <= test266151307()
                                                        require _12390 + return_data.size > _12390 + mem[_12390] + 31
                                                        _12714 = mem[_12390 + mem[_12390]]
                                                        if mem[_12390 + mem[_12390]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12390 + mem[_12390]]) + 32 < 0 or _12390 + ceil32(return_data.size) + (32 * mem[_12390 + mem[_12390]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12390 + ceil32(return_data.size) + (32 * mem[_12390 + mem[_12390]]) + 32
                                                        mem[_12390 + ceil32(return_data.size)] = _12714
                                                        require return_data.size >= _12552 + (32 * _12714) + 32
                                                        t = _12390 + _12552 + 32
                                                        u = _12390 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12714:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14928 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14928] < _3448:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14928] - _3448):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14928] - _3448):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14928] - _3448
                                                    else:
                                                        mem[_3502 + 64] = address(sub_c1e22a65.field_256)
                                                        s = _3502 + 64
                                                        t = sha3(11) + 1
                                                        while _3502 + (32 * sub_c1e22a65.length) > s:
                                                            mem[s + 32] = stor1[t]
                                                            s = s + 32
                                                            t = t + 1
                                                            continue 
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3502 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12389 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12551 = mem[_12389]
                                                        require mem[_12389] <= test266151307()
                                                        require _12389 + return_data.size > _12389 + mem[_12389] + 31
                                                        _12713 = mem[_12389 + mem[_12389]]
                                                        if mem[_12389 + mem[_12389]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12389 + mem[_12389]]) + 32 < 0 or _12389 + ceil32(return_data.size) + (32 * mem[_12389 + mem[_12389]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12389 + ceil32(return_data.size) + (32 * mem[_12389 + mem[_12389]]) + 32
                                                        mem[_12389 + ceil32(return_data.size)] = _12713
                                                        require return_data.size >= _12551 + (32 * _12713) + 32
                                                        t = _12389 + _12551 + 32
                                                        u = _12389 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12713:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _12713 < 1:
                                                            revert with 0, 17
                                                        if _12713 - 1 >= _12713:
                                                            revert with 0, 50
                                                        if mem[(32 * _12713 - 1) + _12389 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12713 - 1) + _12389 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _12713 - 1) + _12389 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _15220 = mem[_3502]
                                                        mem[mem[64] + 164] = mem[_3502]
                                                        s = 0
                                                        t = _3502 + 32
                                                        u = mem[64] + 196
                                                        while s < _15220:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15220) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _15976 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _16030 = mem[_15976]
                                                        require mem[_15976] <= test266151307()
                                                        require _15976 + return_data.size > _15976 + mem[_15976] + 31
                                                        _16084 = mem[_15976 + mem[_15976]]
                                                        if mem[_15976 + mem[_15976]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_15976 + mem[_15976]]) + 32 < 0 or _15976 + ceil32(return_data.size) + (32 * mem[_15976 + mem[_15976]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _15976 + ceil32(return_data.size) + (32 * mem[_15976 + mem[_15976]]) + 32
                                                        mem[_15976 + ceil32(return_data.size)] = _16084
                                                        require return_data.size >= _16030 + (32 * _16084) + 32
                                                        t = _15976 + _16030 + 32
                                                        u = _15976 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _16084:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _16624 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_16624] < _3448:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_16624] - _3448):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16624] - _3448):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16624] - _3448
                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not PRECISION_FACTOR:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                        revert with 0, 17
                                    if not sub_88bbb0c1:
                                        revert with 0, 18
                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3399 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3453 = mem[_3399]
                                                    _3507 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3507] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3507 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6578 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6686 = mem[_6578]
                                                        require mem[_6578] <= test266151307()
                                                        require _6578 + return_data.size > _6578 + mem[_6578] + 31
                                                        _6794 = mem[_6578 + mem[_6578]]
                                                        if mem[_6578 + mem[_6578]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6578 + mem[_6578]]) + 32 < 0 or _6578 + ceil32(return_data.size) + (32 * mem[_6578 + mem[_6578]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6578 + ceil32(return_data.size) + (32 * mem[_6578 + mem[_6578]]) + 32
                                                        mem[_6578 + ceil32(return_data.size)] = _6794
                                                        require return_data.size >= _6686 + (32 * _6794) + 32
                                                        t = _6578 + _6686 + 32
                                                        u = _6578 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6794:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6794 < 1:
                                                            revert with 0, 17
                                                        if _6794 - 1 >= _6794:
                                                            revert with 0, 50
                                                        if mem[(32 * _6794 - 1) + _6578 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6794 - 1) + _6578 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = mem[(32 * _6794 - 1) + _6578 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9926 = mem[_3507]
                                                        mem[mem[64] + 164] = mem[_3507]
                                                        s = 0
                                                        t = _3507 + 32
                                                        u = mem[64] + 196
                                                        while s < _9926:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9926) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12403 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12565 = mem[_12403]
                                                        require mem[_12403] <= test266151307()
                                                        require _12403 + return_data.size > _12403 + mem[_12403] + 31
                                                        _12727 = mem[_12403 + mem[_12403]]
                                                        if mem[_12403 + mem[_12403]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12403 + mem[_12403]]) + 32 < 0 or _12403 + ceil32(return_data.size) + (32 * mem[_12403 + mem[_12403]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12403 + ceil32(return_data.size) + (32 * mem[_12403 + mem[_12403]]) + 32
                                                        mem[_12403 + ceil32(return_data.size)] = _12727
                                                        require return_data.size >= _12565 + (32 * _12727) + 32
                                                        t = _12403 + _12565 + 32
                                                        u = _12403 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12727:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14941 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14941] < _3453:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14941] - _3453):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14941] - _3453):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14941] - _3453
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3507 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3507 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6579 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6687 = mem[_6579]
                                                            require mem[_6579] <= test266151307()
                                                            require _6579 + return_data.size > _6579 + mem[_6579] + 31
                                                            _6795 = mem[_6579 + mem[_6579]]
                                                            if mem[_6579 + mem[_6579]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6579 + mem[_6579]]) + 32 < 0 or _6579 + ceil32(return_data.size) + (32 * mem[_6579 + mem[_6579]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6579 + ceil32(return_data.size) + (32 * mem[_6579 + mem[_6579]]) + 32
                                                            mem[_6579 + ceil32(return_data.size)] = _6795
                                                            require return_data.size >= _6687 + (32 * _6795) + 32
                                                            t = _6579 + _6687 + 32
                                                            u = _6579 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6795:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6795 < 1:
                                                                revert with 0, 17
                                                            if _6795 - 1 >= _6795:
                                                                revert with 0, 50
                                                            if mem[(32 * _6795 - 1) + _6579 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6795 - 1) + _6579 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6795 - 1) + _6579 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9927 = mem[_3507]
                                                            mem[mem[64] + 164] = mem[_3507]
                                                            s = 0
                                                            t = _3507 + 32
                                                            u = mem[64] + 196
                                                            while s < _9927:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9927) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12405 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12567 = mem[_12405]
                                                            require mem[_12405] <= test266151307()
                                                            require _12405 + return_data.size > _12405 + mem[_12405] + 31
                                                            _12729 = mem[_12405 + mem[_12405]]
                                                            if mem[_12405 + mem[_12405]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12405 + mem[_12405]]) + 32 < 0 or _12405 + ceil32(return_data.size) + (32 * mem[_12405 + mem[_12405]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12405 + ceil32(return_data.size) + (32 * mem[_12405 + mem[_12405]]) + 32
                                                            mem[_12405 + ceil32(return_data.size)] = _12729
                                                            require return_data.size >= _12567 + (32 * _12729) + 32
                                                            t = _12405 + _12567 + 32
                                                            u = _12405 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12729:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14943 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14943] < _3453:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14943] - _3453):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14943] - _3453):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14943] - _3453
                                                        else:
                                                            mem[_3507 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3507 + 64
                                                            t = sha3(11) + 1
                                                            while _3507 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3507 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12404 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12566 = mem[_12404]
                                                            require mem[_12404] <= test266151307()
                                                            require _12404 + return_data.size > _12404 + mem[_12404] + 31
                                                            _12728 = mem[_12404 + mem[_12404]]
                                                            if mem[_12404 + mem[_12404]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12404 + mem[_12404]]) + 32 < 0 or _12404 + ceil32(return_data.size) + (32 * mem[_12404 + mem[_12404]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12404 + ceil32(return_data.size) + (32 * mem[_12404 + mem[_12404]]) + 32
                                                            mem[_12404 + ceil32(return_data.size)] = _12728
                                                            require return_data.size >= _12566 + (32 * _12728) + 32
                                                            t = _12404 + _12566 + 32
                                                            u = _12404 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12728:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12728 < 1:
                                                                revert with 0, 17
                                                            if _12728 - 1 >= _12728:
                                                                revert with 0, 50
                                                            if mem[(32 * _12728 - 1) + _12404 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12728 - 1) + _12404 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _12728 - 1) + _12404 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15225 = mem[_3507]
                                                            mem[mem[64] + 164] = mem[_3507]
                                                            s = 0
                                                            t = _3507 + 32
                                                            u = mem[64] + 196
                                                            while s < _15225:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15225) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15981 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _16035 = mem[_15981]
                                                            require mem[_15981] <= test266151307()
                                                            require _15981 + return_data.size > _15981 + mem[_15981] + 31
                                                            _16089 = mem[_15981 + mem[_15981]]
                                                            if mem[_15981 + mem[_15981]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15981 + mem[_15981]]) + 32 < 0 or _15981 + ceil32(return_data.size) + (32 * mem[_15981 + mem[_15981]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15981 + ceil32(return_data.size) + (32 * mem[_15981 + mem[_15981]]) + 32
                                                            mem[_15981 + ceil32(return_data.size)] = _16089
                                                            require return_data.size >= _16035 + (32 * _16089) + 32
                                                            t = _15981 + _16035 + 32
                                                            u = _15981 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16089:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16629 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16629] < _3453:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16629] - _3453):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16629] - _3453):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16629] - _3453
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3398 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3452 = mem[_3398]
                                                        _3506 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3506] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3506 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6576 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6684 = mem[_6576]
                                                            require mem[_6576] <= test266151307()
                                                            require _6576 + return_data.size > _6576 + mem[_6576] + 31
                                                            _6792 = mem[_6576 + mem[_6576]]
                                                            if mem[_6576 + mem[_6576]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6576 + mem[_6576]]) + 32 < 0 or _6576 + ceil32(return_data.size) + (32 * mem[_6576 + mem[_6576]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6576 + ceil32(return_data.size) + (32 * mem[_6576 + mem[_6576]]) + 32
                                                            mem[_6576 + ceil32(return_data.size)] = _6792
                                                            require return_data.size >= _6684 + (32 * _6792) + 32
                                                            t = _6576 + _6684 + 32
                                                            u = _6576 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6792:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6792 < 1:
                                                                revert with 0, 17
                                                            if _6792 - 1 >= _6792:
                                                                revert with 0, 50
                                                            if mem[(32 * _6792 - 1) + _6576 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6792 - 1) + _6576 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6792 - 1) + _6576 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9924 = mem[_3506]
                                                            mem[mem[64] + 164] = mem[_3506]
                                                            s = 0
                                                            t = _3506 + 32
                                                            u = mem[64] + 196
                                                            while s < _9924:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9924) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12400 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12562 = mem[_12400]
                                                            require mem[_12400] <= test266151307()
                                                            require _12400 + return_data.size > _12400 + mem[_12400] + 31
                                                            _12724 = mem[_12400 + mem[_12400]]
                                                            if mem[_12400 + mem[_12400]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12400 + mem[_12400]]) + 32 < 0 or _12400 + ceil32(return_data.size) + (32 * mem[_12400 + mem[_12400]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12400 + ceil32(return_data.size) + (32 * mem[_12400 + mem[_12400]]) + 32
                                                            mem[_12400 + ceil32(return_data.size)] = _12724
                                                            require return_data.size >= _12562 + (32 * _12724) + 32
                                                            t = _12400 + _12562 + 32
                                                            u = _12400 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12724:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14938 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14938] < _3452:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14938] - _3452):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14938] - _3452):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14938] - _3452
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3506 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3506 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6577 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6685 = mem[_6577]
                                                                require mem[_6577] <= test266151307()
                                                                require _6577 + return_data.size > _6577 + mem[_6577] + 31
                                                                _6793 = mem[_6577 + mem[_6577]]
                                                                if mem[_6577 + mem[_6577]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6577 + mem[_6577]]) + 32 < 0 or _6577 + ceil32(return_data.size) + (32 * mem[_6577 + mem[_6577]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6577 + ceil32(return_data.size) + (32 * mem[_6577 + mem[_6577]]) + 32
                                                                mem[_6577 + ceil32(return_data.size)] = _6793
                                                                require return_data.size >= _6685 + (32 * _6793) + 32
                                                                t = _6577 + _6685 + 32
                                                                u = _6577 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6793:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6793 < 1:
                                                                    revert with 0, 17
                                                                if _6793 - 1 >= _6793:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6793 - 1) + _6577 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6793 - 1) + _6577 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6793 - 1) + _6577 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9925 = mem[_3506]
                                                                mem[mem[64] + 164] = mem[_3506]
                                                                s = 0
                                                                t = _3506 + 32
                                                                u = mem[64] + 196
                                                                while s < _9925:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9925) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12402 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12564 = mem[_12402]
                                                                require mem[_12402] <= test266151307()
                                                                require _12402 + return_data.size > _12402 + mem[_12402] + 31
                                                                _12726 = mem[_12402 + mem[_12402]]
                                                                if mem[_12402 + mem[_12402]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12402 + mem[_12402]]) + 32 < 0 or _12402 + ceil32(return_data.size) + (32 * mem[_12402 + mem[_12402]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12402 + ceil32(return_data.size) + (32 * mem[_12402 + mem[_12402]]) + 32
                                                                mem[_12402 + ceil32(return_data.size)] = _12726
                                                                require return_data.size >= _12564 + (32 * _12726) + 32
                                                                t = _12402 + _12564 + 32
                                                                u = _12402 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12726:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14940 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14940] < _3452:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14940] - _3452):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14940] - _3452):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14940] - _3452
                                                            else:
                                                                mem[_3506 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3506 + 64
                                                                t = sha3(11) + 1
                                                                while _3506 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3506 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12401 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12563 = mem[_12401]
                                                                require mem[_12401] <= test266151307()
                                                                require _12401 + return_data.size > _12401 + mem[_12401] + 31
                                                                _12725 = mem[_12401 + mem[_12401]]
                                                                if mem[_12401 + mem[_12401]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12401 + mem[_12401]]) + 32 < 0 or _12401 + ceil32(return_data.size) + (32 * mem[_12401 + mem[_12401]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12401 + ceil32(return_data.size) + (32 * mem[_12401 + mem[_12401]]) + 32
                                                                mem[_12401 + ceil32(return_data.size)] = _12725
                                                                require return_data.size >= _12563 + (32 * _12725) + 32
                                                                t = _12401 + _12563 + 32
                                                                u = _12401 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12725:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12725 < 1:
                                                                    revert with 0, 17
                                                                if _12725 - 1 >= _12725:
                                                                    revert with 0, 50
                                                                _15008 = mem[(32 * _12725 - 1) + _12401 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _12725 - 1) + _12401 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12725 - 1) + _12401 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _15008 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15224 = mem[_3506]
                                                                mem[mem[64] + 164] = mem[_3506]
                                                                s = 0
                                                                t = _3506 + 32
                                                                u = mem[64] + 196
                                                                while s < _15224:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _15008 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15224) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15980 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16034 = mem[_15980]
                                                                require mem[_15980] <= test266151307()
                                                                require _15980 + return_data.size > _15980 + mem[_15980] + 31
                                                                _16088 = mem[_15980 + mem[_15980]]
                                                                if mem[_15980 + mem[_15980]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15980 + mem[_15980]]) + 32 < 0 or _15980 + ceil32(return_data.size) + (32 * mem[_15980 + mem[_15980]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15980 + ceil32(return_data.size) + (32 * mem[_15980 + mem[_15980]]) + 32
                                                                mem[_15980 + ceil32(return_data.size)] = _16088
                                                                require return_data.size >= _16034 + (32 * _16088) + 32
                                                                t = _15980 + _16034 + 32
                                                                u = _15980 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16088:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16628 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16628] < _3452:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16628] - _3452):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16628] - _3452):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16628] - _3452
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if block.number <= bonusEndBlock:
                                    if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                        revert with 0, 17
                                    if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                        revert with 0, 17
                                    if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                        revert with 0, 17
                                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                        revert with 0, 18
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                        revert with 0, 17
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3397 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3451 = mem[_3397]
                                                            _3505 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3505] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3505 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6574 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6682 = mem[_6574]
                                                                require mem[_6574] <= test266151307()
                                                                require _6574 + return_data.size > _6574 + mem[_6574] + 31
                                                                _6790 = mem[_6574 + mem[_6574]]
                                                                if mem[_6574 + mem[_6574]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6574 + mem[_6574]]) + 32 < 0 or _6574 + ceil32(return_data.size) + (32 * mem[_6574 + mem[_6574]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6574 + ceil32(return_data.size) + (32 * mem[_6574 + mem[_6574]]) + 32
                                                                mem[_6574 + ceil32(return_data.size)] = _6790
                                                                require return_data.size >= _6682 + (32 * _6790) + 32
                                                                t = _6574 + _6682 + 32
                                                                u = _6574 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6790:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6790 < 1:
                                                                    revert with 0, 17
                                                                if _6790 - 1 >= _6790:
                                                                    revert with 0, 50
                                                                _9427 = mem[(32 * _6790 - 1) + _6574 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6790 - 1) + _6574 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6790 - 1) + _6574 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9427 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9922 = mem[_3505]
                                                                mem[mem[64] + 164] = mem[_3505]
                                                                s = 0
                                                                t = _3505 + 32
                                                                u = mem[64] + 196
                                                                while s < _9922:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9427 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9922) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12397 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12559 = mem[_12397]
                                                                require mem[_12397] <= test266151307()
                                                                require _12397 + return_data.size > _12397 + mem[_12397] + 31
                                                                _12721 = mem[_12397 + mem[_12397]]
                                                                if mem[_12397 + mem[_12397]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12397 + mem[_12397]]) + 32 < 0 or _12397 + ceil32(return_data.size) + (32 * mem[_12397 + mem[_12397]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12397 + ceil32(return_data.size) + (32 * mem[_12397 + mem[_12397]]) + 32
                                                                mem[_12397 + ceil32(return_data.size)] = _12721
                                                                require return_data.size >= _12559 + (32 * _12721) + 32
                                                                t = _12397 + _12559 + 32
                                                                u = _12397 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12721:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14935 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14935] < _3451:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14935] - _3451):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14935] - _3451):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14935] - _3451
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3505 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3505 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6575 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6683 = mem[_6575]
                                                                    require mem[_6575] <= test266151307()
                                                                    require _6575 + return_data.size > _6575 + mem[_6575] + 31
                                                                    _6791 = mem[_6575 + mem[_6575]]
                                                                    if mem[_6575 + mem[_6575]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6575 + mem[_6575]]) + 32 < 0 or _6575 + ceil32(return_data.size) + (32 * mem[_6575 + mem[_6575]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6575 + ceil32(return_data.size) + (32 * mem[_6575 + mem[_6575]]) + 32
                                                                    mem[_6575 + ceil32(return_data.size)] = _6791
                                                                    require return_data.size >= _6683 + (32 * _6791) + 32
                                                                    t = _6575 + _6683 + 32
                                                                    u = _6575 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6791:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6791 < 1:
                                                                        revert with 0, 17
                                                                    if _6791 - 1 >= _6791:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6791 - 1) + _6575 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6791 - 1) + _6575 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6791 - 1) + _6575 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9923 = mem[_3505]
                                                                    mem[mem[64] + 164] = mem[_3505]
                                                                    s = 0
                                                                    t = _3505 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9923:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9923) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12399 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12561 = mem[_12399]
                                                                    require mem[_12399] <= test266151307()
                                                                    require _12399 + return_data.size > _12399 + mem[_12399] + 31
                                                                    _12723 = mem[_12399 + mem[_12399]]
                                                                    if mem[_12399 + mem[_12399]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12399 + mem[_12399]]) + 32 < 0 or _12399 + ceil32(return_data.size) + (32 * mem[_12399 + mem[_12399]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12399 + ceil32(return_data.size) + (32 * mem[_12399 + mem[_12399]]) + 32
                                                                    mem[_12399 + ceil32(return_data.size)] = _12723
                                                                    require return_data.size >= _12561 + (32 * _12723) + 32
                                                                    t = _12399 + _12561 + 32
                                                                    u = _12399 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12723:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14937 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14937] < _3451:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14937] - _3451):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14937] - _3451):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14937] - _3451
                                                                else:
                                                                    mem[_3505 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3505 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3505 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3505 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12398 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12560 = mem[_12398]
                                                                    require mem[_12398] <= test266151307()
                                                                    require _12398 + return_data.size > _12398 + mem[_12398] + 31
                                                                    _12722 = mem[_12398 + mem[_12398]]
                                                                    if mem[_12398 + mem[_12398]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12398 + mem[_12398]]) + 32 < 0 or _12398 + ceil32(return_data.size) + (32 * mem[_12398 + mem[_12398]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12398 + ceil32(return_data.size) + (32 * mem[_12398 + mem[_12398]]) + 32
                                                                    mem[_12398 + ceil32(return_data.size)] = _12722
                                                                    require return_data.size >= _12560 + (32 * _12722) + 32
                                                                    t = _12398 + _12560 + 32
                                                                    u = _12398 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12722:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12722 < 1:
                                                                        revert with 0, 17
                                                                    if _12722 - 1 >= _12722:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12722 - 1) + _12398 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12722 - 1) + _12398 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12722 - 1) + _12398 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15223 = mem[_3505]
                                                                    mem[mem[64] + 164] = mem[_3505]
                                                                    s = 0
                                                                    t = _3505 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15223:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15223) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15979 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _16033 = mem[_15979]
                                                                    require mem[_15979] <= test266151307()
                                                                    require _15979 + return_data.size > _15979 + mem[_15979] + 31
                                                                    _16087 = mem[_15979 + mem[_15979]]
                                                                    if mem[_15979 + mem[_15979]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15979 + mem[_15979]]) + 32 < 0 or _15979 + ceil32(return_data.size) + (32 * mem[_15979 + mem[_15979]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15979 + ceil32(return_data.size) + (32 * mem[_15979 + mem[_15979]]) + 32
                                                                    mem[_15979 + ceil32(return_data.size)] = _16087
                                                                    require return_data.size >= _16033 + (32 * _16087) + 32
                                                                    t = _15979 + _16033 + 32
                                                                    u = _15979 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16087:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16627 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16627] < _3451:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16627] - _3451):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16627] - _3451):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16627] - _3451
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                        if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                            revert with 0, 17
                                        if False and PRECISION_FACTOR > 0:
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3396 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3450 = mem[_3396]
                                                                _3504 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3504] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3504 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6572 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6680 = mem[_6572]
                                                                    require mem[_6572] <= test266151307()
                                                                    require _6572 + return_data.size > _6572 + mem[_6572] + 31
                                                                    _6788 = mem[_6572 + mem[_6572]]
                                                                    if mem[_6572 + mem[_6572]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6572 + mem[_6572]]) + 32 < 0 or _6572 + ceil32(return_data.size) + (32 * mem[_6572 + mem[_6572]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6572 + ceil32(return_data.size) + (32 * mem[_6572 + mem[_6572]]) + 32
                                                                    mem[_6572 + ceil32(return_data.size)] = _6788
                                                                    require return_data.size >= _6680 + (32 * _6788) + 32
                                                                    t = _6572 + _6680 + 32
                                                                    u = _6572 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6788:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6788 < 1:
                                                                        revert with 0, 17
                                                                    if _6788 - 1 >= _6788:
                                                                        revert with 0, 50
                                                                    _9424 = mem[(32 * _6788 - 1) + _6572 + ceil32(return_data.size) + 32]
                                                                    if mem[(32 * _6788 - 1) + _6572 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6788 - 1) + _6572 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    _9802 = mem[64]
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = _9424 * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9920 = mem[_3504]
                                                                    mem[mem[64] + 164] = mem[_3504]
                                                                    s = 0
                                                                    t = _3504 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9920:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_9802 + 100] = this.address
                                                                    mem[_9802 + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.mem[mem[64] len 4] with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _9802 + (32 * _9920) + -mem[64] + 192]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12394 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12556 = mem[_12394]
                                                                    require mem[_12394] <= test266151307()
                                                                    require _12394 + return_data.size > _12394 + mem[_12394] + 31
                                                                    _12718 = mem[_12394 + mem[_12394]]
                                                                    if mem[_12394 + mem[_12394]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12394 + mem[_12394]]) + 32 < 0 or _12394 + ceil32(return_data.size) + (32 * mem[_12394 + mem[_12394]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12394 + ceil32(return_data.size) + (32 * mem[_12394 + mem[_12394]]) + 32
                                                                    mem[_12394 + ceil32(return_data.size)] = _12718
                                                                    require return_data.size >= _12556 + (32 * _12718) + 32
                                                                    t = _12394 + _12556 + 32
                                                                    u = _12394 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12718:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14932 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14932] < _3450:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14932] - _3450):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14932] - _3450):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14932] - _3450
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3504 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3504 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6573 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6681 = mem[_6573]
                                                                        require mem[_6573] <= test266151307()
                                                                        require _6573 + return_data.size > _6573 + mem[_6573] + 31
                                                                        _6789 = mem[_6573 + mem[_6573]]
                                                                        if mem[_6573 + mem[_6573]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6573 + mem[_6573]]) + 32 < 0 or _6573 + ceil32(return_data.size) + (32 * mem[_6573 + mem[_6573]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6573 + ceil32(return_data.size) + (32 * mem[_6573 + mem[_6573]]) + 32
                                                                        mem[_6573 + ceil32(return_data.size)] = _6789
                                                                        require return_data.size >= _6681 + (32 * _6789) + 32
                                                                        t = _6573 + _6681 + 32
                                                                        u = _6573 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6789:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6789 < 1:
                                                                            revert with 0, 17
                                                                        if _6789 - 1 >= _6789:
                                                                            revert with 0, 50
                                                                        _9426 = mem[(32 * _6789 - 1) + _6573 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6789 - 1) + _6573 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6789 - 1) + _6573 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9426 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9921 = mem[_3504]
                                                                        mem[mem[64] + 164] = mem[_3504]
                                                                        s = 0
                                                                        t = _3504 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9921:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9426 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9921) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12396 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12558 = mem[_12396]
                                                                        require mem[_12396] <= test266151307()
                                                                        require _12396 + return_data.size > _12396 + mem[_12396] + 31
                                                                        _12720 = mem[_12396 + mem[_12396]]
                                                                        if mem[_12396 + mem[_12396]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12396 + mem[_12396]]) + 32 < 0 or _12396 + ceil32(return_data.size) + (32 * mem[_12396 + mem[_12396]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12396 + ceil32(return_data.size) + (32 * mem[_12396 + mem[_12396]]) + 32
                                                                        mem[_12396 + ceil32(return_data.size)] = _12720
                                                                        require return_data.size >= _12558 + (32 * _12720) + 32
                                                                        t = _12396 + _12558 + 32
                                                                        u = _12396 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12720:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14934 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14934] < _3450:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14934] - _3450):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14934] - _3450):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14934] - _3450
                                                                    else:
                                                                        mem[_3504 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3504 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3504 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3504 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12395 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12557 = mem[_12395]
                                                                        require mem[_12395] <= test266151307()
                                                                        require _12395 + return_data.size > _12395 + mem[_12395] + 31
                                                                        _12719 = mem[_12395 + mem[_12395]]
                                                                        if mem[_12395 + mem[_12395]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12395 + mem[_12395]]) + 32 < 0 or _12395 + ceil32(return_data.size) + (32 * mem[_12395 + mem[_12395]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12395 + ceil32(return_data.size) + (32 * mem[_12395 + mem[_12395]]) + 32
                                                                        mem[_12395 + ceil32(return_data.size)] = _12719
                                                                        require return_data.size >= _12557 + (32 * _12719) + 32
                                                                        t = _12395 + _12557 + 32
                                                                        u = _12395 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12719:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12719 < 1:
                                                                            revert with 0, 17
                                                                        if _12719 - 1 >= _12719:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _12719 - 1) + _12395 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12719 - 1) + _12395 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _12719 - 1) + _12395 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15222 = mem[_3504]
                                                                        mem[mem[64] + 164] = mem[_3504]
                                                                        s = 0
                                                                        t = _3504 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15222:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15222) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15978 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16032 = mem[_15978]
                                                                        require mem[_15978] <= test266151307()
                                                                        require _15978 + return_data.size > _15978 + mem[_15978] + 31
                                                                        _16086 = mem[_15978 + mem[_15978]]
                                                                        if mem[_15978 + mem[_15978]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15978 + mem[_15978]]) + 32 < 0 or _15978 + ceil32(return_data.size) + (32 * mem[_15978 + mem[_15978]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15978 + ceil32(return_data.size) + (32 * mem[_15978 + mem[_15978]]) + 32
                                                                        mem[_15978 + ceil32(return_data.size)] = _16086
                                                                        require return_data.size >= _16032 + (32 * _16086) + 32
                                                                        t = _15978 + _16032 + 32
                                                                        u = _15978 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16086:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16626 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16626] < _3450:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16626] - _3450):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16626] - _3450):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16626] - _3450
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3395 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3449 = mem[_3395]
                                                                _3503 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3503] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3503 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6570 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6678 = mem[_6570]
                                                                    require mem[_6570] <= test266151307()
                                                                    require _6570 + return_data.size > _6570 + mem[_6570] + 31
                                                                    _6786 = mem[_6570 + mem[_6570]]
                                                                    if mem[_6570 + mem[_6570]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6570 + mem[_6570]]) + 32 < 0 or _6570 + ceil32(return_data.size) + (32 * mem[_6570 + mem[_6570]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6570 + ceil32(return_data.size) + (32 * mem[_6570 + mem[_6570]]) + 32
                                                                    mem[_6570 + ceil32(return_data.size)] = _6786
                                                                    require return_data.size >= _6678 + (32 * _6786) + 32
                                                                    t = _6570 + _6678 + 32
                                                                    u = _6570 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6786:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6786 < 1:
                                                                        revert with 0, 17
                                                                    if _6786 - 1 >= _6786:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6786 - 1) + _6570 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6786 - 1) + _6570 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6786 - 1) + _6570 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9918 = mem[_3503]
                                                                    mem[mem[64] + 164] = mem[_3503]
                                                                    s = 0
                                                                    t = _3503 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9918:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9918) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12391 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12553 = mem[_12391]
                                                                    require mem[_12391] <= test266151307()
                                                                    require _12391 + return_data.size > _12391 + mem[_12391] + 31
                                                                    _12715 = mem[_12391 + mem[_12391]]
                                                                    if mem[_12391 + mem[_12391]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12391 + mem[_12391]]) + 32 < 0 or _12391 + ceil32(return_data.size) + (32 * mem[_12391 + mem[_12391]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12391 + ceil32(return_data.size) + (32 * mem[_12391 + mem[_12391]]) + 32
                                                                    mem[_12391 + ceil32(return_data.size)] = _12715
                                                                    require return_data.size >= _12553 + (32 * _12715) + 32
                                                                    t = _12391 + _12553 + 32
                                                                    u = _12391 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12715:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14929 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14929] < _3449:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14929] - _3449):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14929] - _3449):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14929] - _3449
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3503 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3503 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6571 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6679 = mem[_6571]
                                                                        require mem[_6571] <= test266151307()
                                                                        require _6571 + return_data.size > _6571 + mem[_6571] + 31
                                                                        _6787 = mem[_6571 + mem[_6571]]
                                                                        if mem[_6571 + mem[_6571]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6571 + mem[_6571]]) + 32 < 0 or _6571 + ceil32(return_data.size) + (32 * mem[_6571 + mem[_6571]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6571 + ceil32(return_data.size) + (32 * mem[_6571 + mem[_6571]]) + 32
                                                                        mem[_6571 + ceil32(return_data.size)] = _6787
                                                                        require return_data.size >= _6679 + (32 * _6787) + 32
                                                                        t = _6571 + _6679 + 32
                                                                        u = _6571 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6787:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6787 < 1:
                                                                            revert with 0, 17
                                                                        if _6787 - 1 >= _6787:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6787 - 1) + _6571 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6787 - 1) + _6571 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6787 - 1) + _6571 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9919 = mem[_3503]
                                                                        mem[mem[64] + 164] = mem[_3503]
                                                                        s = 0
                                                                        t = _3503 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9919:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9919) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12393 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12555 = mem[_12393]
                                                                        require mem[_12393] <= test266151307()
                                                                        require _12393 + return_data.size > _12393 + mem[_12393] + 31
                                                                        _12717 = mem[_12393 + mem[_12393]]
                                                                        if mem[_12393 + mem[_12393]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12393 + mem[_12393]]) + 32 < 0 or _12393 + ceil32(return_data.size) + (32 * mem[_12393 + mem[_12393]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12393 + ceil32(return_data.size) + (32 * mem[_12393 + mem[_12393]]) + 32
                                                                        mem[_12393 + ceil32(return_data.size)] = _12717
                                                                        require return_data.size >= _12555 + (32 * _12717) + 32
                                                                        t = _12393 + _12555 + 32
                                                                        u = _12393 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12717:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14931 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14931] < _3449:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14931] - _3449):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14931] - _3449):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14931] - _3449
                                                                    else:
                                                                        mem[_3503 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3503 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3503 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3503 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12392 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12554 = mem[_12392]
                                                                        require mem[_12392] <= test266151307()
                                                                        require _12392 + return_data.size > _12392 + mem[_12392] + 31
                                                                        _12716 = mem[_12392 + mem[_12392]]
                                                                        if mem[_12392 + mem[_12392]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12392 + mem[_12392]]) + 32 < 0 or _12392 + ceil32(return_data.size) + (32 * mem[_12392 + mem[_12392]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12392 + ceil32(return_data.size) + (32 * mem[_12392 + mem[_12392]]) + 32
                                                                        mem[_12392 + ceil32(return_data.size)] = _12716
                                                                        require return_data.size >= _12554 + (32 * _12716) + 32
                                                                        t = _12392 + _12554 + 32
                                                                        u = _12392 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12716:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12716 < 1:
                                                                            revert with 0, 17
                                                                        if _12716 - 1 >= _12716:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _12716 - 1) + _12392 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12716 - 1) + _12392 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _12716 - 1) + _12392 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15221 = mem[_3503]
                                                                        mem[mem[64] + 164] = mem[_3503]
                                                                        s = 0
                                                                        t = _3503 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15221:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15221) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15977 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16031 = mem[_15977]
                                                                        require mem[_15977] <= test266151307()
                                                                        require _15977 + return_data.size > _15977 + mem[_15977] + 31
                                                                        _16085 = mem[_15977 + mem[_15977]]
                                                                        if mem[_15977 + mem[_15977]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15977 + mem[_15977]]) + 32 < 0 or _15977 + ceil32(return_data.size) + (32 * mem[_15977 + mem[_15977]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15977 + ceil32(return_data.size) + (32 * mem[_15977 + mem[_15977]]) + 32
                                                                        mem[_15977 + ceil32(return_data.size)] = _16085
                                                                        require return_data.size >= _16031 + (32 * _16085) + 32
                                                                        t = _15977 + _16031 + 32
                                                                        u = _15977 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16085:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16625 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16625] < _3449:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16625] - _3449):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16625] - _3449):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16625] - _3449
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                else:
                    if stakingTokenAddress != dividendTokenAddress:
                        if ext_call.return_data[0] - stor22 < stor23:
                            revert with 0, 17
                        if ext_call.return_data[0] - stor22 - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - stor23:
                            revert with 0, 17
                        if not ext_call.return_data[0]:
                            revert with 0, 18
                        if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                            revert with 0, 17
                        sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                        stor23 = ext_call.return_data[0] - stor22
                        if arg2 >= sub_8e6f4fb7.length:
                            revert with 0, 50
                        if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                            mem[32] = 26
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            mem[0] = 25
                            idx = 0
                            while idx < userStakes[msg.sender].field_0:
                                mem[0] = sha3(msg.sender, 26)
                                if userStakes[msg.sender][idx].field_0 == arg2:
                                    if userStakes[msg.sender][idx].field_256:
                                        if not arg1:
                                            if arg1 < arg1:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 < 0:
                                                revert with 0, 17
                                            if userStaked[msg.sender].field_0 > -1:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                revert with 0, 17
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                revert with 0, 17
                                            if totalStaked < 0:
                                                revert with 0, 17
                                            if totalStaked > -1:
                                                revert with 0, 17
                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                            stor1.length = 1
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                            revert with 0, 17
                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                            revert with 0, 17
                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = 0
                                            else:
                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 -= arg1
                                        else:
                                            if sub_6e707b73Address == stakingTokenAddress:
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                            else:
                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingTokenAddress)
                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args address(this.address)
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _3376 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _3430 = mem[_3376]
                                                    _3484 = mem[64]
                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                    mem[_3484] = sub_c1e22a65.length
                                                    if not sub_c1e22a65.length:
                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = 64
                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                        s = 0
                                                        t = _3484 + 32
                                                        u = mem[64] + 100
                                                        while s < sub_c1e22a65.length:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        require ext_code.size(uniRouterAddress)
                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                gas gas_remaining wei
                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _6532 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _6640 = mem[_6532]
                                                        require mem[_6532] <= test266151307()
                                                        require _6532 + return_data.size > _6532 + mem[_6532] + 31
                                                        _6748 = mem[_6532 + mem[_6532]]
                                                        if mem[_6532 + mem[_6532]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_6532 + mem[_6532]]) + 32 < 0 or _6532 + ceil32(return_data.size) + (32 * mem[_6532 + mem[_6532]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _6532 + ceil32(return_data.size) + (32 * mem[_6532 + mem[_6532]]) + 32
                                                        mem[_6532 + ceil32(return_data.size)] = _6748
                                                        require return_data.size >= _6640 + (32 * _6748) + 32
                                                        t = _6532 + _6640 + 32
                                                        u = _6532 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _6748:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        if _6748 < 1:
                                                            revert with 0, 17
                                                        if _6748 - 1 >= _6748:
                                                            revert with 0, 50
                                                        _9364 = mem[(32 * _6748 - 1) + _6532 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _6748 - 1) + _6532 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6748 - 1) + _6532 + ceil32(return_data.size) + 32]:
                                                            revert with 0, 17
                                                        if block.timestamp > -601:
                                                            revert with 0, 17
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        mem[mem[64] + 36] = _9364 * slippageFactor / 1000
                                                        mem[mem[64] + 68] = 160
                                                        _9880 = mem[_3484]
                                                        mem[mem[64] + 164] = mem[_3484]
                                                        s = 0
                                                        t = _3484 + 32
                                                        u = mem[64] + 196
                                                        while s < _9880:
                                                            mem[u] = mem[t + 12 len 20]
                                                            s = s + 1
                                                            t = t + 32
                                                            u = u + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                        require ext_code.size(uniRouterAddress)
                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9364 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9880) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12334 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _12496 = mem[_12334]
                                                        require mem[_12334] <= test266151307()
                                                        require _12334 + return_data.size > _12334 + mem[_12334] + 31
                                                        _12658 = mem[_12334 + mem[_12334]]
                                                        if mem[_12334 + mem[_12334]] > test266151307():
                                                            revert with 0, 65
                                                        if (32 * mem[_12334 + mem[_12334]]) + 32 < 0 or _12334 + ceil32(return_data.size) + (32 * mem[_12334 + mem[_12334]]) + 32 > test266151307():
                                                            revert with 0, 65
                                                        mem[64] = _12334 + ceil32(return_data.size) + (32 * mem[_12334 + mem[_12334]]) + 32
                                                        mem[_12334 + ceil32(return_data.size)] = _12658
                                                        require return_data.size >= _12496 + (32 * _12658) + 32
                                                        t = _12334 + _12496 + 32
                                                        u = _12334 + ceil32(return_data.size) + 32
                                                        s = 0
                                                        while s < _12658:
                                                            mem[u] = mem[t]
                                                            t = t + 32
                                                            u = u + 32
                                                            s = s + 1
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14872 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        if mem[_14872] < _3430:
                                                            revert with 0, 17
                                                        if 0 > !(mem[_14872] - _3430):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14872] - _3430):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14872] - _3430
                                                    else:
                                                        mem[0] = 11
                                                        mem[_3484 + 32] = address(sub_c1e22a65.field_0)
                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3484 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6533 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6641 = mem[_6533]
                                                            require mem[_6533] <= test266151307()
                                                            require _6533 + return_data.size > _6533 + mem[_6533] + 31
                                                            _6749 = mem[_6533 + mem[_6533]]
                                                            if mem[_6533 + mem[_6533]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6533 + mem[_6533]]) + 32 < 0 or _6533 + ceil32(return_data.size) + (32 * mem[_6533 + mem[_6533]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6533 + ceil32(return_data.size) + (32 * mem[_6533 + mem[_6533]]) + 32
                                                            mem[_6533 + ceil32(return_data.size)] = _6749
                                                            require return_data.size >= _6641 + (32 * _6749) + 32
                                                            t = _6533 + _6641 + 32
                                                            u = _6533 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6749:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6749 < 1:
                                                                revert with 0, 17
                                                            if _6749 - 1 >= _6749:
                                                                revert with 0, 50
                                                            if mem[(32 * _6749 - 1) + _6533 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6749 - 1) + _6533 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6749 - 1) + _6533 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9881 = mem[_3484]
                                                            mem[mem[64] + 164] = mem[_3484]
                                                            s = 0
                                                            t = _3484 + 32
                                                            u = mem[64] + 196
                                                            while s < _9881:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9881) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12336 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12498 = mem[_12336]
                                                            require mem[_12336] <= test266151307()
                                                            require _12336 + return_data.size > _12336 + mem[_12336] + 31
                                                            _12660 = mem[_12336 + mem[_12336]]
                                                            if mem[_12336 + mem[_12336]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12336 + mem[_12336]]) + 32 < 0 or _12336 + ceil32(return_data.size) + (32 * mem[_12336 + mem[_12336]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12336 + ceil32(return_data.size) + (32 * mem[_12336 + mem[_12336]]) + 32
                                                            mem[_12336 + ceil32(return_data.size)] = _12660
                                                            require return_data.size >= _12498 + (32 * _12660) + 32
                                                            t = _12336 + _12498 + 32
                                                            u = _12336 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12660:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14874 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14874] < _3430:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14874] - _3430):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14874] - _3430):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14874] - _3430
                                                        else:
                                                            mem[_3484 + 64] = address(sub_c1e22a65.field_256)
                                                            s = _3484 + 64
                                                            t = sha3(11) + 1
                                                            while _3484 + (32 * sub_c1e22a65.length) > s:
                                                                mem[s + 32] = stor1[t]
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3484 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12335 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12497 = mem[_12335]
                                                            require mem[_12335] <= test266151307()
                                                            require _12335 + return_data.size > _12335 + mem[_12335] + 31
                                                            _12659 = mem[_12335 + mem[_12335]]
                                                            if mem[_12335 + mem[_12335]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12335 + mem[_12335]]) + 32 < 0 or _12335 + ceil32(return_data.size) + (32 * mem[_12335 + mem[_12335]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12335 + ceil32(return_data.size) + (32 * mem[_12335 + mem[_12335]]) + 32
                                                            mem[_12335 + ceil32(return_data.size)] = _12659
                                                            require return_data.size >= _12497 + (32 * _12659) + 32
                                                            t = _12335 + _12497 + 32
                                                            u = _12335 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12659:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _12659 < 1:
                                                                revert with 0, 17
                                                            if _12659 - 1 >= _12659:
                                                                revert with 0, 50
                                                            if mem[(32 * _12659 - 1) + _12335 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12659 - 1) + _12335 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _12659 - 1) + _12335 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _15202 = mem[_3484]
                                                            mem[mem[64] + 164] = mem[_3484]
                                                            s = 0
                                                            t = _3484 + 32
                                                            u = mem[64] + 196
                                                            while s < _15202:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15202) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _15958 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _16012 = mem[_15958]
                                                            require mem[_15958] <= test266151307()
                                                            require _15958 + return_data.size > _15958 + mem[_15958] + 31
                                                            _16066 = mem[_15958 + mem[_15958]]
                                                            if mem[_15958 + mem[_15958]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_15958 + mem[_15958]]) + 32 < 0 or _15958 + ceil32(return_data.size) + (32 * mem[_15958 + mem[_15958]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _15958 + ceil32(return_data.size) + (32 * mem[_15958 + mem[_15958]]) + 32
                                                            mem[_15958 + ceil32(return_data.size)] = _16066
                                                            require return_data.size >= _16012 + (32 * _16066) + 32
                                                            t = _15958 + _16012 + 32
                                                            u = _15958 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _16066:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _16606 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_16606] < _3430:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_16606] - _3430):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16606] - _3430):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16606] - _3430
                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not PRECISION_FACTOR:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                            revert with 0, 17
                                        if not sub_88bbb0c1:
                                            revert with 0, 18
                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3381 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3435 = mem[_3381]
                                                        _3489 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3489] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3489 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6542 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6650 = mem[_6542]
                                                            require mem[_6542] <= test266151307()
                                                            require _6542 + return_data.size > _6542 + mem[_6542] + 31
                                                            _6758 = mem[_6542 + mem[_6542]]
                                                            if mem[_6542 + mem[_6542]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6542 + mem[_6542]]) + 32 < 0 or _6542 + ceil32(return_data.size) + (32 * mem[_6542 + mem[_6542]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6542 + ceil32(return_data.size) + (32 * mem[_6542 + mem[_6542]]) + 32
                                                            mem[_6542 + ceil32(return_data.size)] = _6758
                                                            require return_data.size >= _6650 + (32 * _6758) + 32
                                                            t = _6542 + _6650 + 32
                                                            u = _6542 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6758:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6758 < 1:
                                                                revert with 0, 17
                                                            if _6758 - 1 >= _6758:
                                                                revert with 0, 50
                                                            if mem[(32 * _6758 - 1) + _6542 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6758 - 1) + _6542 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            _9757 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6758 - 1) + _6542 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9890 = mem[_3489]
                                                            mem[mem[64] + 164] = mem[_3489]
                                                            s = 0
                                                            t = _3489 + 32
                                                            u = mem[64] + 196
                                                            while s < _9890:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_9757 + 100] = this.address
                                                            mem[_9757 + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9757 + (32 * _9890) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12349 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12511 = mem[_12349]
                                                            require mem[_12349] <= test266151307()
                                                            require _12349 + return_data.size > _12349 + mem[_12349] + 31
                                                            _12673 = mem[_12349 + mem[_12349]]
                                                            if mem[_12349 + mem[_12349]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12349 + mem[_12349]]) + 32 < 0 or _12349 + ceil32(return_data.size) + (32 * mem[_12349 + mem[_12349]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12349 + ceil32(return_data.size) + (32 * mem[_12349 + mem[_12349]]) + 32
                                                            mem[_12349 + ceil32(return_data.size)] = _12673
                                                            require return_data.size >= _12511 + (32 * _12673) + 32
                                                            t = _12349 + _12511 + 32
                                                            u = _12349 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12673:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14887 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14887] < _3435:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14887] - _3435):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14887] - _3435):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14887] - _3435
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3489 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3489 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6543 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6651 = mem[_6543]
                                                                require mem[_6543] <= test266151307()
                                                                require _6543 + return_data.size > _6543 + mem[_6543] + 31
                                                                _6759 = mem[_6543 + mem[_6543]]
                                                                if mem[_6543 + mem[_6543]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6543 + mem[_6543]]) + 32 < 0 or _6543 + ceil32(return_data.size) + (32 * mem[_6543 + mem[_6543]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6543 + ceil32(return_data.size) + (32 * mem[_6543 + mem[_6543]]) + 32
                                                                mem[_6543 + ceil32(return_data.size)] = _6759
                                                                require return_data.size >= _6651 + (32 * _6759) + 32
                                                                t = _6543 + _6651 + 32
                                                                u = _6543 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6759:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6759 < 1:
                                                                    revert with 0, 17
                                                                if _6759 - 1 >= _6759:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6759 - 1) + _6543 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6759 - 1) + _6543 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _9759 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6759 - 1) + _6543 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9891 = mem[_3489]
                                                                mem[mem[64] + 164] = mem[_3489]
                                                                s = 0
                                                                t = _3489 + 32
                                                                u = mem[64] + 196
                                                                while s < _9891:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_9759 + 100] = this.address
                                                                mem[_9759 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9759 + (32 * _9891) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12351 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12513 = mem[_12351]
                                                                require mem[_12351] <= test266151307()
                                                                require _12351 + return_data.size > _12351 + mem[_12351] + 31
                                                                _12675 = mem[_12351 + mem[_12351]]
                                                                if mem[_12351 + mem[_12351]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12351 + mem[_12351]]) + 32 < 0 or _12351 + ceil32(return_data.size) + (32 * mem[_12351 + mem[_12351]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12351 + ceil32(return_data.size) + (32 * mem[_12351 + mem[_12351]]) + 32
                                                                mem[_12351 + ceil32(return_data.size)] = _12675
                                                                require return_data.size >= _12513 + (32 * _12675) + 32
                                                                t = _12351 + _12513 + 32
                                                                u = _12351 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12675:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14889 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14889] < _3435:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14889] - _3435):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14889] - _3435):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14889] - _3435
                                                            else:
                                                                mem[_3489 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3489 + 64
                                                                t = sha3(11) + 1
                                                                while _3489 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3489 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12350 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12512 = mem[_12350]
                                                                require mem[_12350] <= test266151307()
                                                                require _12350 + return_data.size > _12350 + mem[_12350] + 31
                                                                _12674 = mem[_12350 + mem[_12350]]
                                                                if mem[_12350 + mem[_12350]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12350 + mem[_12350]]) + 32 < 0 or _12350 + ceil32(return_data.size) + (32 * mem[_12350 + mem[_12350]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12350 + ceil32(return_data.size) + (32 * mem[_12350 + mem[_12350]]) + 32
                                                                mem[_12350 + ceil32(return_data.size)] = _12674
                                                                require return_data.size >= _12512 + (32 * _12674) + 32
                                                                t = _12350 + _12512 + 32
                                                                u = _12350 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12674:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12674 < 1:
                                                                    revert with 0, 17
                                                                if _12674 - 1 >= _12674:
                                                                    revert with 0, 50
                                                                if mem[(32 * _12674 - 1) + _12350 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12674 - 1) + _12350 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _15153 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _12674 - 1) + _12350 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15207 = mem[_3489]
                                                                mem[mem[64] + 164] = mem[_3489]
                                                                s = 0
                                                                t = _3489 + 32
                                                                u = mem[64] + 196
                                                                while s < _15207:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_15153 + 100] = this.address
                                                                mem[_15153 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _15153 + (32 * _15207) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15963 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16017 = mem[_15963]
                                                                require mem[_15963] <= test266151307()
                                                                require _15963 + return_data.size > _15963 + mem[_15963] + 31
                                                                _16071 = mem[_15963 + mem[_15963]]
                                                                if mem[_15963 + mem[_15963]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15963 + mem[_15963]]) + 32 < 0 or _15963 + ceil32(return_data.size) + (32 * mem[_15963 + mem[_15963]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15963 + ceil32(return_data.size) + (32 * mem[_15963 + mem[_15963]]) + 32
                                                                mem[_15963 + ceil32(return_data.size)] = _16071
                                                                require return_data.size >= _16017 + (32 * _16071) + 32
                                                                t = _15963 + _16017 + 32
                                                                u = _15963 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16071:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16611 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16611] < _3435:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16611] - _3435):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16611] - _3435):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16611] - _3435
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                    sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3380 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3434 = mem[_3380]
                                                            _3488 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3488] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3488 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6540 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6648 = mem[_6540]
                                                                require mem[_6540] <= test266151307()
                                                                require _6540 + return_data.size > _6540 + mem[_6540] + 31
                                                                _6756 = mem[_6540 + mem[_6540]]
                                                                if mem[_6540 + mem[_6540]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6540 + mem[_6540]]) + 32 < 0 or _6540 + ceil32(return_data.size) + (32 * mem[_6540 + mem[_6540]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6540 + ceil32(return_data.size) + (32 * mem[_6540 + mem[_6540]]) + 32
                                                                mem[_6540 + ceil32(return_data.size)] = _6756
                                                                require return_data.size >= _6648 + (32 * _6756) + 32
                                                                t = _6540 + _6648 + 32
                                                                u = _6540 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6756:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6756 < 1:
                                                                    revert with 0, 17
                                                                if _6756 - 1 >= _6756:
                                                                    revert with 0, 50
                                                                _9376 = mem[(32 * _6756 - 1) + _6540 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6756 - 1) + _6540 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6756 - 1) + _6540 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _9754 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9376 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9888 = mem[_3488]
                                                                mem[mem[64] + 164] = mem[_3488]
                                                                s = 0
                                                                t = _3488 + 32
                                                                u = mem[64] + 196
                                                                while s < _9888:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_9754 + 100] = this.address
                                                                mem[_9754 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9754 + (32 * _9888) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12346 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12508 = mem[_12346]
                                                                require mem[_12346] <= test266151307()
                                                                require _12346 + return_data.size > _12346 + mem[_12346] + 31
                                                                _12670 = mem[_12346 + mem[_12346]]
                                                                if mem[_12346 + mem[_12346]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12346 + mem[_12346]]) + 32 < 0 or _12346 + ceil32(return_data.size) + (32 * mem[_12346 + mem[_12346]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12346 + ceil32(return_data.size) + (32 * mem[_12346 + mem[_12346]]) + 32
                                                                mem[_12346 + ceil32(return_data.size)] = _12670
                                                                require return_data.size >= _12508 + (32 * _12670) + 32
                                                                t = _12346 + _12508 + 32
                                                                u = _12346 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12670:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14884 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14884] < _3434:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14884] - _3434):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14884] - _3434):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14884] - _3434
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3488 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3488 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6541 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6649 = mem[_6541]
                                                                    require mem[_6541] <= test266151307()
                                                                    require _6541 + return_data.size > _6541 + mem[_6541] + 31
                                                                    _6757 = mem[_6541 + mem[_6541]]
                                                                    if mem[_6541 + mem[_6541]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6541 + mem[_6541]]) + 32 < 0 or _6541 + ceil32(return_data.size) + (32 * mem[_6541 + mem[_6541]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6541 + ceil32(return_data.size) + (32 * mem[_6541 + mem[_6541]]) + 32
                                                                    mem[_6541 + ceil32(return_data.size)] = _6757
                                                                    require return_data.size >= _6649 + (32 * _6757) + 32
                                                                    t = _6541 + _6649 + 32
                                                                    u = _6541 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6757:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6757 < 1:
                                                                        revert with 0, 17
                                                                    if _6757 - 1 >= _6757:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6757 - 1) + _6541 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6757 - 1) + _6541 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6757 - 1) + _6541 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9889 = mem[_3488]
                                                                    mem[mem[64] + 164] = mem[_3488]
                                                                    s = 0
                                                                    t = _3488 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9889:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9889) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12348 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12510 = mem[_12348]
                                                                    require mem[_12348] <= test266151307()
                                                                    require _12348 + return_data.size > _12348 + mem[_12348] + 31
                                                                    _12672 = mem[_12348 + mem[_12348]]
                                                                    if mem[_12348 + mem[_12348]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12348 + mem[_12348]]) + 32 < 0 or _12348 + ceil32(return_data.size) + (32 * mem[_12348 + mem[_12348]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12348 + ceil32(return_data.size) + (32 * mem[_12348 + mem[_12348]]) + 32
                                                                    mem[_12348 + ceil32(return_data.size)] = _12672
                                                                    require return_data.size >= _12510 + (32 * _12672) + 32
                                                                    t = _12348 + _12510 + 32
                                                                    u = _12348 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12672:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14886 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14886] < _3434:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14886] - _3434):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14886] - _3434):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14886] - _3434
                                                                else:
                                                                    mem[_3488 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3488 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3488 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3488 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12347 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12509 = mem[_12347]
                                                                    require mem[_12347] <= test266151307()
                                                                    require _12347 + return_data.size > _12347 + mem[_12347] + 31
                                                                    _12671 = mem[_12347 + mem[_12347]]
                                                                    if mem[_12347 + mem[_12347]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12347 + mem[_12347]]) + 32 < 0 or _12347 + ceil32(return_data.size) + (32 * mem[_12347 + mem[_12347]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12347 + ceil32(return_data.size) + (32 * mem[_12347 + mem[_12347]]) + 32
                                                                    mem[_12347 + ceil32(return_data.size)] = _12671
                                                                    require return_data.size >= _12509 + (32 * _12671) + 32
                                                                    t = _12347 + _12509 + 32
                                                                    u = _12347 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12671:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12671 < 1:
                                                                        revert with 0, 17
                                                                    if _12671 - 1 >= _12671:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12671 - 1) + _12347 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12671 - 1) + _12347 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12671 - 1) + _12347 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15206 = mem[_3488]
                                                                    mem[mem[64] + 164] = mem[_3488]
                                                                    s = 0
                                                                    t = _3488 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15206:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15206) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15962 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _16016 = mem[_15962]
                                                                    require mem[_15962] <= test266151307()
                                                                    require _15962 + return_data.size > _15962 + mem[_15962] + 31
                                                                    _16070 = mem[_15962 + mem[_15962]]
                                                                    if mem[_15962 + mem[_15962]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15962 + mem[_15962]]) + 32 < 0 or _15962 + ceil32(return_data.size) + (32 * mem[_15962 + mem[_15962]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15962 + ceil32(return_data.size) + (32 * mem[_15962 + mem[_15962]]) + 32
                                                                    mem[_15962 + ceil32(return_data.size)] = _16070
                                                                    require return_data.size >= _16016 + (32 * _16070) + 32
                                                                    t = _15962 + _16016 + 32
                                                                    u = _15962 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16070:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16610 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16610] < _3434:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16610] - _3434):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16610] - _3434):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16610] - _3434
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if block.number <= bonusEndBlock:
                                        if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                            revert with 0, 17
                                        if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                            revert with 0, 17
                                        if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                            revert with 0, 18
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                            revert with 0, 17
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3379 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3433 = mem[_3379]
                                                                _3487 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3487] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3487 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6538 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6646 = mem[_6538]
                                                                    require mem[_6538] <= test266151307()
                                                                    require _6538 + return_data.size > _6538 + mem[_6538] + 31
                                                                    _6754 = mem[_6538 + mem[_6538]]
                                                                    if mem[_6538 + mem[_6538]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6538 + mem[_6538]]) + 32 < 0 or _6538 + ceil32(return_data.size) + (32 * mem[_6538 + mem[_6538]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6538 + ceil32(return_data.size) + (32 * mem[_6538 + mem[_6538]]) + 32
                                                                    mem[_6538 + ceil32(return_data.size)] = _6754
                                                                    require return_data.size >= _6646 + (32 * _6754) + 32
                                                                    t = _6538 + _6646 + 32
                                                                    u = _6538 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6754:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6754 < 1:
                                                                        revert with 0, 17
                                                                    if _6754 - 1 >= _6754:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6754 - 1) + _6538 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6754 - 1) + _6538 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6754 - 1) + _6538 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9886 = mem[_3487]
                                                                    mem[mem[64] + 164] = mem[_3487]
                                                                    s = 0
                                                                    t = _3487 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9886:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9886) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12343 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12505 = mem[_12343]
                                                                    require mem[_12343] <= test266151307()
                                                                    require _12343 + return_data.size > _12343 + mem[_12343] + 31
                                                                    _12667 = mem[_12343 + mem[_12343]]
                                                                    if mem[_12343 + mem[_12343]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12343 + mem[_12343]]) + 32 < 0 or _12343 + ceil32(return_data.size) + (32 * mem[_12343 + mem[_12343]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12343 + ceil32(return_data.size) + (32 * mem[_12343 + mem[_12343]]) + 32
                                                                    mem[_12343 + ceil32(return_data.size)] = _12667
                                                                    require return_data.size >= _12505 + (32 * _12667) + 32
                                                                    t = _12343 + _12505 + 32
                                                                    u = _12343 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12667:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14881 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14881] < _3433:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14881] - _3433):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14881] - _3433):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14881] - _3433
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3487 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3487 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6539 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6647 = mem[_6539]
                                                                        require mem[_6539] <= test266151307()
                                                                        require _6539 + return_data.size > _6539 + mem[_6539] + 31
                                                                        _6755 = mem[_6539 + mem[_6539]]
                                                                        if mem[_6539 + mem[_6539]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6539 + mem[_6539]]) + 32 < 0 or _6539 + ceil32(return_data.size) + (32 * mem[_6539 + mem[_6539]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6539 + ceil32(return_data.size) + (32 * mem[_6539 + mem[_6539]]) + 32
                                                                        mem[_6539 + ceil32(return_data.size)] = _6755
                                                                        require return_data.size >= _6647 + (32 * _6755) + 32
                                                                        t = _6539 + _6647 + 32
                                                                        u = _6539 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6755:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6755 < 1:
                                                                            revert with 0, 17
                                                                        if _6755 - 1 >= _6755:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6755 - 1) + _6539 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6755 - 1) + _6539 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6755 - 1) + _6539 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9887 = mem[_3487]
                                                                        mem[mem[64] + 164] = mem[_3487]
                                                                        s = 0
                                                                        t = _3487 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9887:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9887) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12345 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12507 = mem[_12345]
                                                                        require mem[_12345] <= test266151307()
                                                                        require _12345 + return_data.size > _12345 + mem[_12345] + 31
                                                                        _12669 = mem[_12345 + mem[_12345]]
                                                                        if mem[_12345 + mem[_12345]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12345 + mem[_12345]]) + 32 < 0 or _12345 + ceil32(return_data.size) + (32 * mem[_12345 + mem[_12345]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12345 + ceil32(return_data.size) + (32 * mem[_12345 + mem[_12345]]) + 32
                                                                        mem[_12345 + ceil32(return_data.size)] = _12669
                                                                        require return_data.size >= _12507 + (32 * _12669) + 32
                                                                        t = _12345 + _12507 + 32
                                                                        u = _12345 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12669:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14883 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14883] < _3433:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14883] - _3433):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14883] - _3433):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14883] - _3433
                                                                    else:
                                                                        mem[_3487 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3487 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3487 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3487 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12344 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12506 = mem[_12344]
                                                                        require mem[_12344] <= test266151307()
                                                                        require _12344 + return_data.size > _12344 + mem[_12344] + 31
                                                                        _12668 = mem[_12344 + mem[_12344]]
                                                                        if mem[_12344 + mem[_12344]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12344 + mem[_12344]]) + 32 < 0 or _12344 + ceil32(return_data.size) + (32 * mem[_12344 + mem[_12344]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12344 + ceil32(return_data.size) + (32 * mem[_12344 + mem[_12344]]) + 32
                                                                        mem[_12344 + ceil32(return_data.size)] = _12668
                                                                        require return_data.size >= _12506 + (32 * _12668) + 32
                                                                        t = _12344 + _12506 + 32
                                                                        u = _12344 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12668:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12668 < 1:
                                                                            revert with 0, 17
                                                                        if _12668 - 1 >= _12668:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _12668 - 1) + _12344 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12668 - 1) + _12344 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _12668 - 1) + _12344 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15205 = mem[_3487]
                                                                        mem[mem[64] + 164] = mem[_3487]
                                                                        s = 0
                                                                        t = _3487 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15205:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15205) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15961 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16015 = mem[_15961]
                                                                        require mem[_15961] <= test266151307()
                                                                        require _15961 + return_data.size > _15961 + mem[_15961] + 31
                                                                        _16069 = mem[_15961 + mem[_15961]]
                                                                        if mem[_15961 + mem[_15961]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15961 + mem[_15961]]) + 32 < 0 or _15961 + ceil32(return_data.size) + (32 * mem[_15961 + mem[_15961]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15961 + ceil32(return_data.size) + (32 * mem[_15961 + mem[_15961]]) + 32
                                                                        mem[_15961 + ceil32(return_data.size)] = _16069
                                                                        require return_data.size >= _16015 + (32 * _16069) + 32
                                                                        t = _15961 + _16015 + 32
                                                                        u = _15961 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16069:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16609 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16609] < _3433:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16609] - _3433):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16609] - _3433):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16609] - _3433
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                            if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                                revert with 0, 17
                                            if False and PRECISION_FACTOR > 0:
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3378 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3432 = mem[_3378]
                                                                    _3486 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3486] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3486 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6536 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6644 = mem[_6536]
                                                                        require mem[_6536] <= test266151307()
                                                                        require _6536 + return_data.size > _6536 + mem[_6536] + 31
                                                                        _6752 = mem[_6536 + mem[_6536]]
                                                                        if mem[_6536 + mem[_6536]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6536 + mem[_6536]]) + 32 < 0 or _6536 + ceil32(return_data.size) + (32 * mem[_6536 + mem[_6536]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6536 + ceil32(return_data.size) + (32 * mem[_6536 + mem[_6536]]) + 32
                                                                        mem[_6536 + ceil32(return_data.size)] = _6752
                                                                        require return_data.size >= _6644 + (32 * _6752) + 32
                                                                        t = _6536 + _6644 + 32
                                                                        u = _6536 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6752:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6752 < 1:
                                                                            revert with 0, 17
                                                                        if _6752 - 1 >= _6752:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6752 - 1) + _6536 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6752 - 1) + _6536 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6752 - 1) + _6536 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9884 = mem[_3486]
                                                                        mem[mem[64] + 164] = mem[_3486]
                                                                        s = 0
                                                                        t = _3486 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9884:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9884) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12340 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12502 = mem[_12340]
                                                                        require mem[_12340] <= test266151307()
                                                                        require _12340 + return_data.size > _12340 + mem[_12340] + 31
                                                                        _12664 = mem[_12340 + mem[_12340]]
                                                                        if mem[_12340 + mem[_12340]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12340 + mem[_12340]]) + 32 < 0 or _12340 + ceil32(return_data.size) + (32 * mem[_12340 + mem[_12340]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12340 + ceil32(return_data.size) + (32 * mem[_12340 + mem[_12340]]) + 32
                                                                        mem[_12340 + ceil32(return_data.size)] = _12664
                                                                        require return_data.size >= _12502 + (32 * _12664) + 32
                                                                        t = _12340 + _12502 + 32
                                                                        u = _12340 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12664:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14878 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14878] < _3432:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14878] - _3432):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14878] - _3432):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14878] - _3432
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3486 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 > 64:
                                                                            mem[_3486 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3486 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3486 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3486 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12341 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12503 = mem[_12341]
                                                                            require mem[_12341] <= test266151307()
                                                                            require _12341 + return_data.size > _12341 + mem[_12341] + 31
                                                                            _12665 = mem[_12341 + mem[_12341]]
                                                                            if mem[_12341 + mem[_12341]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12341 + mem[_12341]]) + 32 < 0 or _12341 + ceil32(return_data.size) + (32 * mem[_12341 + mem[_12341]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12341 + ceil32(return_data.size) + (32 * mem[_12341 + mem[_12341]]) + 32
                                                                            mem[_12341 + ceil32(return_data.size)] = _12665
                                                                            require return_data.size >= _12503 + (32 * _12665) + 32
                                                                            t = _12341 + _12503 + 32
                                                                            u = _12341 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12665:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12665 < 1:
                                                                                revert with 0, 17
                                                                            if _12665 - 1 >= _12665:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _12665 - 1) + _12341 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12665 - 1) + _12341 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _12665 - 1) + _12341 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15204 = mem[_3486]
                                                                            mem[mem[64] + 164] = mem[_3486]
                                                                            s = 0
                                                                            t = _3486 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15204:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15204) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15960 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16014 = mem[_15960]
                                                                            require mem[_15960] <= test266151307()
                                                                            require _15960 + return_data.size > _15960 + mem[_15960] + 31
                                                                            _16068 = mem[_15960 + mem[_15960]]
                                                                            if mem[_15960 + mem[_15960]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15960 + mem[_15960]]) + 32 < 0 or _15960 + ceil32(return_data.size) + (32 * mem[_15960 + mem[_15960]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15960 + ceil32(return_data.size) + (32 * mem[_15960 + mem[_15960]]) + 32
                                                                            mem[_15960 + ceil32(return_data.size)] = _16068
                                                                            require return_data.size >= _16014 + (32 * _16068) + 32
                                                                            t = _15960 + _16014 + 32
                                                                            u = _15960 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16068:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16608 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16608] < _3432:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16608] - _3432):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16608] - _3432):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16608] - _3432
                                                                        else:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3486 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6537 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6645 = mem[_6537]
                                                                            require mem[_6537] <= test266151307()
                                                                            require _6537 + return_data.size > _6537 + mem[_6537] + 31
                                                                            _6753 = mem[_6537 + mem[_6537]]
                                                                            if mem[_6537 + mem[_6537]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6537 + mem[_6537]]) + 32 < 0 or _6537 + ceil32(return_data.size) + (32 * mem[_6537 + mem[_6537]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6537 + ceil32(return_data.size) + (32 * mem[_6537 + mem[_6537]]) + 32
                                                                            mem[_6537 + ceil32(return_data.size)] = _6753
                                                                            require return_data.size >= _6645 + (32 * _6753) + 32
                                                                            t = _6537 + _6645 + 32
                                                                            u = _6537 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6753:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6753 < 1:
                                                                                revert with 0, 17
                                                                            if _6753 - 1 >= _6753:
                                                                                revert with 0, 50
                                                                            _9372 = mem[(32 * _6753 - 1) + _6537 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _6753 - 1) + _6537 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6753 - 1) + _6537 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            _9750 = mem[64]
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _9372 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9885 = mem[_3486]
                                                                            mem[mem[64] + 164] = mem[_3486]
                                                                            s = 0
                                                                            t = _3486 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9885:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[_9750 + 100] = this.address
                                                                            mem[_9750 + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len _9750 + (32 * _9885) + -mem[64] + 192]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12342 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12504 = mem[_12342]
                                                                            require mem[_12342] <= test266151307()
                                                                            require _12342 + return_data.size > _12342 + mem[_12342] + 31
                                                                            _12666 = mem[_12342 + mem[_12342]]
                                                                            if mem[_12342 + mem[_12342]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12342 + mem[_12342]]) + 32 < 0 or _12342 + ceil32(return_data.size) + (32 * mem[_12342 + mem[_12342]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12342 + ceil32(return_data.size) + (32 * mem[_12342 + mem[_12342]]) + 32
                                                                            mem[_12342 + ceil32(return_data.size)] = _12666
                                                                            require return_data.size >= _12504 + (32 * _12666) + 32
                                                                            t = _12342 + _12504 + 32
                                                                            u = _12342 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12666:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14880 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14880] < _3432:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14880] - _3432):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14880] - _3432):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14880] - _3432
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                        else:
                                            if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3377 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3431 = mem[_3377]
                                                                    _3485 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3485] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3485 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6534 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6642 = mem[_6534]
                                                                        require mem[_6534] <= test266151307()
                                                                        require _6534 + return_data.size > _6534 + mem[_6534] + 31
                                                                        _6750 = mem[_6534 + mem[_6534]]
                                                                        if mem[_6534 + mem[_6534]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6534 + mem[_6534]]) + 32 < 0 or _6534 + ceil32(return_data.size) + (32 * mem[_6534 + mem[_6534]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6534 + ceil32(return_data.size) + (32 * mem[_6534 + mem[_6534]]) + 32
                                                                        mem[_6534 + ceil32(return_data.size)] = _6750
                                                                        require return_data.size >= _6642 + (32 * _6750) + 32
                                                                        t = _6534 + _6642 + 32
                                                                        u = _6534 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6750:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6750 < 1:
                                                                            revert with 0, 17
                                                                        if _6750 - 1 >= _6750:
                                                                            revert with 0, 50
                                                                        _9367 = mem[(32 * _6750 - 1) + _6534 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6750 - 1) + _6534 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6750 - 1) + _6534 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9367 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9882 = mem[_3485]
                                                                        mem[mem[64] + 164] = mem[_3485]
                                                                        s = 0
                                                                        t = _3485 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9882:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9367 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9882) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12337 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12499 = mem[_12337]
                                                                        require mem[_12337] <= test266151307()
                                                                        require _12337 + return_data.size > _12337 + mem[_12337] + 31
                                                                        _12661 = mem[_12337 + mem[_12337]]
                                                                        if mem[_12337 + mem[_12337]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12337 + mem[_12337]]) + 32 < 0 or _12337 + ceil32(return_data.size) + (32 * mem[_12337 + mem[_12337]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12337 + ceil32(return_data.size) + (32 * mem[_12337 + mem[_12337]]) + 32
                                                                        mem[_12337 + ceil32(return_data.size)] = _12661
                                                                        require return_data.size >= _12499 + (32 * _12661) + 32
                                                                        t = _12337 + _12499 + 32
                                                                        u = _12337 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12661:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14875 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14875] < _3431:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14875] - _3431):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14875] - _3431):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14875] - _3431
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3485 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3485 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6535 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6643 = mem[_6535]
                                                                            require mem[_6535] <= test266151307()
                                                                            require _6535 + return_data.size > _6535 + mem[_6535] + 31
                                                                            _6751 = mem[_6535 + mem[_6535]]
                                                                            if mem[_6535 + mem[_6535]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6535 + mem[_6535]]) + 32 < 0 or _6535 + ceil32(return_data.size) + (32 * mem[_6535 + mem[_6535]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6535 + ceil32(return_data.size) + (32 * mem[_6535 + mem[_6535]]) + 32
                                                                            mem[_6535 + ceil32(return_data.size)] = _6751
                                                                            require return_data.size >= _6643 + (32 * _6751) + 32
                                                                            t = _6535 + _6643 + 32
                                                                            u = _6535 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6751:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6751 < 1:
                                                                                revert with 0, 17
                                                                            if _6751 - 1 >= _6751:
                                                                                revert with 0, 50
                                                                            _9369 = mem[(32 * _6751 - 1) + _6535 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _6751 - 1) + _6535 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6751 - 1) + _6535 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _9369 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9883 = mem[_3485]
                                                                            mem[mem[64] + 164] = mem[_3485]
                                                                            s = 0
                                                                            t = _3485 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9883:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9369 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9883) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12339 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12501 = mem[_12339]
                                                                            require mem[_12339] <= test266151307()
                                                                            require _12339 + return_data.size > _12339 + mem[_12339] + 31
                                                                            _12663 = mem[_12339 + mem[_12339]]
                                                                            if mem[_12339 + mem[_12339]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12339 + mem[_12339]]) + 32 < 0 or _12339 + ceil32(return_data.size) + (32 * mem[_12339 + mem[_12339]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12339 + ceil32(return_data.size) + (32 * mem[_12339 + mem[_12339]]) + 32
                                                                            mem[_12339 + ceil32(return_data.size)] = _12663
                                                                            require return_data.size >= _12501 + (32 * _12663) + 32
                                                                            t = _12339 + _12501 + 32
                                                                            u = _12339 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12663:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14877 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14877] < _3431:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14877] - _3431):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14877] - _3431):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14877] - _3431
                                                                        else:
                                                                            mem[_3485 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3485 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3485 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3485 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12338 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12500 = mem[_12338]
                                                                            require mem[_12338] <= test266151307()
                                                                            require _12338 + return_data.size > _12338 + mem[_12338] + 31
                                                                            _12662 = mem[_12338 + mem[_12338]]
                                                                            if mem[_12338 + mem[_12338]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12338 + mem[_12338]]) + 32 < 0 or _12338 + ceil32(return_data.size) + (32 * mem[_12338 + mem[_12338]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12338 + ceil32(return_data.size) + (32 * mem[_12338 + mem[_12338]]) + 32
                                                                            mem[_12338 + ceil32(return_data.size)] = _12662
                                                                            require return_data.size >= _12500 + (32 * _12662) + 32
                                                                            t = _12338 + _12500 + 32
                                                                            u = _12338 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12662:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12662 < 1:
                                                                                revert with 0, 17
                                                                            if _12662 - 1 >= _12662:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _12662 - 1) + _12338 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12662 - 1) + _12338 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _12662 - 1) + _12338 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15203 = mem[_3485]
                                                                            mem[mem[64] + 164] = mem[_3485]
                                                                            s = 0
                                                                            t = _3485 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15203:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15203) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15959 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16013 = mem[_15959]
                                                                            require mem[_15959] <= test266151307()
                                                                            require _15959 + return_data.size > _15959 + mem[_15959] + 31
                                                                            _16067 = mem[_15959 + mem[_15959]]
                                                                            if mem[_15959 + mem[_15959]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15959 + mem[_15959]]) + 32 < 0 or _15959 + ceil32(return_data.size) + (32 * mem[_15959 + mem[_15959]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15959 + ceil32(return_data.size) + (32 * mem[_15959 + mem[_15959]]) + 32
                                                                            mem[_15959 + ceil32(return_data.size)] = _16067
                                                                            require return_data.size >= _16013 + (32 * _16067) + 32
                                                                            t = _15959 + _16013 + 32
                                                                            u = _15959 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16067:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16607 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16607] < _3431:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16607] - _3431):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16607] - _3431):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16607] - _3431
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                    else:
                        if ext_call.return_data[0] - stor22 >= totalStaked:
                            if ext_call.return_data[0] - stor22 - totalStaked < stor23:
                                revert with 0, 17
                            if ext_call.return_data[0] - stor22 - totalStaked - stor23 and sub_88bbb0c1 > -1 / ext_call.return_data[0] - stor22 - totalStaked - stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !((ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += (ext_call.return_data[0] * sub_88bbb0c1) - (stor22 * sub_88bbb0c1) - (totalStaked * sub_88bbb0c1) - (stor23 * sub_88bbb0c1) / ext_call.return_data[0]
                            stor23 = ext_call.return_data[0] - stor22 - totalStaked
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3382 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3436 = mem[_3382]
                                                        _3490 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3490] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3490 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6544 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6652 = mem[_6544]
                                                            require mem[_6544] <= test266151307()
                                                            require _6544 + return_data.size > _6544 + mem[_6544] + 31
                                                            _6760 = mem[_6544 + mem[_6544]]
                                                            if mem[_6544 + mem[_6544]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6544 + mem[_6544]]) + 32 < 0 or _6544 + ceil32(return_data.size) + (32 * mem[_6544 + mem[_6544]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6544 + ceil32(return_data.size) + (32 * mem[_6544 + mem[_6544]]) + 32
                                                            mem[_6544 + ceil32(return_data.size)] = _6760
                                                            require return_data.size >= _6652 + (32 * _6760) + 32
                                                            t = _6544 + _6652 + 32
                                                            u = _6544 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6760:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6760 < 1:
                                                                revert with 0, 17
                                                            if _6760 - 1 >= _6760:
                                                                revert with 0, 50
                                                            if mem[(32 * _6760 - 1) + _6544 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6760 - 1) + _6544 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6760 - 1) + _6544 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9892 = mem[_3490]
                                                            mem[mem[64] + 164] = mem[_3490]
                                                            s = 0
                                                            t = _3490 + 32
                                                            u = mem[64] + 196
                                                            while s < _9892:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9892) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12352 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12514 = mem[_12352]
                                                            require mem[_12352] <= test266151307()
                                                            require _12352 + return_data.size > _12352 + mem[_12352] + 31
                                                            _12676 = mem[_12352 + mem[_12352]]
                                                            if mem[_12352 + mem[_12352]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12352 + mem[_12352]]) + 32 < 0 or _12352 + ceil32(return_data.size) + (32 * mem[_12352 + mem[_12352]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12352 + ceil32(return_data.size) + (32 * mem[_12352 + mem[_12352]]) + 32
                                                            mem[_12352 + ceil32(return_data.size)] = _12676
                                                            require return_data.size >= _12514 + (32 * _12676) + 32
                                                            t = _12352 + _12514 + 32
                                                            u = _12352 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12676:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14890 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14890] < _3436:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14890] - _3436):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14890] - _3436):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14890] - _3436
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3490 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3490 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6545 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6653 = mem[_6545]
                                                                require mem[_6545] <= test266151307()
                                                                require _6545 + return_data.size > _6545 + mem[_6545] + 31
                                                                _6761 = mem[_6545 + mem[_6545]]
                                                                if mem[_6545 + mem[_6545]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6545 + mem[_6545]]) + 32 < 0 or _6545 + ceil32(return_data.size) + (32 * mem[_6545 + mem[_6545]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6545 + ceil32(return_data.size) + (32 * mem[_6545 + mem[_6545]]) + 32
                                                                mem[_6545 + ceil32(return_data.size)] = _6761
                                                                require return_data.size >= _6653 + (32 * _6761) + 32
                                                                t = _6545 + _6653 + 32
                                                                u = _6545 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6761:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6761 < 1:
                                                                    revert with 0, 17
                                                                if _6761 - 1 >= _6761:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6761 - 1) + _6545 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6761 - 1) + _6545 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6761 - 1) + _6545 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9893 = mem[_3490]
                                                                mem[mem[64] + 164] = mem[_3490]
                                                                s = 0
                                                                t = _3490 + 32
                                                                u = mem[64] + 196
                                                                while s < _9893:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9893) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12354 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12516 = mem[_12354]
                                                                require mem[_12354] <= test266151307()
                                                                require _12354 + return_data.size > _12354 + mem[_12354] + 31
                                                                _12678 = mem[_12354 + mem[_12354]]
                                                                if mem[_12354 + mem[_12354]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12354 + mem[_12354]]) + 32 < 0 or _12354 + ceil32(return_data.size) + (32 * mem[_12354 + mem[_12354]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12354 + ceil32(return_data.size) + (32 * mem[_12354 + mem[_12354]]) + 32
                                                                mem[_12354 + ceil32(return_data.size)] = _12678
                                                                require return_data.size >= _12516 + (32 * _12678) + 32
                                                                t = _12354 + _12516 + 32
                                                                u = _12354 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12678:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14892 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14892] < _3436:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14892] - _3436):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14892] - _3436):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14892] - _3436
                                                            else:
                                                                mem[_3490 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3490 + 64
                                                                t = sha3(11) + 1
                                                                while _3490 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3490 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12353 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12515 = mem[_12353]
                                                                require mem[_12353] <= test266151307()
                                                                require _12353 + return_data.size > _12353 + mem[_12353] + 31
                                                                _12677 = mem[_12353 + mem[_12353]]
                                                                if mem[_12353 + mem[_12353]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12353 + mem[_12353]]) + 32 < 0 or _12353 + ceil32(return_data.size) + (32 * mem[_12353 + mem[_12353]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12353 + ceil32(return_data.size) + (32 * mem[_12353 + mem[_12353]]) + 32
                                                                mem[_12353 + ceil32(return_data.size)] = _12677
                                                                require return_data.size >= _12515 + (32 * _12677) + 32
                                                                t = _12353 + _12515 + 32
                                                                u = _12353 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12677:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12677 < 1:
                                                                    revert with 0, 17
                                                                if _12677 - 1 >= _12677:
                                                                    revert with 0, 50
                                                                if mem[(32 * _12677 - 1) + _12353 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12677 - 1) + _12353 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _12677 - 1) + _12353 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15208 = mem[_3490]
                                                                mem[mem[64] + 164] = mem[_3490]
                                                                s = 0
                                                                t = _3490 + 32
                                                                u = mem[64] + 196
                                                                while s < _15208:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15208) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15964 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16018 = mem[_15964]
                                                                require mem[_15964] <= test266151307()
                                                                require _15964 + return_data.size > _15964 + mem[_15964] + 31
                                                                _16072 = mem[_15964 + mem[_15964]]
                                                                if mem[_15964 + mem[_15964]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15964 + mem[_15964]]) + 32 < 0 or _15964 + ceil32(return_data.size) + (32 * mem[_15964 + mem[_15964]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15964 + ceil32(return_data.size) + (32 * mem[_15964 + mem[_15964]]) + 32
                                                                mem[_15964 + ceil32(return_data.size)] = _16072
                                                                require return_data.size >= _16018 + (32 * _16072) + 32
                                                                t = _15964 + _16018 + 32
                                                                u = _15964 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16072:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16612 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16612] < _3436:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16612] - _3436):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16612] - _3436):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16612] - _3436
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3387 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3441 = mem[_3387]
                                                            _3495 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3495] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3495 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6554 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6662 = mem[_6554]
                                                                require mem[_6554] <= test266151307()
                                                                require _6554 + return_data.size > _6554 + mem[_6554] + 31
                                                                _6770 = mem[_6554 + mem[_6554]]
                                                                if mem[_6554 + mem[_6554]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6554 + mem[_6554]]) + 32 < 0 or _6554 + ceil32(return_data.size) + (32 * mem[_6554 + mem[_6554]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6554 + ceil32(return_data.size) + (32 * mem[_6554 + mem[_6554]]) + 32
                                                                mem[_6554 + ceil32(return_data.size)] = _6770
                                                                require return_data.size >= _6662 + (32 * _6770) + 32
                                                                t = _6554 + _6662 + 32
                                                                u = _6554 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6770:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6770 < 1:
                                                                    revert with 0, 17
                                                                if _6770 - 1 >= _6770:
                                                                    revert with 0, 50
                                                                _9397 = mem[(32 * _6770 - 1) + _6554 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6770 - 1) + _6554 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6770 - 1) + _6554 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9397 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9902 = mem[_3495]
                                                                mem[mem[64] + 164] = mem[_3495]
                                                                s = 0
                                                                t = _3495 + 32
                                                                u = mem[64] + 196
                                                                while s < _9902:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9397 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9902) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12367 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12529 = mem[_12367]
                                                                require mem[_12367] <= test266151307()
                                                                require _12367 + return_data.size > _12367 + mem[_12367] + 31
                                                                _12691 = mem[_12367 + mem[_12367]]
                                                                if mem[_12367 + mem[_12367]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12367 + mem[_12367]]) + 32 < 0 or _12367 + ceil32(return_data.size) + (32 * mem[_12367 + mem[_12367]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12367 + ceil32(return_data.size) + (32 * mem[_12367 + mem[_12367]]) + 32
                                                                mem[_12367 + ceil32(return_data.size)] = _12691
                                                                require return_data.size >= _12529 + (32 * _12691) + 32
                                                                t = _12367 + _12529 + 32
                                                                u = _12367 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12691:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14905 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14905] < _3441:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14905] - _3441):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14905] - _3441):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14905] - _3441
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3495 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3495 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6555 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6663 = mem[_6555]
                                                                    require mem[_6555] <= test266151307()
                                                                    require _6555 + return_data.size > _6555 + mem[_6555] + 31
                                                                    _6771 = mem[_6555 + mem[_6555]]
                                                                    if mem[_6555 + mem[_6555]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6555 + mem[_6555]]) + 32 < 0 or _6555 + ceil32(return_data.size) + (32 * mem[_6555 + mem[_6555]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6555 + ceil32(return_data.size) + (32 * mem[_6555 + mem[_6555]]) + 32
                                                                    mem[_6555 + ceil32(return_data.size)] = _6771
                                                                    require return_data.size >= _6663 + (32 * _6771) + 32
                                                                    t = _6555 + _6663 + 32
                                                                    u = _6555 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6771:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6771 < 1:
                                                                        revert with 0, 17
                                                                    if _6771 - 1 >= _6771:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6771 - 1) + _6555 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6771 - 1) + _6555 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6771 - 1) + _6555 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9903 = mem[_3495]
                                                                    mem[mem[64] + 164] = mem[_3495]
                                                                    s = 0
                                                                    t = _3495 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9903:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9903) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12369 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12531 = mem[_12369]
                                                                    require mem[_12369] <= test266151307()
                                                                    require _12369 + return_data.size > _12369 + mem[_12369] + 31
                                                                    _12693 = mem[_12369 + mem[_12369]]
                                                                    if mem[_12369 + mem[_12369]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12369 + mem[_12369]]) + 32 < 0 or _12369 + ceil32(return_data.size) + (32 * mem[_12369 + mem[_12369]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12369 + ceil32(return_data.size) + (32 * mem[_12369 + mem[_12369]]) + 32
                                                                    mem[_12369 + ceil32(return_data.size)] = _12693
                                                                    require return_data.size >= _12531 + (32 * _12693) + 32
                                                                    t = _12369 + _12531 + 32
                                                                    u = _12369 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12693:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14907 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14907] < _3441:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14907] - _3441):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14907] - _3441):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14907] - _3441
                                                                else:
                                                                    mem[_3495 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3495 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3495 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3495 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12368 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12530 = mem[_12368]
                                                                    require mem[_12368] <= test266151307()
                                                                    require _12368 + return_data.size > _12368 + mem[_12368] + 31
                                                                    _12692 = mem[_12368 + mem[_12368]]
                                                                    if mem[_12368 + mem[_12368]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12368 + mem[_12368]]) + 32 < 0 or _12368 + ceil32(return_data.size) + (32 * mem[_12368 + mem[_12368]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12368 + ceil32(return_data.size) + (32 * mem[_12368 + mem[_12368]]) + 32
                                                                    mem[_12368 + ceil32(return_data.size)] = _12692
                                                                    require return_data.size >= _12530 + (32 * _12692) + 32
                                                                    t = _12368 + _12530 + 32
                                                                    u = _12368 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12692:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12692 < 1:
                                                                        revert with 0, 17
                                                                    if _12692 - 1 >= _12692:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12692 - 1) + _12368 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12692 - 1) + _12368 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12692 - 1) + _12368 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15213 = mem[_3495]
                                                                    mem[mem[64] + 164] = mem[_3495]
                                                                    s = 0
                                                                    t = _3495 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15213:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15213) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15969 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _16023 = mem[_15969]
                                                                    require mem[_15969] <= test266151307()
                                                                    require _15969 + return_data.size > _15969 + mem[_15969] + 31
                                                                    _16077 = mem[_15969 + mem[_15969]]
                                                                    if mem[_15969 + mem[_15969]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15969 + mem[_15969]]) + 32 < 0 or _15969 + ceil32(return_data.size) + (32 * mem[_15969 + mem[_15969]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15969 + ceil32(return_data.size) + (32 * mem[_15969 + mem[_15969]]) + 32
                                                                    mem[_15969 + ceil32(return_data.size)] = _16077
                                                                    require return_data.size >= _16023 + (32 * _16077) + 32
                                                                    t = _15969 + _16023 + 32
                                                                    u = _15969 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16077:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16617 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16617] < _3441:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16617] - _3441):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16617] - _3441):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16617] - _3441
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3386 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3440 = mem[_3386]
                                                                _3494 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3494] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3494 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6552 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6660 = mem[_6552]
                                                                    require mem[_6552] <= test266151307()
                                                                    require _6552 + return_data.size > _6552 + mem[_6552] + 31
                                                                    _6768 = mem[_6552 + mem[_6552]]
                                                                    if mem[_6552 + mem[_6552]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6552 + mem[_6552]]) + 32 < 0 or _6552 + ceil32(return_data.size) + (32 * mem[_6552 + mem[_6552]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6552 + ceil32(return_data.size) + (32 * mem[_6552 + mem[_6552]]) + 32
                                                                    mem[_6552 + ceil32(return_data.size)] = _6768
                                                                    require return_data.size >= _6660 + (32 * _6768) + 32
                                                                    t = _6552 + _6660 + 32
                                                                    u = _6552 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6768:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6768 < 1:
                                                                        revert with 0, 17
                                                                    if _6768 - 1 >= _6768:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6768 - 1) + _6552 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6768 - 1) + _6552 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6768 - 1) + _6552 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9900 = mem[_3494]
                                                                    mem[mem[64] + 164] = mem[_3494]
                                                                    s = 0
                                                                    t = _3494 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9900:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9900) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12364 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12526 = mem[_12364]
                                                                    require mem[_12364] <= test266151307()
                                                                    require _12364 + return_data.size > _12364 + mem[_12364] + 31
                                                                    _12688 = mem[_12364 + mem[_12364]]
                                                                    if mem[_12364 + mem[_12364]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12364 + mem[_12364]]) + 32 < 0 or _12364 + ceil32(return_data.size) + (32 * mem[_12364 + mem[_12364]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12364 + ceil32(return_data.size) + (32 * mem[_12364 + mem[_12364]]) + 32
                                                                    mem[_12364 + ceil32(return_data.size)] = _12688
                                                                    require return_data.size >= _12526 + (32 * _12688) + 32
                                                                    t = _12364 + _12526 + 32
                                                                    u = _12364 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12688:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14902 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14902] < _3440:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14902] - _3440):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14902] - _3440):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14902] - _3440
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3494 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3494 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6553 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6661 = mem[_6553]
                                                                        require mem[_6553] <= test266151307()
                                                                        require _6553 + return_data.size > _6553 + mem[_6553] + 31
                                                                        _6769 = mem[_6553 + mem[_6553]]
                                                                        if mem[_6553 + mem[_6553]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6553 + mem[_6553]]) + 32 < 0 or _6553 + ceil32(return_data.size) + (32 * mem[_6553 + mem[_6553]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6553 + ceil32(return_data.size) + (32 * mem[_6553 + mem[_6553]]) + 32
                                                                        mem[_6553 + ceil32(return_data.size)] = _6769
                                                                        require return_data.size >= _6661 + (32 * _6769) + 32
                                                                        t = _6553 + _6661 + 32
                                                                        u = _6553 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6769:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6769 < 1:
                                                                            revert with 0, 17
                                                                        if _6769 - 1 >= _6769:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6769 - 1) + _6553 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6769 - 1) + _6553 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6769 - 1) + _6553 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9901 = mem[_3494]
                                                                        mem[mem[64] + 164] = mem[_3494]
                                                                        s = 0
                                                                        t = _3494 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9901:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9901) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12366 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12528 = mem[_12366]
                                                                        require mem[_12366] <= test266151307()
                                                                        require _12366 + return_data.size > _12366 + mem[_12366] + 31
                                                                        _12690 = mem[_12366 + mem[_12366]]
                                                                        if mem[_12366 + mem[_12366]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12366 + mem[_12366]]) + 32 < 0 or _12366 + ceil32(return_data.size) + (32 * mem[_12366 + mem[_12366]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12366 + ceil32(return_data.size) + (32 * mem[_12366 + mem[_12366]]) + 32
                                                                        mem[_12366 + ceil32(return_data.size)] = _12690
                                                                        require return_data.size >= _12528 + (32 * _12690) + 32
                                                                        t = _12366 + _12528 + 32
                                                                        u = _12366 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12690:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14904 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14904] < _3440:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14904] - _3440):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14904] - _3440):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14904] - _3440
                                                                    else:
                                                                        mem[_3494 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3494 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3494 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3494 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12365 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12527 = mem[_12365]
                                                                        require mem[_12365] <= test266151307()
                                                                        require _12365 + return_data.size > _12365 + mem[_12365] + 31
                                                                        _12689 = mem[_12365 + mem[_12365]]
                                                                        if mem[_12365 + mem[_12365]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12365 + mem[_12365]]) + 32 < 0 or _12365 + ceil32(return_data.size) + (32 * mem[_12365 + mem[_12365]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12365 + ceil32(return_data.size) + (32 * mem[_12365 + mem[_12365]]) + 32
                                                                        mem[_12365 + ceil32(return_data.size)] = _12689
                                                                        require return_data.size >= _12527 + (32 * _12689) + 32
                                                                        t = _12365 + _12527 + 32
                                                                        u = _12365 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12689:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12689 < 1:
                                                                            revert with 0, 17
                                                                        if _12689 - 1 >= _12689:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _12689 - 1) + _12365 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12689 - 1) + _12365 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _12689 - 1) + _12365 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15212 = mem[_3494]
                                                                        mem[mem[64] + 164] = mem[_3494]
                                                                        s = 0
                                                                        t = _3494 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15212:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15212) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15968 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16022 = mem[_15968]
                                                                        require mem[_15968] <= test266151307()
                                                                        require _15968 + return_data.size > _15968 + mem[_15968] + 31
                                                                        _16076 = mem[_15968 + mem[_15968]]
                                                                        if mem[_15968 + mem[_15968]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15968 + mem[_15968]]) + 32 < 0 or _15968 + ceil32(return_data.size) + (32 * mem[_15968 + mem[_15968]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15968 + ceil32(return_data.size) + (32 * mem[_15968 + mem[_15968]]) + 32
                                                                        mem[_15968 + ceil32(return_data.size)] = _16076
                                                                        require return_data.size >= _16022 + (32 * _16076) + 32
                                                                        t = _15968 + _16022 + 32
                                                                        u = _15968 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16076:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16616 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16616] < _3440:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16616] - _3440):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16616] - _3440):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16616] - _3440
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if block.number <= bonusEndBlock:
                                            if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3385 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3439 = mem[_3385]
                                                                    _3493 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3493] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3493 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6550 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6658 = mem[_6550]
                                                                        require mem[_6550] <= test266151307()
                                                                        require _6550 + return_data.size > _6550 + mem[_6550] + 31
                                                                        _6766 = mem[_6550 + mem[_6550]]
                                                                        if mem[_6550 + mem[_6550]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6550 + mem[_6550]]) + 32 < 0 or _6550 + ceil32(return_data.size) + (32 * mem[_6550 + mem[_6550]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6550 + ceil32(return_data.size) + (32 * mem[_6550 + mem[_6550]]) + 32
                                                                        mem[_6550 + ceil32(return_data.size)] = _6766
                                                                        require return_data.size >= _6658 + (32 * _6766) + 32
                                                                        t = _6550 + _6658 + 32
                                                                        u = _6550 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6766:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6766 < 1:
                                                                            revert with 0, 17
                                                                        if _6766 - 1 >= _6766:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _6766 - 1) + _6550 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6766 - 1) + _6550 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _6766 - 1) + _6550 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9898 = mem[_3493]
                                                                        mem[mem[64] + 164] = mem[_3493]
                                                                        s = 0
                                                                        t = _3493 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9898:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9898) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12361 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12523 = mem[_12361]
                                                                        require mem[_12361] <= test266151307()
                                                                        require _12361 + return_data.size > _12361 + mem[_12361] + 31
                                                                        _12685 = mem[_12361 + mem[_12361]]
                                                                        if mem[_12361 + mem[_12361]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12361 + mem[_12361]]) + 32 < 0 or _12361 + ceil32(return_data.size) + (32 * mem[_12361 + mem[_12361]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12361 + ceil32(return_data.size) + (32 * mem[_12361 + mem[_12361]]) + 32
                                                                        mem[_12361 + ceil32(return_data.size)] = _12685
                                                                        require return_data.size >= _12523 + (32 * _12685) + 32
                                                                        t = _12361 + _12523 + 32
                                                                        u = _12361 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12685:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14899 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14899] < _3439:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14899] - _3439):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14899] - _3439):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14899] - _3439
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3493 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3493 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6551 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6659 = mem[_6551]
                                                                            require mem[_6551] <= test266151307()
                                                                            require _6551 + return_data.size > _6551 + mem[_6551] + 31
                                                                            _6767 = mem[_6551 + mem[_6551]]
                                                                            if mem[_6551 + mem[_6551]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6551 + mem[_6551]]) + 32 < 0 or _6551 + ceil32(return_data.size) + (32 * mem[_6551 + mem[_6551]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6551 + ceil32(return_data.size) + (32 * mem[_6551 + mem[_6551]]) + 32
                                                                            mem[_6551 + ceil32(return_data.size)] = _6767
                                                                            require return_data.size >= _6659 + (32 * _6767) + 32
                                                                            t = _6551 + _6659 + 32
                                                                            u = _6551 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6767:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6767 < 1:
                                                                                revert with 0, 17
                                                                            if _6767 - 1 >= _6767:
                                                                                revert with 0, 50
                                                                            _9393 = mem[(32 * _6767 - 1) + _6551 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _6767 - 1) + _6551 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6767 - 1) + _6551 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _9393 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9899 = mem[_3493]
                                                                            mem[mem[64] + 164] = mem[_3493]
                                                                            s = 0
                                                                            t = _3493 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9899:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9393 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9899) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12363 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12525 = mem[_12363]
                                                                            require mem[_12363] <= test266151307()
                                                                            require _12363 + return_data.size > _12363 + mem[_12363] + 31
                                                                            _12687 = mem[_12363 + mem[_12363]]
                                                                            if mem[_12363 + mem[_12363]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12363 + mem[_12363]]) + 32 < 0 or _12363 + ceil32(return_data.size) + (32 * mem[_12363 + mem[_12363]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12363 + ceil32(return_data.size) + (32 * mem[_12363 + mem[_12363]]) + 32
                                                                            mem[_12363 + ceil32(return_data.size)] = _12687
                                                                            require return_data.size >= _12525 + (32 * _12687) + 32
                                                                            t = _12363 + _12525 + 32
                                                                            u = _12363 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12687:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14901 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14901] < _3439:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14901] - _3439):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14901] - _3439):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14901] - _3439
                                                                        else:
                                                                            mem[_3493 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3493 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3493 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3493 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12362 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12524 = mem[_12362]
                                                                            require mem[_12362] <= test266151307()
                                                                            require _12362 + return_data.size > _12362 + mem[_12362] + 31
                                                                            _12686 = mem[_12362 + mem[_12362]]
                                                                            if mem[_12362 + mem[_12362]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12362 + mem[_12362]]) + 32 < 0 or _12362 + ceil32(return_data.size) + (32 * mem[_12362 + mem[_12362]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12362 + ceil32(return_data.size) + (32 * mem[_12362 + mem[_12362]]) + 32
                                                                            mem[_12362 + ceil32(return_data.size)] = _12686
                                                                            require return_data.size >= _12524 + (32 * _12686) + 32
                                                                            t = _12362 + _12524 + 32
                                                                            u = _12362 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12686:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12686 < 1:
                                                                                revert with 0, 17
                                                                            if _12686 - 1 >= _12686:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _12686 - 1) + _12362 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12686 - 1) + _12362 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _12686 - 1) + _12362 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15211 = mem[_3493]
                                                                            mem[mem[64] + 164] = mem[_3493]
                                                                            s = 0
                                                                            t = _3493 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15211:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15211) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15967 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16021 = mem[_15967]
                                                                            require mem[_15967] <= test266151307()
                                                                            require _15967 + return_data.size > _15967 + mem[_15967] + 31
                                                                            _16075 = mem[_15967 + mem[_15967]]
                                                                            if mem[_15967 + mem[_15967]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15967 + mem[_15967]]) + 32 < 0 or _15967 + ceil32(return_data.size) + (32 * mem[_15967 + mem[_15967]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15967 + ceil32(return_data.size) + (32 * mem[_15967 + mem[_15967]]) + 32
                                                                            mem[_15967 + ceil32(return_data.size)] = _16075
                                                                            require return_data.size >= _16021 + (32 * _16075) + 32
                                                                            t = _15967 + _16021 + 32
                                                                            u = _15967 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16075:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16615 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16615] < _3439:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16615] - _3439):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16615] - _3439):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16615] - _3439
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                        else:
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                                if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                                    revert with 0, 17
                                                if False and PRECISION_FACTOR > 0:
                                                    revert with 0, 17
                                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                    revert with 0, 18
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                    revert with 0, 17
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                                mem[32] = 26
                                                if arg2 >= sub_8e6f4fb7.length:
                                                    revert with 0, 50
                                                mem[0] = 25
                                                idx = 0
                                                while idx < userStakes[msg.sender].field_0:
                                                    mem[0] = sha3(msg.sender, 26)
                                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                                        if userStakes[msg.sender][idx].field_256:
                                                            if not arg1:
                                                                if arg1 < arg1:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 < 0:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 > -1:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                    revert with 0, 17
                                                                if totalStaked < 0:
                                                                    revert with 0, 17
                                                                if totalStaked > -1:
                                                                    revert with 0, 17
                                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                                stor1.length = 1
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = 0
                                                                else:
                                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                                            else:
                                                                if sub_6e707b73Address == stakingTokenAddress:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    else:
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _3384 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _3438 = mem[_3384]
                                                                        _3492 = mem[64]
                                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                        mem[_3492] = sub_c1e22a65.length
                                                                        if not sub_c1e22a65.length:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3492 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6548 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6656 = mem[_6548]
                                                                            require mem[_6548] <= test266151307()
                                                                            require _6548 + return_data.size > _6548 + mem[_6548] + 31
                                                                            _6764 = mem[_6548 + mem[_6548]]
                                                                            if mem[_6548 + mem[_6548]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6548 + mem[_6548]]) + 32 < 0 or _6548 + ceil32(return_data.size) + (32 * mem[_6548 + mem[_6548]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6548 + ceil32(return_data.size) + (32 * mem[_6548 + mem[_6548]]) + 32
                                                                            mem[_6548 + ceil32(return_data.size)] = _6764
                                                                            require return_data.size >= _6656 + (32 * _6764) + 32
                                                                            t = _6548 + _6656 + 32
                                                                            u = _6548 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6764:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6764 < 1:
                                                                                revert with 0, 17
                                                                            if _6764 - 1 >= _6764:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6764 - 1) + _6548 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6764 - 1) + _6548 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6764 - 1) + _6548 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9896 = mem[_3492]
                                                                            mem[mem[64] + 164] = mem[_3492]
                                                                            s = 0
                                                                            t = _3492 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9896:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9896) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12358 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12520 = mem[_12358]
                                                                            require mem[_12358] <= test266151307()
                                                                            require _12358 + return_data.size > _12358 + mem[_12358] + 31
                                                                            _12682 = mem[_12358 + mem[_12358]]
                                                                            if mem[_12358 + mem[_12358]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12358 + mem[_12358]]) + 32 < 0 or _12358 + ceil32(return_data.size) + (32 * mem[_12358 + mem[_12358]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12358 + ceil32(return_data.size) + (32 * mem[_12358 + mem[_12358]]) + 32
                                                                            mem[_12358 + ceil32(return_data.size)] = _12682
                                                                            require return_data.size >= _12520 + (32 * _12682) + 32
                                                                            t = _12358 + _12520 + 32
                                                                            u = _12358 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12682:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14896 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14896] < _3438:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14896] - _3438):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14896] - _3438):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14896] - _3438
                                                                        else:
                                                                            mem[0] = 11
                                                                            mem[_3492 + 32] = address(sub_c1e22a65.field_0)
                                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3492 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _6549 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _6657 = mem[_6549]
                                                                                require mem[_6549] <= test266151307()
                                                                                require _6549 + return_data.size > _6549 + mem[_6549] + 31
                                                                                _6765 = mem[_6549 + mem[_6549]]
                                                                                if mem[_6549 + mem[_6549]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_6549 + mem[_6549]]) + 32 < 0 or _6549 + ceil32(return_data.size) + (32 * mem[_6549 + mem[_6549]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _6549 + ceil32(return_data.size) + (32 * mem[_6549 + mem[_6549]]) + 32
                                                                                mem[_6549 + ceil32(return_data.size)] = _6765
                                                                                require return_data.size >= _6657 + (32 * _6765) + 32
                                                                                t = _6549 + _6657 + 32
                                                                                u = _6549 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _6765:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _6765 < 1:
                                                                                    revert with 0, 17
                                                                                if _6765 - 1 >= _6765:
                                                                                    revert with 0, 50
                                                                                _9390 = mem[(32 * _6765 - 1) + _6549 + ceil32(return_data.size) + 32]
                                                                                if mem[(32 * _6765 - 1) + _6549 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6765 - 1) + _6549 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = _9390 * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _9897 = mem[_3492]
                                                                                mem[mem[64] + 164] = mem[_3492]
                                                                                s = 0
                                                                                t = _3492 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _9897:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[mem[64] + 100] = this.address
                                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                     gas gas_remaining wei
                                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9390 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9897) + 32]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12360 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12522 = mem[_12360]
                                                                                require mem[_12360] <= test266151307()
                                                                                require _12360 + return_data.size > _12360 + mem[_12360] + 31
                                                                                _12684 = mem[_12360 + mem[_12360]]
                                                                                if mem[_12360 + mem[_12360]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12360 + mem[_12360]]) + 32 < 0 or _12360 + ceil32(return_data.size) + (32 * mem[_12360 + mem[_12360]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12360 + ceil32(return_data.size) + (32 * mem[_12360 + mem[_12360]]) + 32
                                                                                mem[_12360 + ceil32(return_data.size)] = _12684
                                                                                require return_data.size >= _12522 + (32 * _12684) + 32
                                                                                t = _12360 + _12522 + 32
                                                                                u = _12360 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12684:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _14898 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_14898] < _3438:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_14898] - _3438):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14898] - _3438):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14898] - _3438
                                                                            else:
                                                                                mem[_3492 + 64] = address(sub_c1e22a65.field_256)
                                                                                s = _3492 + 64
                                                                                t = sha3(11) + 1
                                                                                while _3492 + (32 * sub_c1e22a65.length) > s:
                                                                                    mem[s + 32] = stor1[t]
                                                                                    s = s + 32
                                                                                    t = t + 1
                                                                                    continue 
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3492 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12359 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12521 = mem[_12359]
                                                                                require mem[_12359] <= test266151307()
                                                                                require _12359 + return_data.size > _12359 + mem[_12359] + 31
                                                                                _12683 = mem[_12359 + mem[_12359]]
                                                                                if mem[_12359 + mem[_12359]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12359 + mem[_12359]]) + 32 < 0 or _12359 + ceil32(return_data.size) + (32 * mem[_12359 + mem[_12359]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12359 + ceil32(return_data.size) + (32 * mem[_12359 + mem[_12359]]) + 32
                                                                                mem[_12359 + ceil32(return_data.size)] = _12683
                                                                                require return_data.size >= _12521 + (32 * _12683) + 32
                                                                                t = _12359 + _12521 + 32
                                                                                u = _12359 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12683:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _12683 < 1:
                                                                                    revert with 0, 17
                                                                                if _12683 - 1 >= _12683:
                                                                                    revert with 0, 50
                                                                                if mem[(32 * _12683 - 1) + _12359 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12683 - 1) + _12359 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = mem[(32 * _12683 - 1) + _12359 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _15210 = mem[_3492]
                                                                                mem[mem[64] + 164] = mem[_3492]
                                                                                s = 0
                                                                                t = _3492 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _15210:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[mem[64] + 100] = this.address
                                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                     gas gas_remaining wei
                                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15210) + 32]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _15966 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _16020 = mem[_15966]
                                                                                require mem[_15966] <= test266151307()
                                                                                require _15966 + return_data.size > _15966 + mem[_15966] + 31
                                                                                _16074 = mem[_15966 + mem[_15966]]
                                                                                if mem[_15966 + mem[_15966]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_15966 + mem[_15966]]) + 32 < 0 or _15966 + ceil32(return_data.size) + (32 * mem[_15966 + mem[_15966]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _15966 + ceil32(return_data.size) + (32 * mem[_15966 + mem[_15966]]) + 32
                                                                                mem[_15966 + ceil32(return_data.size)] = _16074
                                                                                require return_data.size >= _16020 + (32 * _16074) + 32
                                                                                t = _15966 + _16020 + 32
                                                                                u = _15966 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _16074:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _16614 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_16614] < _3438:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_16614] - _3438):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16614] - _3438):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16614] - _3438
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                    if idx == -1:
                                                        revert with 0, 17
                                                    idx = idx + 1
                                                    continue 
                                            else:
                                                if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                    revert with 0, 17
                                                if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                    revert with 0, 17
                                                if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                    revert with 0, 17
                                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                    revert with 0, 18
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                    revert with 0, 17
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                                mem[32] = 26
                                                if arg2 >= sub_8e6f4fb7.length:
                                                    revert with 0, 50
                                                mem[0] = 25
                                                idx = 0
                                                while idx < userStakes[msg.sender].field_0:
                                                    mem[0] = sha3(msg.sender, 26)
                                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                                        if userStakes[msg.sender][idx].field_256:
                                                            if not arg1:
                                                                if arg1 < arg1:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 < 0:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 > -1:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                    revert with 0, 17
                                                                if totalStaked < 0:
                                                                    revert with 0, 17
                                                                if totalStaked > -1:
                                                                    revert with 0, 17
                                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                                stor1.length = 1
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = 0
                                                                else:
                                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                                            else:
                                                                if sub_6e707b73Address == stakingTokenAddress:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    else:
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _3383 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _3437 = mem[_3383]
                                                                        _3491 = mem[64]
                                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                        mem[_3491] = sub_c1e22a65.length
                                                                        if not sub_c1e22a65.length:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3491 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6546 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6654 = mem[_6546]
                                                                            require mem[_6546] <= test266151307()
                                                                            require _6546 + return_data.size > _6546 + mem[_6546] + 31
                                                                            _6762 = mem[_6546 + mem[_6546]]
                                                                            if mem[_6546 + mem[_6546]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6546 + mem[_6546]]) + 32 < 0 or _6546 + ceil32(return_data.size) + (32 * mem[_6546 + mem[_6546]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6546 + ceil32(return_data.size) + (32 * mem[_6546 + mem[_6546]]) + 32
                                                                            mem[_6546 + ceil32(return_data.size)] = _6762
                                                                            require return_data.size >= _6654 + (32 * _6762) + 32
                                                                            t = _6546 + _6654 + 32
                                                                            u = _6546 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6762:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6762 < 1:
                                                                                revert with 0, 17
                                                                            if _6762 - 1 >= _6762:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6762 - 1) + _6546 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6762 - 1) + _6546 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6762 - 1) + _6546 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9894 = mem[_3491]
                                                                            mem[mem[64] + 164] = mem[_3491]
                                                                            s = 0
                                                                            t = _3491 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9894:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9894) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12355 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12517 = mem[_12355]
                                                                            require mem[_12355] <= test266151307()
                                                                            require _12355 + return_data.size > _12355 + mem[_12355] + 31
                                                                            _12679 = mem[_12355 + mem[_12355]]
                                                                            if mem[_12355 + mem[_12355]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12355 + mem[_12355]]) + 32 < 0 or _12355 + ceil32(return_data.size) + (32 * mem[_12355 + mem[_12355]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12355 + ceil32(return_data.size) + (32 * mem[_12355 + mem[_12355]]) + 32
                                                                            mem[_12355 + ceil32(return_data.size)] = _12679
                                                                            require return_data.size >= _12517 + (32 * _12679) + 32
                                                                            t = _12355 + _12517 + 32
                                                                            u = _12355 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12679:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14893 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14893] < _3437:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14893] - _3437):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14893] - _3437):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14893] - _3437
                                                                        else:
                                                                            mem[0] = 11
                                                                            mem[_3491 + 32] = address(sub_c1e22a65.field_0)
                                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3491 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _6547 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _6655 = mem[_6547]
                                                                                require mem[_6547] <= test266151307()
                                                                                require _6547 + return_data.size > _6547 + mem[_6547] + 31
                                                                                _6763 = mem[_6547 + mem[_6547]]
                                                                                if mem[_6547 + mem[_6547]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_6547 + mem[_6547]]) + 32 < 0 or _6547 + ceil32(return_data.size) + (32 * mem[_6547 + mem[_6547]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _6547 + ceil32(return_data.size) + (32 * mem[_6547 + mem[_6547]]) + 32
                                                                                mem[_6547 + ceil32(return_data.size)] = _6763
                                                                                require return_data.size >= _6655 + (32 * _6763) + 32
                                                                                t = _6547 + _6655 + 32
                                                                                u = _6547 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _6763:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _6763 < 1:
                                                                                    revert with 0, 17
                                                                                if _6763 - 1 >= _6763:
                                                                                    revert with 0, 50
                                                                                if mem[(32 * _6763 - 1) + _6547 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6763 - 1) + _6547 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = mem[(32 * _6763 - 1) + _6547 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _9895 = mem[_3491]
                                                                                mem[mem[64] + 164] = mem[_3491]
                                                                                s = 0
                                                                                t = _3491 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _9895:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[mem[64] + 100] = this.address
                                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                     gas gas_remaining wei
                                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9895) + 32]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12357 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12519 = mem[_12357]
                                                                                require mem[_12357] <= test266151307()
                                                                                require _12357 + return_data.size > _12357 + mem[_12357] + 31
                                                                                _12681 = mem[_12357 + mem[_12357]]
                                                                                if mem[_12357 + mem[_12357]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12357 + mem[_12357]]) + 32 < 0 or _12357 + ceil32(return_data.size) + (32 * mem[_12357 + mem[_12357]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12357 + ceil32(return_data.size) + (32 * mem[_12357 + mem[_12357]]) + 32
                                                                                mem[_12357 + ceil32(return_data.size)] = _12681
                                                                                require return_data.size >= _12519 + (32 * _12681) + 32
                                                                                t = _12357 + _12519 + 32
                                                                                u = _12357 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12681:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _14895 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_14895] < _3437:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_14895] - _3437):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14895] - _3437):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14895] - _3437
                                                                            else:
                                                                                mem[_3491 + 64] = address(sub_c1e22a65.field_256)
                                                                                s = _3491 + 64
                                                                                t = sha3(11) + 1
                                                                                while _3491 + (32 * sub_c1e22a65.length) > s:
                                                                                    mem[s + 32] = stor1[t]
                                                                                    s = s + 32
                                                                                    t = t + 1
                                                                                    continue 
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3491 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12356 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12518 = mem[_12356]
                                                                                require mem[_12356] <= test266151307()
                                                                                require _12356 + return_data.size > _12356 + mem[_12356] + 31
                                                                                _12680 = mem[_12356 + mem[_12356]]
                                                                                if mem[_12356 + mem[_12356]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12356 + mem[_12356]]) + 32 < 0 or _12356 + ceil32(return_data.size) + (32 * mem[_12356 + mem[_12356]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12356 + ceil32(return_data.size) + (32 * mem[_12356 + mem[_12356]]) + 32
                                                                                mem[_12356 + ceil32(return_data.size)] = _12680
                                                                                require return_data.size >= _12518 + (32 * _12680) + 32
                                                                                t = _12356 + _12518 + 32
                                                                                u = _12356 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12680:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _12680 < 1:
                                                                                    revert with 0, 17
                                                                                if _12680 - 1 >= _12680:
                                                                                    revert with 0, 50
                                                                                _14993 = mem[(32 * _12680 - 1) + _12356 + ceil32(return_data.size) + 32]
                                                                                if mem[(32 * _12680 - 1) + _12356 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12680 - 1) + _12356 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = _14993 * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _15209 = mem[_3491]
                                                                                mem[mem[64] + 164] = mem[_3491]
                                                                                s = 0
                                                                                t = _3491 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _15209:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[mem[64] + 100] = this.address
                                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                     gas gas_remaining wei
                                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14993 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15209) + 32]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _15965 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _16019 = mem[_15965]
                                                                                require mem[_15965] <= test266151307()
                                                                                require _15965 + return_data.size > _15965 + mem[_15965] + 31
                                                                                _16073 = mem[_15965 + mem[_15965]]
                                                                                if mem[_15965 + mem[_15965]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_15965 + mem[_15965]]) + 32 < 0 or _15965 + ceil32(return_data.size) + (32 * mem[_15965 + mem[_15965]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _15965 + ceil32(return_data.size) + (32 * mem[_15965 + mem[_15965]]) + 32
                                                                                mem[_15965 + ceil32(return_data.size)] = _16073
                                                                                require return_data.size >= _16019 + (32 * _16073) + 32
                                                                                t = _15965 + _16019 + 32
                                                                                u = _15965 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _16073:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _16613 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_16613] < _3437:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_16613] - _3437):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16613] - _3437):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16613] - _3437
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                    if idx == -1:
                                                        revert with 0, 17
                                                    idx = idx + 1
                                                    continue 
                        else:
                            if 0 < stor23:
                                revert with 0, 17
                            if -stor23 and sub_88bbb0c1 > -1 / -stor23:
                                revert with 0, 17
                            if not ext_call.return_data[0]:
                                revert with 0, 18
                            if sub_92b46e5b > !(-1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]):
                                revert with 0, 17
                            sub_92b46e5b += -1 * stor23 * sub_88bbb0c1 / ext_call.return_data[0]
                            stor23 = 0
                            if arg2 >= sub_8e6f4fb7.length:
                                revert with 0, 50
                            if block.number <= sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                mem[32] = 26
                                if arg2 >= sub_8e6f4fb7.length:
                                    revert with 0, 50
                                mem[0] = 25
                                idx = 0
                                while idx < userStakes[msg.sender].field_0:
                                    mem[0] = sha3(msg.sender, 26)
                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                        if userStakes[msg.sender][idx].field_256:
                                            if not arg1:
                                                if arg1 < arg1:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 < 0:
                                                    revert with 0, 17
                                                if userStaked[msg.sender].field_0 > -1:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                    revert with 0, 17
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                    revert with 0, 17
                                                if totalStaked < 0:
                                                    revert with 0, 17
                                                if totalStaked > -1:
                                                    revert with 0, 17
                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                stor1.length = 1
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                revert with 0, 17
                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                revert with 0, 17
                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = 0
                                                else:
                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                            else:
                                                if sub_6e707b73Address == stakingTokenAddress:
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                else:
                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(stakingTokenAddress)
                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args address(this.address)
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _3388 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _3442 = mem[_3388]
                                                        _3496 = mem[64]
                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                        mem[_3496] = sub_c1e22a65.length
                                                        if not sub_c1e22a65.length:
                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = 64
                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                            s = 0
                                                            t = _3496 + 32
                                                            u = mem[64] + 100
                                                            while s < sub_c1e22a65.length:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            require ext_code.size(uniRouterAddress)
                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                    gas gas_remaining wei
                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _6556 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _6664 = mem[_6556]
                                                            require mem[_6556] <= test266151307()
                                                            require _6556 + return_data.size > _6556 + mem[_6556] + 31
                                                            _6772 = mem[_6556 + mem[_6556]]
                                                            if mem[_6556 + mem[_6556]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_6556 + mem[_6556]]) + 32 < 0 or _6556 + ceil32(return_data.size) + (32 * mem[_6556 + mem[_6556]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _6556 + ceil32(return_data.size) + (32 * mem[_6556 + mem[_6556]]) + 32
                                                            mem[_6556 + ceil32(return_data.size)] = _6772
                                                            require return_data.size >= _6664 + (32 * _6772) + 32
                                                            t = _6556 + _6664 + 32
                                                            u = _6556 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _6772:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            if _6772 < 1:
                                                                revert with 0, 17
                                                            if _6772 - 1 >= _6772:
                                                                revert with 0, 50
                                                            if mem[(32 * _6772 - 1) + _6556 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6772 - 1) + _6556 + ceil32(return_data.size) + 32]:
                                                                revert with 0, 17
                                                            if block.timestamp > -601:
                                                                revert with 0, 17
                                                            _9778 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            mem[mem[64] + 36] = mem[(32 * _6772 - 1) + _6556 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                            mem[mem[64] + 68] = 160
                                                            _9904 = mem[_3496]
                                                            mem[mem[64] + 164] = mem[_3496]
                                                            s = 0
                                                            t = _3496 + 32
                                                            u = mem[64] + 196
                                                            while s < _9904:
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_9778 + 100] = this.address
                                                            mem[_9778 + 132] = block.timestamp + 600
                                                            require ext_code.size(uniRouterAddress)
                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9778 + (32 * _9904) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12370 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _12532 = mem[_12370]
                                                            require mem[_12370] <= test266151307()
                                                            require _12370 + return_data.size > _12370 + mem[_12370] + 31
                                                            _12694 = mem[_12370 + mem[_12370]]
                                                            if mem[_12370 + mem[_12370]] > test266151307():
                                                                revert with 0, 65
                                                            if (32 * mem[_12370 + mem[_12370]]) + 32 < 0 or _12370 + ceil32(return_data.size) + (32 * mem[_12370 + mem[_12370]]) + 32 > test266151307():
                                                                revert with 0, 65
                                                            mem[64] = _12370 + ceil32(return_data.size) + (32 * mem[_12370 + mem[_12370]]) + 32
                                                            mem[_12370 + ceil32(return_data.size)] = _12694
                                                            require return_data.size >= _12532 + (32 * _12694) + 32
                                                            t = _12370 + _12532 + 32
                                                            u = _12370 + ceil32(return_data.size) + 32
                                                            s = 0
                                                            while s < _12694:
                                                                mem[u] = mem[t]
                                                                t = t + 32
                                                                u = u + 32
                                                                s = s + 1
                                                                continue 
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14908 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            if mem[_14908] < _3442:
                                                                revert with 0, 17
                                                            if 0 > !(mem[_14908] - _3442):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14908] - _3442):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14908] - _3442
                                                        else:
                                                            mem[0] = 11
                                                            mem[_3496 + 32] = address(sub_c1e22a65.field_0)
                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3496 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6557 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6665 = mem[_6557]
                                                                require mem[_6557] <= test266151307()
                                                                require _6557 + return_data.size > _6557 + mem[_6557] + 31
                                                                _6773 = mem[_6557 + mem[_6557]]
                                                                if mem[_6557 + mem[_6557]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6557 + mem[_6557]]) + 32 < 0 or _6557 + ceil32(return_data.size) + (32 * mem[_6557 + mem[_6557]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6557 + ceil32(return_data.size) + (32 * mem[_6557 + mem[_6557]]) + 32
                                                                mem[_6557 + ceil32(return_data.size)] = _6773
                                                                require return_data.size >= _6665 + (32 * _6773) + 32
                                                                t = _6557 + _6665 + 32
                                                                u = _6557 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6773:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6773 < 1:
                                                                    revert with 0, 17
                                                                if _6773 - 1 >= _6773:
                                                                    revert with 0, 50
                                                                if mem[(32 * _6773 - 1) + _6557 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6773 - 1) + _6557 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _6773 - 1) + _6557 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9905 = mem[_3496]
                                                                mem[mem[64] + 164] = mem[_3496]
                                                                s = 0
                                                                t = _3496 + 32
                                                                u = mem[64] + 196
                                                                while s < _9905:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9905) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12372 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12534 = mem[_12372]
                                                                require mem[_12372] <= test266151307()
                                                                require _12372 + return_data.size > _12372 + mem[_12372] + 31
                                                                _12696 = mem[_12372 + mem[_12372]]
                                                                if mem[_12372 + mem[_12372]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12372 + mem[_12372]]) + 32 < 0 or _12372 + ceil32(return_data.size) + (32 * mem[_12372 + mem[_12372]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12372 + ceil32(return_data.size) + (32 * mem[_12372 + mem[_12372]]) + 32
                                                                mem[_12372 + ceil32(return_data.size)] = _12696
                                                                require return_data.size >= _12534 + (32 * _12696) + 32
                                                                t = _12372 + _12534 + 32
                                                                u = _12372 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12696:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14910 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14910] < _3442:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14910] - _3442):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14910] - _3442):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14910] - _3442
                                                            else:
                                                                mem[_3496 + 64] = address(sub_c1e22a65.field_256)
                                                                s = _3496 + 64
                                                                t = sha3(11) + 1
                                                                while _3496 + (32 * sub_c1e22a65.length) > s:
                                                                    mem[s + 32] = stor1[t]
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3496 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12371 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12533 = mem[_12371]
                                                                require mem[_12371] <= test266151307()
                                                                require _12371 + return_data.size > _12371 + mem[_12371] + 31
                                                                _12695 = mem[_12371 + mem[_12371]]
                                                                if mem[_12371 + mem[_12371]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12371 + mem[_12371]]) + 32 < 0 or _12371 + ceil32(return_data.size) + (32 * mem[_12371 + mem[_12371]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12371 + ceil32(return_data.size) + (32 * mem[_12371 + mem[_12371]]) + 32
                                                                mem[_12371 + ceil32(return_data.size)] = _12695
                                                                require return_data.size >= _12533 + (32 * _12695) + 32
                                                                t = _12371 + _12533 + 32
                                                                u = _12371 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12695:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _12695 < 1:
                                                                    revert with 0, 17
                                                                if _12695 - 1 >= _12695:
                                                                    revert with 0, 50
                                                                if mem[(32 * _12695 - 1) + _12371 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12695 - 1) + _12371 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                _15160 = mem[64]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = mem[(32 * _12695 - 1) + _12371 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _15214 = mem[_3496]
                                                                mem[mem[64] + 164] = mem[_3496]
                                                                s = 0
                                                                t = _3496 + 32
                                                                u = mem[64] + 196
                                                                while s < _15214:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_15160 + 100] = this.address
                                                                mem[_15160 + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _15160 + (32 * _15214) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _15970 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _16024 = mem[_15970]
                                                                require mem[_15970] <= test266151307()
                                                                require _15970 + return_data.size > _15970 + mem[_15970] + 31
                                                                _16078 = mem[_15970 + mem[_15970]]
                                                                if mem[_15970 + mem[_15970]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_15970 + mem[_15970]]) + 32 < 0 or _15970 + ceil32(return_data.size) + (32 * mem[_15970 + mem[_15970]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _15970 + ceil32(return_data.size) + (32 * mem[_15970 + mem[_15970]]) + 32
                                                                mem[_15970 + ceil32(return_data.size)] = _16078
                                                                require return_data.size >= _16024 + (32 * _16078) + 32
                                                                t = _15970 + _16024 + 32
                                                                u = _15970 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _16078:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _16618 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_16618] < _3442:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_16618] - _3442):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16618] - _3442):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16618] - _3442
                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not PRECISION_FACTOR:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                revert with 0, 17
                                            if not sub_88bbb0c1:
                                                revert with 0, 18
                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                    mem[32] = 26
                                    if arg2 >= sub_8e6f4fb7.length:
                                        revert with 0, 50
                                    mem[0] = 25
                                    idx = 0
                                    while idx < userStakes[msg.sender].field_0:
                                        mem[0] = sha3(msg.sender, 26)
                                        if userStakes[msg.sender][idx].field_0 == arg2:
                                            if userStakes[msg.sender][idx].field_256:
                                                if not arg1:
                                                    if arg1 < arg1:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 < 0:
                                                        revert with 0, 17
                                                    if userStaked[msg.sender].field_0 > -1:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                        revert with 0, 17
                                                    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                        revert with 0, 17
                                                    if totalStaked < 0:
                                                        revert with 0, 17
                                                    if totalStaked > -1:
                                                        revert with 0, 17
                                                    emit Withdraw(arg2 << 248, 0, msg.sender);
                                                    stor1.length = 1
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                    revert with 0, 17
                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                    revert with 0, 17
                                                if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                    if userStakes[msg.sender][idx].field_256 <= arg1:
                                                        if arg1 < userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = 0
                                                    else:
                                                        if userStakes[msg.sender][idx].field_256 < arg1:
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 -= arg1
                                                else:
                                                    if sub_6e707b73Address == stakingTokenAddress:
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                    else:
                                                        if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(stakingTokenAddress)
                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args address(this.address)
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _3393 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _3447 = mem[_3393]
                                                            _3501 = mem[64]
                                                            mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                            mem[_3501] = sub_c1e22a65.length
                                                            if not sub_c1e22a65.length:
                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = 64
                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                s = 0
                                                                t = _3501 + 32
                                                                u = mem[64] + 100
                                                                while s < sub_c1e22a65.length:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                require ext_code.size(uniRouterAddress)
                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                        gas gas_remaining wei
                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _6566 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _6674 = mem[_6566]
                                                                require mem[_6566] <= test266151307()
                                                                require _6566 + return_data.size > _6566 + mem[_6566] + 31
                                                                _6782 = mem[_6566 + mem[_6566]]
                                                                if mem[_6566 + mem[_6566]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_6566 + mem[_6566]]) + 32 < 0 or _6566 + ceil32(return_data.size) + (32 * mem[_6566 + mem[_6566]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _6566 + ceil32(return_data.size) + (32 * mem[_6566 + mem[_6566]]) + 32
                                                                mem[_6566 + ceil32(return_data.size)] = _6782
                                                                require return_data.size >= _6674 + (32 * _6782) + 32
                                                                t = _6566 + _6674 + 32
                                                                u = _6566 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _6782:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                if _6782 < 1:
                                                                    revert with 0, 17
                                                                if _6782 - 1 >= _6782:
                                                                    revert with 0, 50
                                                                _9415 = mem[(32 * _6782 - 1) + _6566 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _6782 - 1) + _6566 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6782 - 1) + _6566 + ceil32(return_data.size) + 32]:
                                                                    revert with 0, 17
                                                                if block.timestamp > -601:
                                                                    revert with 0, 17
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                mem[mem[64] + 36] = _9415 * slippageFactor / 1000
                                                                mem[mem[64] + 68] = 160
                                                                _9914 = mem[_3501]
                                                                mem[mem[64] + 164] = mem[_3501]
                                                                s = 0
                                                                t = _3501 + 32
                                                                u = mem[64] + 196
                                                                while s < _9914:
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                require ext_code.size(uniRouterAddress)
                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9415 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9914) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _12385 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _12547 = mem[_12385]
                                                                require mem[_12385] <= test266151307()
                                                                require _12385 + return_data.size > _12385 + mem[_12385] + 31
                                                                _12709 = mem[_12385 + mem[_12385]]
                                                                if mem[_12385 + mem[_12385]] > test266151307():
                                                                    revert with 0, 65
                                                                if (32 * mem[_12385 + mem[_12385]]) + 32 < 0 or _12385 + ceil32(return_data.size) + (32 * mem[_12385 + mem[_12385]]) + 32 > test266151307():
                                                                    revert with 0, 65
                                                                mem[64] = _12385 + ceil32(return_data.size) + (32 * mem[_12385 + mem[_12385]]) + 32
                                                                mem[_12385 + ceil32(return_data.size)] = _12709
                                                                require return_data.size >= _12547 + (32 * _12709) + 32
                                                                t = _12385 + _12547 + 32
                                                                u = _12385 + ceil32(return_data.size) + 32
                                                                s = 0
                                                                while s < _12709:
                                                                    mem[u] = mem[t]
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    s = s + 1
                                                                    continue 
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14923 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                if mem[_14923] < _3447:
                                                                    revert with 0, 17
                                                                if 0 > !(mem[_14923] - _3447):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14923] - _3447):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14923] - _3447
                                                            else:
                                                                mem[0] = 11
                                                                mem[_3501 + 32] = address(sub_c1e22a65.field_0)
                                                                if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3501 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6567 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6675 = mem[_6567]
                                                                    require mem[_6567] <= test266151307()
                                                                    require _6567 + return_data.size > _6567 + mem[_6567] + 31
                                                                    _6783 = mem[_6567 + mem[_6567]]
                                                                    if mem[_6567 + mem[_6567]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6567 + mem[_6567]]) + 32 < 0 or _6567 + ceil32(return_data.size) + (32 * mem[_6567 + mem[_6567]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6567 + ceil32(return_data.size) + (32 * mem[_6567 + mem[_6567]]) + 32
                                                                    mem[_6567 + ceil32(return_data.size)] = _6783
                                                                    require return_data.size >= _6675 + (32 * _6783) + 32
                                                                    t = _6567 + _6675 + 32
                                                                    u = _6567 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6783:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6783 < 1:
                                                                        revert with 0, 17
                                                                    if _6783 - 1 >= _6783:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6783 - 1) + _6567 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6783 - 1) + _6567 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6783 - 1) + _6567 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9915 = mem[_3501]
                                                                    mem[mem[64] + 164] = mem[_3501]
                                                                    s = 0
                                                                    t = _3501 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9915:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9915) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12387 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12549 = mem[_12387]
                                                                    require mem[_12387] <= test266151307()
                                                                    require _12387 + return_data.size > _12387 + mem[_12387] + 31
                                                                    _12711 = mem[_12387 + mem[_12387]]
                                                                    if mem[_12387 + mem[_12387]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12387 + mem[_12387]]) + 32 < 0 or _12387 + ceil32(return_data.size) + (32 * mem[_12387 + mem[_12387]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12387 + ceil32(return_data.size) + (32 * mem[_12387 + mem[_12387]]) + 32
                                                                    mem[_12387 + ceil32(return_data.size)] = _12711
                                                                    require return_data.size >= _12549 + (32 * _12711) + 32
                                                                    t = _12387 + _12549 + 32
                                                                    u = _12387 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12711:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14925 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14925] < _3447:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14925] - _3447):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14925] - _3447):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14925] - _3447
                                                                else:
                                                                    mem[_3501 + 64] = address(sub_c1e22a65.field_256)
                                                                    s = _3501 + 64
                                                                    t = sha3(11) + 1
                                                                    while _3501 + (32 * sub_c1e22a65.length) > s:
                                                                        mem[s + 32] = stor1[t]
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3501 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12386 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12548 = mem[_12386]
                                                                    require mem[_12386] <= test266151307()
                                                                    require _12386 + return_data.size > _12386 + mem[_12386] + 31
                                                                    _12710 = mem[_12386 + mem[_12386]]
                                                                    if mem[_12386 + mem[_12386]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12386 + mem[_12386]]) + 32 < 0 or _12386 + ceil32(return_data.size) + (32 * mem[_12386 + mem[_12386]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12386 + ceil32(return_data.size) + (32 * mem[_12386 + mem[_12386]]) + 32
                                                                    mem[_12386 + ceil32(return_data.size)] = _12710
                                                                    require return_data.size >= _12548 + (32 * _12710) + 32
                                                                    t = _12386 + _12548 + 32
                                                                    u = _12386 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12710:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _12710 < 1:
                                                                        revert with 0, 17
                                                                    if _12710 - 1 >= _12710:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _12710 - 1) + _12386 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12710 - 1) + _12386 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _12710 - 1) + _12386 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _15219 = mem[_3501]
                                                                    mem[mem[64] + 164] = mem[_3501]
                                                                    s = 0
                                                                    t = _3501 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _15219:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[mem[64] + 100] = this.address
                                                                    mem[mem[64] + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                         gas gas_remaining wei
                                                                        args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15219) + 32]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _15975 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _16029 = mem[_15975]
                                                                    require mem[_15975] <= test266151307()
                                                                    require _15975 + return_data.size > _15975 + mem[_15975] + 31
                                                                    _16083 = mem[_15975 + mem[_15975]]
                                                                    if mem[_15975 + mem[_15975]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_15975 + mem[_15975]]) + 32 < 0 or _15975 + ceil32(return_data.size) + (32 * mem[_15975 + mem[_15975]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _15975 + ceil32(return_data.size) + (32 * mem[_15975 + mem[_15975]]) + 32
                                                                    mem[_15975 + ceil32(return_data.size)] = _16083
                                                                    require return_data.size >= _16029 + (32 * _16083) + 32
                                                                    t = _15975 + _16029 + 32
                                                                    u = _15975 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _16083:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _16623 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_16623] < _3447:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_16623] - _3447):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_16623] - _3447):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16623] - _3447
                                                if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not PRECISION_FACTOR:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                    revert with 0, 17
                                                if not sub_88bbb0c1:
                                                    revert with 0, 18
                                                userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                else:
                                    if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                        sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                        mem[32] = 26
                                        if arg2 >= sub_8e6f4fb7.length:
                                            revert with 0, 50
                                        mem[0] = 25
                                        idx = 0
                                        while idx < userStakes[msg.sender].field_0:
                                            mem[0] = sha3(msg.sender, 26)
                                            if userStakes[msg.sender][idx].field_0 == arg2:
                                                if userStakes[msg.sender][idx].field_256:
                                                    if not arg1:
                                                        if arg1 < arg1:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 < 0:
                                                            revert with 0, 17
                                                        if userStaked[msg.sender].field_0 > -1:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                            revert with 0, 17
                                                        if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                            revert with 0, 17
                                                        if totalStaked < 0:
                                                            revert with 0, 17
                                                        if totalStaked > -1:
                                                            revert with 0, 17
                                                        emit Withdraw(arg2 << 248, 0, msg.sender);
                                                        stor1.length = 1
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                        revert with 0, 17
                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                        revert with 0, 17
                                                    if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                        if userStakes[msg.sender][idx].field_256 <= arg1:
                                                            if arg1 < userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = 0
                                                        else:
                                                            if userStakes[msg.sender][idx].field_256 < arg1:
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 -= arg1
                                                    else:
                                                        if sub_6e707b73Address == stakingTokenAddress:
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                        else:
                                                            if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(stakingTokenAddress)
                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args address(this.address)
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _3392 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _3446 = mem[_3392]
                                                                _3500 = mem[64]
                                                                mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                mem[_3500] = sub_c1e22a65.length
                                                                if not sub_c1e22a65.length:
                                                                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = 64
                                                                    mem[mem[64] + 68] = sub_c1e22a65.length
                                                                    s = 0
                                                                    t = _3500 + 32
                                                                    u = mem[64] + 100
                                                                    while s < sub_c1e22a65.length:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    require ext_code.size(uniRouterAddress)
                                                                    staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                            gas gas_remaining wei
                                                                           args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _6564 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _6672 = mem[_6564]
                                                                    require mem[_6564] <= test266151307()
                                                                    require _6564 + return_data.size > _6564 + mem[_6564] + 31
                                                                    _6780 = mem[_6564 + mem[_6564]]
                                                                    if mem[_6564 + mem[_6564]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_6564 + mem[_6564]]) + 32 < 0 or _6564 + ceil32(return_data.size) + (32 * mem[_6564 + mem[_6564]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _6564 + ceil32(return_data.size) + (32 * mem[_6564 + mem[_6564]]) + 32
                                                                    mem[_6564 + ceil32(return_data.size)] = _6780
                                                                    require return_data.size >= _6672 + (32 * _6780) + 32
                                                                    t = _6564 + _6672 + 32
                                                                    u = _6564 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _6780:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    if _6780 < 1:
                                                                        revert with 0, 17
                                                                    if _6780 - 1 >= _6780:
                                                                        revert with 0, 50
                                                                    if mem[(32 * _6780 - 1) + _6564 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6780 - 1) + _6564 + ceil32(return_data.size) + 32]:
                                                                        revert with 0, 17
                                                                    if block.timestamp > -601:
                                                                        revert with 0, 17
                                                                    _9790 = mem[64]
                                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    mem[mem[64] + 36] = mem[(32 * _6780 - 1) + _6564 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                    mem[mem[64] + 68] = 160
                                                                    _9912 = mem[_3500]
                                                                    mem[mem[64] + 164] = mem[_3500]
                                                                    s = 0
                                                                    t = _3500 + 32
                                                                    u = mem[64] + 196
                                                                    while s < _9912:
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_9790 + 100] = this.address
                                                                    mem[_9790 + 132] = block.timestamp + 600
                                                                    require ext_code.size(uniRouterAddress)
                                                                    call uniRouterAddress.mem[mem[64] len 4] with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _9790 + (32 * _9912) + -mem[64] + 192]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _12382 = mem[64]
                                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _12544 = mem[_12382]
                                                                    require mem[_12382] <= test266151307()
                                                                    require _12382 + return_data.size > _12382 + mem[_12382] + 31
                                                                    _12706 = mem[_12382 + mem[_12382]]
                                                                    if mem[_12382 + mem[_12382]] > test266151307():
                                                                        revert with 0, 65
                                                                    if (32 * mem[_12382 + mem[_12382]]) + 32 < 0 or _12382 + ceil32(return_data.size) + (32 * mem[_12382 + mem[_12382]]) + 32 > test266151307():
                                                                        revert with 0, 65
                                                                    mem[64] = _12382 + ceil32(return_data.size) + (32 * mem[_12382 + mem[_12382]]) + 32
                                                                    mem[_12382 + ceil32(return_data.size)] = _12706
                                                                    require return_data.size >= _12544 + (32 * _12706) + 32
                                                                    t = _12382 + _12544 + 32
                                                                    u = _12382 + ceil32(return_data.size) + 32
                                                                    s = 0
                                                                    while s < _12706:
                                                                        mem[u] = mem[t]
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        s = s + 1
                                                                        continue 
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _14920 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    if mem[_14920] < _3446:
                                                                        revert with 0, 17
                                                                    if 0 > !(mem[_14920] - _3446):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !(mem[_14920] - _3446):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14920] - _3446
                                                                else:
                                                                    mem[0] = 11
                                                                    mem[_3500 + 32] = address(sub_c1e22a65.field_0)
                                                                    if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3500 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6565 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6673 = mem[_6565]
                                                                        require mem[_6565] <= test266151307()
                                                                        require _6565 + return_data.size > _6565 + mem[_6565] + 31
                                                                        _6781 = mem[_6565 + mem[_6565]]
                                                                        if mem[_6565 + mem[_6565]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6565 + mem[_6565]]) + 32 < 0 or _6565 + ceil32(return_data.size) + (32 * mem[_6565 + mem[_6565]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6565 + ceil32(return_data.size) + (32 * mem[_6565 + mem[_6565]]) + 32
                                                                        mem[_6565 + ceil32(return_data.size)] = _6781
                                                                        require return_data.size >= _6673 + (32 * _6781) + 32
                                                                        t = _6565 + _6673 + 32
                                                                        u = _6565 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6781:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6781 < 1:
                                                                            revert with 0, 17
                                                                        if _6781 - 1 >= _6781:
                                                                            revert with 0, 50
                                                                        _9414 = mem[(32 * _6781 - 1) + _6565 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6781 - 1) + _6565 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6781 - 1) + _6565 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9414 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9913 = mem[_3500]
                                                                        mem[mem[64] + 164] = mem[_3500]
                                                                        s = 0
                                                                        t = _3500 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9913:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9414 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9913) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12384 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12546 = mem[_12384]
                                                                        require mem[_12384] <= test266151307()
                                                                        require _12384 + return_data.size > _12384 + mem[_12384] + 31
                                                                        _12708 = mem[_12384 + mem[_12384]]
                                                                        if mem[_12384 + mem[_12384]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12384 + mem[_12384]]) + 32 < 0 or _12384 + ceil32(return_data.size) + (32 * mem[_12384 + mem[_12384]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12384 + ceil32(return_data.size) + (32 * mem[_12384 + mem[_12384]]) + 32
                                                                        mem[_12384 + ceil32(return_data.size)] = _12708
                                                                        require return_data.size >= _12546 + (32 * _12708) + 32
                                                                        t = _12384 + _12546 + 32
                                                                        u = _12384 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12708:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14922 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14922] < _3446:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14922] - _3446):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14922] - _3446):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14922] - _3446
                                                                    else:
                                                                        mem[_3500 + 64] = address(sub_c1e22a65.field_256)
                                                                        s = _3500 + 64
                                                                        t = sha3(11) + 1
                                                                        while _3500 + (32 * sub_c1e22a65.length) > s:
                                                                            mem[s + 32] = stor1[t]
                                                                            s = s + 32
                                                                            t = t + 1
                                                                            continue 
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3500 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12383 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12545 = mem[_12383]
                                                                        require mem[_12383] <= test266151307()
                                                                        require _12383 + return_data.size > _12383 + mem[_12383] + 31
                                                                        _12707 = mem[_12383 + mem[_12383]]
                                                                        if mem[_12383 + mem[_12383]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12383 + mem[_12383]]) + 32 < 0 or _12383 + ceil32(return_data.size) + (32 * mem[_12383 + mem[_12383]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12383 + ceil32(return_data.size) + (32 * mem[_12383 + mem[_12383]]) + 32
                                                                        mem[_12383 + ceil32(return_data.size)] = _12707
                                                                        require return_data.size >= _12545 + (32 * _12707) + 32
                                                                        t = _12383 + _12545 + 32
                                                                        u = _12383 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12707:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _12707 < 1:
                                                                            revert with 0, 17
                                                                        if _12707 - 1 >= _12707:
                                                                            revert with 0, 50
                                                                        if mem[(32 * _12707 - 1) + _12383 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12707 - 1) + _12383 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = mem[(32 * _12707 - 1) + _12383 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _15218 = mem[_3500]
                                                                        mem[mem[64] + 164] = mem[_3500]
                                                                        s = 0
                                                                        t = _3500 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _15218:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15218) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _15974 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _16028 = mem[_15974]
                                                                        require mem[_15974] <= test266151307()
                                                                        require _15974 + return_data.size > _15974 + mem[_15974] + 31
                                                                        _16082 = mem[_15974 + mem[_15974]]
                                                                        if mem[_15974 + mem[_15974]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_15974 + mem[_15974]]) + 32 < 0 or _15974 + ceil32(return_data.size) + (32 * mem[_15974 + mem[_15974]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _15974 + ceil32(return_data.size) + (32 * mem[_15974 + mem[_15974]]) + 32
                                                                        mem[_15974 + ceil32(return_data.size)] = _16082
                                                                        require return_data.size >= _16028 + (32 * _16082) + 32
                                                                        t = _15974 + _16028 + 32
                                                                        u = _15974 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _16082:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _16622 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_16622] < _3446:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_16622] - _3446):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_16622] - _3446):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16622] - _3446
                                                    if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not PRECISION_FACTOR:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                    if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                        revert with 0, 17
                                                    if not sub_88bbb0c1:
                                                        revert with 0, 18
                                                    userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        if block.number <= bonusEndBlock:
                                            if block.number < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / block.number - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                revert with 0, 17
                                            if (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                revert with 0, 17
                                            if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                revert with 0, 18
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                revert with 0, 17
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (block.number * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                            sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                            mem[32] = 26
                                            if arg2 >= sub_8e6f4fb7.length:
                                                revert with 0, 50
                                            mem[0] = 25
                                            idx = 0
                                            while idx < userStakes[msg.sender].field_0:
                                                mem[0] = sha3(msg.sender, 26)
                                                if userStakes[msg.sender][idx].field_0 == arg2:
                                                    if userStakes[msg.sender][idx].field_256:
                                                        if not arg1:
                                                            if arg1 < arg1:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 < 0:
                                                                revert with 0, 17
                                                            if userStaked[msg.sender].field_0 > -1:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                revert with 0, 17
                                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                revert with 0, 17
                                                            if totalStaked < 0:
                                                                revert with 0, 17
                                                            if totalStaked > -1:
                                                                revert with 0, 17
                                                            emit Withdraw(arg2 << 248, 0, msg.sender);
                                                            stor1.length = 1
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                            revert with 0, 17
                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                            revert with 0, 17
                                                        if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                            if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                if arg1 < userStakes[msg.sender][idx].field_256:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = 0
                                                            else:
                                                                if userStakes[msg.sender][idx].field_256 < arg1:
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 -= arg1
                                                        else:
                                                            if sub_6e707b73Address == stakingTokenAddress:
                                                                if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                    revert with 0, 17
                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                            else:
                                                                if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(stakingTokenAddress)
                                                                    staticcall stakingTokenAddress.0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args address(this.address)
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _3391 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _3445 = mem[_3391]
                                                                    _3499 = mem[64]
                                                                    mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                    mem[_3499] = sub_c1e22a65.length
                                                                    if not sub_c1e22a65.length:
                                                                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = 64
                                                                        mem[mem[64] + 68] = sub_c1e22a65.length
                                                                        s = 0
                                                                        t = _3499 + 32
                                                                        u = mem[64] + 100
                                                                        while s < sub_c1e22a65.length:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        require ext_code.size(uniRouterAddress)
                                                                        staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                gas gas_remaining wei
                                                                               args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _6562 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _6670 = mem[_6562]
                                                                        require mem[_6562] <= test266151307()
                                                                        require _6562 + return_data.size > _6562 + mem[_6562] + 31
                                                                        _6778 = mem[_6562 + mem[_6562]]
                                                                        if mem[_6562 + mem[_6562]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_6562 + mem[_6562]]) + 32 < 0 or _6562 + ceil32(return_data.size) + (32 * mem[_6562 + mem[_6562]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _6562 + ceil32(return_data.size) + (32 * mem[_6562 + mem[_6562]]) + 32
                                                                        mem[_6562 + ceil32(return_data.size)] = _6778
                                                                        require return_data.size >= _6670 + (32 * _6778) + 32
                                                                        t = _6562 + _6670 + 32
                                                                        u = _6562 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _6778:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        if _6778 < 1:
                                                                            revert with 0, 17
                                                                        if _6778 - 1 >= _6778:
                                                                            revert with 0, 50
                                                                        _9409 = mem[(32 * _6778 - 1) + _6562 + ceil32(return_data.size) + 32]
                                                                        if mem[(32 * _6778 - 1) + _6562 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6778 - 1) + _6562 + ceil32(return_data.size) + 32]:
                                                                            revert with 0, 17
                                                                        if block.timestamp > -601:
                                                                            revert with 0, 17
                                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                        mem[mem[64] + 36] = _9409 * slippageFactor / 1000
                                                                        mem[mem[64] + 68] = 160
                                                                        _9910 = mem[_3499]
                                                                        mem[mem[64] + 164] = mem[_3499]
                                                                        s = 0
                                                                        t = _3499 + 32
                                                                        u = mem[64] + 196
                                                                        while s < _9910:
                                                                            mem[u] = mem[t + 12 len 20]
                                                                            s = s + 1
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            continue 
                                                                        mem[mem[64] + 100] = this.address
                                                                        mem[mem[64] + 132] = block.timestamp + 600
                                                                        require ext_code.size(uniRouterAddress)
                                                                        call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                             gas gas_remaining wei
                                                                            args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9409 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9910) + 32]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _12379 = mem[64]
                                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _12541 = mem[_12379]
                                                                        require mem[_12379] <= test266151307()
                                                                        require _12379 + return_data.size > _12379 + mem[_12379] + 31
                                                                        _12703 = mem[_12379 + mem[_12379]]
                                                                        if mem[_12379 + mem[_12379]] > test266151307():
                                                                            revert with 0, 65
                                                                        if (32 * mem[_12379 + mem[_12379]]) + 32 < 0 or _12379 + ceil32(return_data.size) + (32 * mem[_12379 + mem[_12379]]) + 32 > test266151307():
                                                                            revert with 0, 65
                                                                        mem[64] = _12379 + ceil32(return_data.size) + (32 * mem[_12379 + mem[_12379]]) + 32
                                                                        mem[_12379 + ceil32(return_data.size)] = _12703
                                                                        require return_data.size >= _12541 + (32 * _12703) + 32
                                                                        t = _12379 + _12541 + 32
                                                                        u = _12379 + ceil32(return_data.size) + 32
                                                                        s = 0
                                                                        while s < _12703:
                                                                            mem[u] = mem[t]
                                                                            t = t + 32
                                                                            u = u + 32
                                                                            s = s + 1
                                                                            continue 
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _14917 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        if mem[_14917] < _3445:
                                                                            revert with 0, 17
                                                                        if 0 > !(mem[_14917] - _3445):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !(mem[_14917] - _3445):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14917] - _3445
                                                                    else:
                                                                        mem[0] = 11
                                                                        mem[_3499 + 32] = address(sub_c1e22a65.field_0)
                                                                        if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3499 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6563 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6671 = mem[_6563]
                                                                            require mem[_6563] <= test266151307()
                                                                            require _6563 + return_data.size > _6563 + mem[_6563] + 31
                                                                            _6779 = mem[_6563 + mem[_6563]]
                                                                            if mem[_6563 + mem[_6563]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6563 + mem[_6563]]) + 32 < 0 or _6563 + ceil32(return_data.size) + (32 * mem[_6563 + mem[_6563]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6563 + ceil32(return_data.size) + (32 * mem[_6563 + mem[_6563]]) + 32
                                                                            mem[_6563 + ceil32(return_data.size)] = _6779
                                                                            require return_data.size >= _6671 + (32 * _6779) + 32
                                                                            t = _6563 + _6671 + 32
                                                                            u = _6563 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6779:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6779 < 1:
                                                                                revert with 0, 17
                                                                            if _6779 - 1 >= _6779:
                                                                                revert with 0, 50
                                                                            _9411 = mem[(32 * _6779 - 1) + _6563 + ceil32(return_data.size) + 32]
                                                                            if mem[(32 * _6779 - 1) + _6563 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6779 - 1) + _6563 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = _9411 * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9911 = mem[_3499]
                                                                            mem[mem[64] + 164] = mem[_3499]
                                                                            s = 0
                                                                            t = _3499 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9911:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _9411 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9911) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12381 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12543 = mem[_12381]
                                                                            require mem[_12381] <= test266151307()
                                                                            require _12381 + return_data.size > _12381 + mem[_12381] + 31
                                                                            _12705 = mem[_12381 + mem[_12381]]
                                                                            if mem[_12381 + mem[_12381]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12381 + mem[_12381]]) + 32 < 0 or _12381 + ceil32(return_data.size) + (32 * mem[_12381 + mem[_12381]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12381 + ceil32(return_data.size) + (32 * mem[_12381 + mem[_12381]]) + 32
                                                                            mem[_12381 + ceil32(return_data.size)] = _12705
                                                                            require return_data.size >= _12543 + (32 * _12705) + 32
                                                                            t = _12381 + _12543 + 32
                                                                            u = _12381 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12705:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14919 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14919] < _3445:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14919] - _3445):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14919] - _3445):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14919] - _3445
                                                                        else:
                                                                            mem[_3499 + 64] = address(sub_c1e22a65.field_256)
                                                                            s = _3499 + 64
                                                                            t = sha3(11) + 1
                                                                            while _3499 + (32 * sub_c1e22a65.length) > s:
                                                                                mem[s + 32] = stor1[t]
                                                                                s = s + 32
                                                                                t = t + 1
                                                                                continue 
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3499 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12380 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12542 = mem[_12380]
                                                                            require mem[_12380] <= test266151307()
                                                                            require _12380 + return_data.size > _12380 + mem[_12380] + 31
                                                                            _12704 = mem[_12380 + mem[_12380]]
                                                                            if mem[_12380 + mem[_12380]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12380 + mem[_12380]]) + 32 < 0 or _12380 + ceil32(return_data.size) + (32 * mem[_12380 + mem[_12380]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12380 + ceil32(return_data.size) + (32 * mem[_12380 + mem[_12380]]) + 32
                                                                            mem[_12380 + ceil32(return_data.size)] = _12704
                                                                            require return_data.size >= _12542 + (32 * _12704) + 32
                                                                            t = _12380 + _12542 + 32
                                                                            u = _12380 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12704:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _12704 < 1:
                                                                                revert with 0, 17
                                                                            if _12704 - 1 >= _12704:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _12704 - 1) + _12380 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12704 - 1) + _12380 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _12704 - 1) + _12380 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _15217 = mem[_3499]
                                                                            mem[mem[64] + 164] = mem[_3499]
                                                                            s = 0
                                                                            t = _3499 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _15217:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15217) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _15973 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _16027 = mem[_15973]
                                                                            require mem[_15973] <= test266151307()
                                                                            require _15973 + return_data.size > _15973 + mem[_15973] + 31
                                                                            _16081 = mem[_15973 + mem[_15973]]
                                                                            if mem[_15973 + mem[_15973]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_15973 + mem[_15973]]) + 32 < 0 or _15973 + ceil32(return_data.size) + (32 * mem[_15973 + mem[_15973]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _15973 + ceil32(return_data.size) + (32 * mem[_15973 + mem[_15973]]) + 32
                                                                            mem[_15973 + ceil32(return_data.size)] = _16081
                                                                            require return_data.size >= _16027 + (32 * _16081) + 32
                                                                            t = _15973 + _16027 + 32
                                                                            u = _15973 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _16081:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _16621 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_16621] < _3445:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_16621] - _3445):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_16621] - _3445):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16621] - _3445
                                                        if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not PRECISION_FACTOR:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                        if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                            revert with 0, 17
                                                        if not sub_88bbb0c1:
                                                            revert with 0, 18
                                                        userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                        else:
                                            if sub_8e6f4fb7[8 * uint8(arg2)].field_1536 >= bonusEndBlock:
                                                if False and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > 0:
                                                    revert with 0, 17
                                                if False and PRECISION_FACTOR > 0:
                                                    revert with 0, 17
                                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                    revert with 0, 18
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !(0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                    revert with 0, 17
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += 0 / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                                mem[32] = 26
                                                if arg2 >= sub_8e6f4fb7.length:
                                                    revert with 0, 50
                                                mem[0] = 25
                                                idx = 0
                                                while idx < userStakes[msg.sender].field_0:
                                                    mem[0] = sha3(msg.sender, 26)
                                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                                        if userStakes[msg.sender][idx].field_256:
                                                            if not arg1:
                                                                if arg1 < arg1:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 < 0:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 > -1:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                    revert with 0, 17
                                                                if totalStaked < 0:
                                                                    revert with 0, 17
                                                                if totalStaked > -1:
                                                                    revert with 0, 17
                                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                                stor1.length = 1
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = 0
                                                                else:
                                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                                            else:
                                                                if sub_6e707b73Address == stakingTokenAddress:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    else:
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _3390 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _3444 = mem[_3390]
                                                                        _3498 = mem[64]
                                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                        mem[_3498] = sub_c1e22a65.length
                                                                        if not sub_c1e22a65.length:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3498 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6560 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6668 = mem[_6560]
                                                                            require mem[_6560] <= test266151307()
                                                                            require _6560 + return_data.size > _6560 + mem[_6560] + 31
                                                                            _6776 = mem[_6560 + mem[_6560]]
                                                                            if mem[_6560 + mem[_6560]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6560 + mem[_6560]]) + 32 < 0 or _6560 + ceil32(return_data.size) + (32 * mem[_6560 + mem[_6560]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6560 + ceil32(return_data.size) + (32 * mem[_6560 + mem[_6560]]) + 32
                                                                            mem[_6560 + ceil32(return_data.size)] = _6776
                                                                            require return_data.size >= _6668 + (32 * _6776) + 32
                                                                            t = _6560 + _6668 + 32
                                                                            u = _6560 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6776:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6776 < 1:
                                                                                revert with 0, 17
                                                                            if _6776 - 1 >= _6776:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6776 - 1) + _6560 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6776 - 1) + _6560 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            _9784 = mem[64]
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6776 - 1) + _6560 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9908 = mem[_3498]
                                                                            mem[mem[64] + 164] = mem[_3498]
                                                                            s = 0
                                                                            t = _3498 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9908:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[_9784 + 100] = this.address
                                                                            mem[_9784 + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.mem[mem[64] len 4] with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len _9784 + (32 * _9908) + -mem[64] + 192]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12376 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12538 = mem[_12376]
                                                                            require mem[_12376] <= test266151307()
                                                                            require _12376 + return_data.size > _12376 + mem[_12376] + 31
                                                                            _12700 = mem[_12376 + mem[_12376]]
                                                                            if mem[_12376 + mem[_12376]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12376 + mem[_12376]]) + 32 < 0 or _12376 + ceil32(return_data.size) + (32 * mem[_12376 + mem[_12376]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12376 + ceil32(return_data.size) + (32 * mem[_12376 + mem[_12376]]) + 32
                                                                            mem[_12376 + ceil32(return_data.size)] = _12700
                                                                            require return_data.size >= _12538 + (32 * _12700) + 32
                                                                            t = _12376 + _12538 + 32
                                                                            u = _12376 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12700:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14914 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14914] < _3444:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14914] - _3444):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14914] - _3444):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14914] - _3444
                                                                        else:
                                                                            mem[0] = 11
                                                                            mem[_3498 + 32] = address(sub_c1e22a65.field_0)
                                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3498 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _6561 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _6669 = mem[_6561]
                                                                                require mem[_6561] <= test266151307()
                                                                                require _6561 + return_data.size > _6561 + mem[_6561] + 31
                                                                                _6777 = mem[_6561 + mem[_6561]]
                                                                                if mem[_6561 + mem[_6561]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_6561 + mem[_6561]]) + 32 < 0 or _6561 + ceil32(return_data.size) + (32 * mem[_6561 + mem[_6561]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _6561 + ceil32(return_data.size) + (32 * mem[_6561 + mem[_6561]]) + 32
                                                                                mem[_6561 + ceil32(return_data.size)] = _6777
                                                                                require return_data.size >= _6669 + (32 * _6777) + 32
                                                                                t = _6561 + _6669 + 32
                                                                                u = _6561 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _6777:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _6777 < 1:
                                                                                    revert with 0, 17
                                                                                if _6777 - 1 >= _6777:
                                                                                    revert with 0, 50
                                                                                if mem[(32 * _6777 - 1) + _6561 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6777 - 1) + _6561 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                _9786 = mem[64]
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = mem[(32 * _6777 - 1) + _6561 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _9909 = mem[_3498]
                                                                                mem[mem[64] + 164] = mem[_3498]
                                                                                s = 0
                                                                                t = _3498 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _9909:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[_9786 + 100] = this.address
                                                                                mem[_9786 + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                                     gas gas_remaining wei
                                                                                    args mem[mem[64] + 4 len _9786 + (32 * _9909) + -mem[64] + 192]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12378 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12540 = mem[_12378]
                                                                                require mem[_12378] <= test266151307()
                                                                                require _12378 + return_data.size > _12378 + mem[_12378] + 31
                                                                                _12702 = mem[_12378 + mem[_12378]]
                                                                                if mem[_12378 + mem[_12378]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12378 + mem[_12378]]) + 32 < 0 or _12378 + ceil32(return_data.size) + (32 * mem[_12378 + mem[_12378]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12378 + ceil32(return_data.size) + (32 * mem[_12378 + mem[_12378]]) + 32
                                                                                mem[_12378 + ceil32(return_data.size)] = _12702
                                                                                require return_data.size >= _12540 + (32 * _12702) + 32
                                                                                t = _12378 + _12540 + 32
                                                                                u = _12378 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12702:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _14916 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_14916] < _3444:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_14916] - _3444):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14916] - _3444):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14916] - _3444
                                                                            else:
                                                                                mem[_3498 + 64] = address(sub_c1e22a65.field_256)
                                                                                s = _3498 + 64
                                                                                t = sha3(11) + 1
                                                                                while _3498 + (32 * sub_c1e22a65.length) > s:
                                                                                    mem[s + 32] = stor1[t]
                                                                                    s = s + 32
                                                                                    t = t + 1
                                                                                    continue 
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3498 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12377 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12539 = mem[_12377]
                                                                                require mem[_12377] <= test266151307()
                                                                                require _12377 + return_data.size > _12377 + mem[_12377] + 31
                                                                                _12701 = mem[_12377 + mem[_12377]]
                                                                                if mem[_12377 + mem[_12377]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12377 + mem[_12377]]) + 32 < 0 or _12377 + ceil32(return_data.size) + (32 * mem[_12377 + mem[_12377]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12377 + ceil32(return_data.size) + (32 * mem[_12377 + mem[_12377]]) + 32
                                                                                mem[_12377 + ceil32(return_data.size)] = _12701
                                                                                require return_data.size >= _12539 + (32 * _12701) + 32
                                                                                t = _12377 + _12539 + 32
                                                                                u = _12377 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12701:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _12701 < 1:
                                                                                    revert with 0, 17
                                                                                if _12701 - 1 >= _12701:
                                                                                    revert with 0, 50
                                                                                if mem[(32 * _12701 - 1) + _12377 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12701 - 1) + _12377 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                _15162 = mem[64]
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = mem[(32 * _12701 - 1) + _12377 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _15216 = mem[_3498]
                                                                                mem[mem[64] + 164] = mem[_3498]
                                                                                s = 0
                                                                                t = _3498 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _15216:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[_15162 + 100] = this.address
                                                                                mem[_15162 + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                                     gas gas_remaining wei
                                                                                    args mem[mem[64] + 4 len _15162 + (32 * _15216) + -mem[64] + 192]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _15972 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _16026 = mem[_15972]
                                                                                require mem[_15972] <= test266151307()
                                                                                require _15972 + return_data.size > _15972 + mem[_15972] + 31
                                                                                _16080 = mem[_15972 + mem[_15972]]
                                                                                if mem[_15972 + mem[_15972]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_15972 + mem[_15972]]) + 32 < 0 or _15972 + ceil32(return_data.size) + (32 * mem[_15972 + mem[_15972]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _15972 + ceil32(return_data.size) + (32 * mem[_15972 + mem[_15972]]) + 32
                                                                                mem[_15972 + ceil32(return_data.size)] = _16080
                                                                                require return_data.size >= _16026 + (32 * _16080) + 32
                                                                                t = _15972 + _16026 + 32
                                                                                u = _15972 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _16080:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _16620 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_16620] < _3444:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_16620] - _3444):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16620] - _3444):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16620] - _3444
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                    if idx == -1:
                                                        revert with 0, 17
                                                    idx = idx + 1
                                                    continue 
                                            else:
                                                if bonusEndBlock < sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                    revert with 0, 17
                                                if bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536 and sub_8e6f4fb7[8 * uint8(arg2)].field_1024 > -1 / bonusEndBlock - sub_8e6f4fb7[8 * uint8(arg2)].field_1536:
                                                    revert with 0, 17
                                                if (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) and PRECISION_FACTOR > -1 / (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024):
                                                    revert with 0, 17
                                                if not sub_8e6f4fb7[8 * uint8(arg2)].field_1792:
                                                    revert with 0, 18
                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > !((bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792):
                                                    revert with 0, 17
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1280 += (bonusEndBlock * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) - (sub_8e6f4fb7[8 * uint8(arg2)].field_1536 * sub_8e6f4fb7[8 * uint8(arg2)].field_1024 * PRECISION_FACTOR) / sub_8e6f4fb7[8 * uint8(arg2)].field_1792
                                                sub_8e6f4fb7[8 * uint8(arg2)].field_1536 = block.number
                                                mem[32] = 26
                                                if arg2 >= sub_8e6f4fb7.length:
                                                    revert with 0, 50
                                                mem[0] = 25
                                                idx = 0
                                                while idx < userStakes[msg.sender].field_0:
                                                    mem[0] = sha3(msg.sender, 26)
                                                    if userStakes[msg.sender][idx].field_0 == arg2:
                                                        if userStakes[msg.sender][idx].field_256:
                                                            if not arg1:
                                                                if arg1 < arg1:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 < 0:
                                                                    revert with 0, 17
                                                                if userStaked[msg.sender].field_0 > -1:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
                                                                    revert with 0, 17
                                                                if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
                                                                    revert with 0, 17
                                                                if totalStaked < 0:
                                                                    revert with 0, 17
                                                                if totalStaked > -1:
                                                                    revert with 0, 17
                                                                emit Withdraw(arg2 << 248, 0, msg.sender);
                                                                stor1.length = 1
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR < userStakes[msg.sender][idx].field_1024:
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            if userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1 < userStakes[msg.sender][idx].field_1280:
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1) - userStakes[msg.sender][idx].field_1280):
                                                                revert with 0, 17
                                                            if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                revert with 0, 17
                                                            if userStakes[msg.sender][idx].field_768 <= block.timestamp:
                                                                if userStakes[msg.sender][idx].field_256 <= arg1:
                                                                    if arg1 < userStakes[msg.sender][idx].field_256:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = 0
                                                                else:
                                                                    if userStakes[msg.sender][idx].field_256 < arg1:
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 -= arg1
                                                            else:
                                                                if sub_6e707b73Address == stakingTokenAddress:
                                                                    if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                        revert with 0, 17
                                                                    userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                else:
                                                                    if (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024 <= 0:
                                                                        if 0 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        if userStakes[msg.sender][idx].field_256 > !((userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024):
                                                                            revert with 0, 17
                                                                        userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                    else:
                                                                        mem[mem[64] + 4] = this.address
                                                                        require ext_code.size(stakingTokenAddress)
                                                                        staticcall stakingTokenAddress.0x70a08231 with:
                                                                                gas gas_remaining wei
                                                                               args address(this.address)
                                                                        mem[mem[64]] = ext_call.return_data[0]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        _3389 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 32
                                                                        _3443 = mem[_3389]
                                                                        _3497 = mem[64]
                                                                        mem[64] = mem[64] + (32 * sub_c1e22a65.length) + 32
                                                                        mem[_3497] = sub_c1e22a65.length
                                                                        if not sub_c1e22a65.length:
                                                                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = 64
                                                                            mem[mem[64] + 68] = sub_c1e22a65.length
                                                                            s = 0
                                                                            t = _3497 + 32
                                                                            u = mem[64] + 100
                                                                            while s < sub_c1e22a65.length:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            require ext_code.size(uniRouterAddress)
                                                                            staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                    gas gas_remaining wei
                                                                                   args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _6558 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _6666 = mem[_6558]
                                                                            require mem[_6558] <= test266151307()
                                                                            require _6558 + return_data.size > _6558 + mem[_6558] + 31
                                                                            _6774 = mem[_6558 + mem[_6558]]
                                                                            if mem[_6558 + mem[_6558]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_6558 + mem[_6558]]) + 32 < 0 or _6558 + ceil32(return_data.size) + (32 * mem[_6558 + mem[_6558]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _6558 + ceil32(return_data.size) + (32 * mem[_6558 + mem[_6558]]) + 32
                                                                            mem[_6558 + ceil32(return_data.size)] = _6774
                                                                            require return_data.size >= _6666 + (32 * _6774) + 32
                                                                            t = _6558 + _6666 + 32
                                                                            u = _6558 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _6774:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            if _6774 < 1:
                                                                                revert with 0, 17
                                                                            if _6774 - 1 >= _6774:
                                                                                revert with 0, 50
                                                                            if mem[(32 * _6774 - 1) + _6558 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6774 - 1) + _6558 + ceil32(return_data.size) + 32]:
                                                                                revert with 0, 17
                                                                            if block.timestamp > -601:
                                                                                revert with 0, 17
                                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                            mem[mem[64] + 36] = mem[(32 * _6774 - 1) + _6558 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                            mem[mem[64] + 68] = 160
                                                                            _9906 = mem[_3497]
                                                                            mem[mem[64] + 164] = mem[_3497]
                                                                            s = 0
                                                                            t = _3497 + 32
                                                                            u = mem[64] + 196
                                                                            while s < _9906:
                                                                                mem[u] = mem[t + 12 len 20]
                                                                                s = s + 1
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                continue 
                                                                            mem[mem[64] + 100] = this.address
                                                                            mem[mem[64] + 132] = block.timestamp + 600
                                                                            require ext_code.size(uniRouterAddress)
                                                                            call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                 gas gas_remaining wei
                                                                                args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, mem[mem[64] + 36], 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _9906) + 32]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _12373 = mem[64]
                                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            _12535 = mem[_12373]
                                                                            require mem[_12373] <= test266151307()
                                                                            require _12373 + return_data.size > _12373 + mem[_12373] + 31
                                                                            _12697 = mem[_12373 + mem[_12373]]
                                                                            if mem[_12373 + mem[_12373]] > test266151307():
                                                                                revert with 0, 65
                                                                            if (32 * mem[_12373 + mem[_12373]]) + 32 < 0 or _12373 + ceil32(return_data.size) + (32 * mem[_12373 + mem[_12373]]) + 32 > test266151307():
                                                                                revert with 0, 65
                                                                            mem[64] = _12373 + ceil32(return_data.size) + (32 * mem[_12373 + mem[_12373]]) + 32
                                                                            mem[_12373 + ceil32(return_data.size)] = _12697
                                                                            require return_data.size >= _12535 + (32 * _12697) + 32
                                                                            t = _12373 + _12535 + 32
                                                                            u = _12373 + ceil32(return_data.size) + 32
                                                                            s = 0
                                                                            while s < _12697:
                                                                                mem[u] = mem[t]
                                                                                t = t + 32
                                                                                u = u + 32
                                                                                s = s + 1
                                                                                continue 
                                                                            mem[mem[64] + 4] = this.address
                                                                            require ext_code.size(stakingTokenAddress)
                                                                            staticcall stakingTokenAddress.0x70a08231 with:
                                                                                    gas gas_remaining wei
                                                                                   args address(this.address)
                                                                            mem[mem[64]] = ext_call.return_data[0]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            _14911 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 32
                                                                            if mem[_14911] < _3443:
                                                                                revert with 0, 17
                                                                            if 0 > !(mem[_14911] - _3443):
                                                                                revert with 0, 17
                                                                            if userStakes[msg.sender][idx].field_256 > !(mem[_14911] - _3443):
                                                                                revert with 0, 17
                                                                            userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14911] - _3443
                                                                        else:
                                                                            mem[0] = 11
                                                                            mem[_3497 + 32] = address(sub_c1e22a65.field_0)
                                                                            if (32 * sub_c1e22a65.length) + 32 <= 64:
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3497 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _6559 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _6667 = mem[_6559]
                                                                                require mem[_6559] <= test266151307()
                                                                                require _6559 + return_data.size > _6559 + mem[_6559] + 31
                                                                                _6775 = mem[_6559 + mem[_6559]]
                                                                                if mem[_6559 + mem[_6559]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_6559 + mem[_6559]]) + 32 < 0 or _6559 + ceil32(return_data.size) + (32 * mem[_6559 + mem[_6559]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _6559 + ceil32(return_data.size) + (32 * mem[_6559 + mem[_6559]]) + 32
                                                                                mem[_6559 + ceil32(return_data.size)] = _6775
                                                                                require return_data.size >= _6667 + (32 * _6775) + 32
                                                                                t = _6559 + _6667 + 32
                                                                                u = _6559 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _6775:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _6775 < 1:
                                                                                    revert with 0, 17
                                                                                if _6775 - 1 >= _6775:
                                                                                    revert with 0, 50
                                                                                if mem[(32 * _6775 - 1) + _6559 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _6775 - 1) + _6559 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                _9783 = mem[64]
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = mem[(32 * _6775 - 1) + _6559 + ceil32(return_data.size) + 32] * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _9907 = mem[_3497]
                                                                                mem[mem[64] + 164] = mem[_3497]
                                                                                s = 0
                                                                                t = _3497 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _9907:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[_9783 + 100] = this.address
                                                                                mem[_9783 + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.mem[mem[64] len 4] with:
                                                                                     gas gas_remaining wei
                                                                                    args mem[mem[64] + 4 len _9783 + (32 * _9907) + -mem[64] + 192]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12375 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12537 = mem[_12375]
                                                                                require mem[_12375] <= test266151307()
                                                                                require _12375 + return_data.size > _12375 + mem[_12375] + 31
                                                                                _12699 = mem[_12375 + mem[_12375]]
                                                                                if mem[_12375 + mem[_12375]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12375 + mem[_12375]]) + 32 < 0 or _12375 + ceil32(return_data.size) + (32 * mem[_12375 + mem[_12375]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12375 + ceil32(return_data.size) + (32 * mem[_12375 + mem[_12375]]) + 32
                                                                                mem[_12375 + ceil32(return_data.size)] = _12699
                                                                                require return_data.size >= _12537 + (32 * _12699) + 32
                                                                                t = _12375 + _12537 + 32
                                                                                u = _12375 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12699:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _14913 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_14913] < _3443:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_14913] - _3443):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_14913] - _3443):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_14913] - _3443
                                                                            else:
                                                                                mem[_3497 + 64] = address(sub_c1e22a65.field_256)
                                                                                s = _3497 + 64
                                                                                t = sha3(11) + 1
                                                                                while _3497 + (32 * sub_c1e22a65.length) > s:
                                                                                    mem[s + 32] = stor1[t]
                                                                                    s = s + 32
                                                                                    t = t + 1
                                                                                    continue 
                                                                                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = 64
                                                                                mem[mem[64] + 68] = sub_c1e22a65.length
                                                                                s = 0
                                                                                t = _3497 + 32
                                                                                u = mem[64] + 100
                                                                                while s < sub_c1e22a65.length:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                require ext_code.size(uniRouterAddress)
                                                                                staticcall uniRouterAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                                                                                        gas gas_remaining wei
                                                                                       args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, Array(len=sub_c1e22a65.length, data=mem[mem[64] + 100 len 32 * sub_c1e22a65.length])
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _12374 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _12536 = mem[_12374]
                                                                                require mem[_12374] <= test266151307()
                                                                                require _12374 + return_data.size > _12374 + mem[_12374] + 31
                                                                                _12698 = mem[_12374 + mem[_12374]]
                                                                                if mem[_12374 + mem[_12374]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_12374 + mem[_12374]]) + 32 < 0 or _12374 + ceil32(return_data.size) + (32 * mem[_12374 + mem[_12374]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _12374 + ceil32(return_data.size) + (32 * mem[_12374 + mem[_12374]]) + 32
                                                                                mem[_12374 + ceil32(return_data.size)] = _12698
                                                                                require return_data.size >= _12536 + (32 * _12698) + 32
                                                                                t = _12374 + _12536 + 32
                                                                                u = _12374 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _12698:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                if _12698 < 1:
                                                                                    revert with 0, 17
                                                                                if _12698 - 1 >= _12698:
                                                                                    revert with 0, 50
                                                                                _14999 = mem[(32 * _12698 - 1) + _12374 + ceil32(return_data.size) + 32]
                                                                                if mem[(32 * _12698 - 1) + _12374 + ceil32(return_data.size) + 32] and slippageFactor > -1 / mem[(32 * _12698 - 1) + _12374 + ceil32(return_data.size) + 32]:
                                                                                    revert with 0, 17
                                                                                if block.timestamp > -601:
                                                                                    revert with 0, 17
                                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024
                                                                                mem[mem[64] + 36] = _14999 * slippageFactor / 1000
                                                                                mem[mem[64] + 68] = 160
                                                                                _15215 = mem[_3497]
                                                                                mem[mem[64] + 164] = mem[_3497]
                                                                                s = 0
                                                                                t = _3497 + 32
                                                                                u = mem[64] + 196
                                                                                while s < _15215:
                                                                                    mem[u] = mem[t + 12 len 20]
                                                                                    s = s + 1
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    continue 
                                                                                mem[mem[64] + 100] = this.address
                                                                                mem[mem[64] + 132] = block.timestamp + 600
                                                                                require ext_code.size(uniRouterAddress)
                                                                                call uniRouterAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                                     gas gas_remaining wei
                                                                                    args (userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR) - userStakes[msg.sender][idx].field_1024, _14999 * slippageFactor / 1000, 160, address(this.address), block.timestamp + 600, mem[mem[64] + 164 len (32 * _15215) + 32]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _15971 = mem[64]
                                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                _16025 = mem[_15971]
                                                                                require mem[_15971] <= test266151307()
                                                                                require _15971 + return_data.size > _15971 + mem[_15971] + 31
                                                                                _16079 = mem[_15971 + mem[_15971]]
                                                                                if mem[_15971 + mem[_15971]] > test266151307():
                                                                                    revert with 0, 65
                                                                                if (32 * mem[_15971 + mem[_15971]]) + 32 < 0 or _15971 + ceil32(return_data.size) + (32 * mem[_15971 + mem[_15971]]) + 32 > test266151307():
                                                                                    revert with 0, 65
                                                                                mem[64] = _15971 + ceil32(return_data.size) + (32 * mem[_15971 + mem[_15971]]) + 32
                                                                                mem[_15971 + ceil32(return_data.size)] = _16079
                                                                                require return_data.size >= _16025 + (32 * _16079) + 32
                                                                                t = _15971 + _16025 + 32
                                                                                u = _15971 + ceil32(return_data.size) + 32
                                                                                s = 0
                                                                                while s < _16079:
                                                                                    mem[u] = mem[t]
                                                                                    t = t + 32
                                                                                    u = u + 32
                                                                                    s = s + 1
                                                                                    continue 
                                                                                mem[mem[64] + 4] = this.address
                                                                                require ext_code.size(stakingTokenAddress)
                                                                                staticcall stakingTokenAddress.0x70a08231 with:
                                                                                        gas gas_remaining wei
                                                                                       args address(this.address)
                                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                                if not ext_call.success:
                                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                                _16619 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 32
                                                                                if mem[_16619] < _3443:
                                                                                    revert with 0, 17
                                                                                if 0 > !(mem[_16619] - _3443):
                                                                                    revert with 0, 17
                                                                                if userStakes[msg.sender][idx].field_256 > !(mem[_16619] - _3443):
                                                                                    revert with 0, 17
                                                                                userStakes[msg.sender][idx].field_256 = userStakes[msg.sender][idx].field_256 + mem[_16619] - _3443
                                                            if userStakes[msg.sender][idx].field_256 and sub_8e6f4fb7[8 * uint8(arg2)].field_1280 > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not PRECISION_FACTOR:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1024 = userStakes[msg.sender][idx].field_256 * sub_8e6f4fb7[8 * uint8(arg2)].field_1280 / PRECISION_FACTOR
                                                            if userStakes[msg.sender][idx].field_256 and sub_92b46e5b > -1 / userStakes[msg.sender][idx].field_256:
                                                                revert with 0, 17
                                                            if not sub_88bbb0c1:
                                                                revert with 0, 18
                                                            userStakes[msg.sender][idx].field_1280 = userStakes[msg.sender][idx].field_256 * sub_92b46e5b / sub_88bbb0c1
                                                    if idx == -1:
                                                        revert with 0, 17
                                                    idx = idx + 1
                                                    continue 
    if arg1 < arg1:
        revert with 0, 17
    if userStaked[msg.sender].field_0 < 0:
        revert with 0, 17
    if userStaked[msg.sender].field_0 > -1:
        revert with 0, 17
    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 < 0:
        revert with 0, 17
    if sub_8e6f4fb7[8 * uint8(arg2)].field_1792 > -1:
        revert with 0, 17
    if totalStaked < 0:
        revert with 0, 17
    if totalStaked > -1:
        revert with 0, 17
    emit Withdraw(arg2 << 248, 0, msg.sender);
    stor1.length = 1
}



}
